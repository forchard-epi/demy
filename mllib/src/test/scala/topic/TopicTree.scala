package demy.mllib.test.topic

import org.scalatest._
import demy.mllib.topic.{ClusteringNode, AnalogyNode, ClassifierNode, NodeParams, FilterMode}
import org.apache.spark.ml.linalg.{DenseVector, SparseVector, Vector => MLVector, Vectors}
import demy.mllib.test.{UnitTest, UnitTestVars}
import demy.mllib.linalg.implicits._
import scala.collection.mutable.{ArrayBuffer, HashSet, HashMap}
import scala.util.Random
trait TopicTreeSpec extends UnitTest{
  import demy.mllib.test.topic.{TopicTreeVars => v}  
 
  "AnalogyNode" should "get the expected analogy score" in {
    assert(v.appliedAnalogy.flatMap{ case(vClasses, resultDag, resultScore, expectedClasses, expectedDag, expectedScore) => 
      expectedScore
        .zip(resultScore)
        .map{case(a, b) => Math.abs(a - b)}
    }.sum <0.1)
  }
  it should "assign the right classes"in {
    assert(
      v.appliedAnalogy.flatMap{ case(vClasses, resultDag, resultScore, expectedClasses, expectedDag, expectedScore) => vClasses}.toSeq ==
      v.appliedAnalogy.flatMap{ case(vClasses, resultDag, resultScore, expectedClasses, expectedDag, expectedScore) => expectedClasses}.toSeq)
    
  } 
  it should "produce the right dag" in {
    assert(
      v.appliedAnalogy.flatMap{ case(vClasses, resultDag, resultScore, expectedClasses, expectedDag, expectedScore) => resultDag}.toSeq ==
      v.appliedAnalogy.flatMap{ case(vClasses, resultDag, resultScore, expectedClasses, expectedDag, expectedScore) => expectedDag}.toSeq
    )
  }

  "ClassifierNode" should "apply the right true classes" in {
    assert(
      v.classifiedClasses.take(v.pathologiesTest.size).filter(c => c == v.classifierTrueClass).size.toDouble / v.pathologiesTest.size > 0.8
    )
  }
  it should "apply the right false classes" in {
    assert(
      v.classifiedClasses.drop(v.pathologiesTest.size).filter(c => c == v.classifierFalseClass).size.toDouble / v.nonPathologiesTest.size > 0.8
    )
  }

  "ClusterNode" should " assign the closest center to each vector" in {
    assert(
      v.pointsInCluster.size == v.clusterVectors.size
    )
  }
}

object TopicTreeVars extends UnitTestVars {
  lazy val spark = getSpark
    
  def error(x: MLVector, y: MLVector): Double = {
    x.toArray.zip(y.toArray).map{case(a, b) => Math.abs(a - b)}.sum
  }

  lazy val treatDiseaseNode = AnalogyNode(
    name = "analogy"
    , tokens=ArrayBuffer("treatment", "disease")
    , points = ArrayBuffer(treatment, disease)
    , pClasses = ArrayBuffer(2, 1)
    , pDag = ArrayBuffer(1,-1)
    , referenceClass = 1
    , params = NodeParams(
        inClasses=Set(0)
        , outClasses=Set(2)
      )
    ).fit(spark)

  def analogyTests = Array(
      (Array("chemotheraputic", "cancer").toSeq, Array(chemotheraputic, cancer).toSeq, Array(0, 1) ,  Array(0.696956, 0.0), Array(2, 1), Array(1, -1))
      ,(Array("cisplatinr", "cancer").toSeq, Array(cisplatinr, cancer).toSeq, Array(0, 1), Array(0.652741, 0.0), Array(2, 1), Array(1, -1))
      ,(Array("chemotherapy", "cancer").toSeq, Array(chemotherapy, cancer).toSeq, Array(0, 1), Array(0.650912, 0.0), Array(2, 1), Array(1, -1))
  )
 
  lazy val appliedAnalogy = 
    analogyTests.map{case(tokens, vectors, vClasses, expectedScore, expectedClasses, expectedDag) =>
      val resultScore = Array.fill(tokens.size)(0.0)
      val resultDag = Array.fill(tokens.size)(-1)
      
      treatDiseaseNode
        .transform(
          vClasses = vClasses
          , scores = Some(resultScore)
          , dag = Some(resultDag)
          , vectors = vectors
          , tokens = tokens
          , spark = spark
        )
      (vClasses, resultDag, resultScore, expectedClasses, expectedDag, expectedScore)
    }

  def classifierFalseClass = 0
  def classifierTrueClass = 1
  lazy val classifier = 
    ClassifierNode (
      name = "classifier"
      , tokens = ArrayBuffer(pathologiesTokens ++ nonPathologiesTokens :_*)
      , points = ArrayBuffer(pathologies ++ nonPathologies :_* )
      , pClasses = ArrayBuffer(
        ( Array.fill(pathologies.size)(classifierTrueClass) 
          ++ Array.fill(nonPathologies.size)(classifierFalseClass)
        ):_*)
      , params = NodeParams(
         inClasses=Set(classifierFalseClass)
         , outClasses=Set(classifierTrueClass)
      )
    ).fit(spark)
  
  
  def classifiedClasses = {
    val classificationClasses = Array.fill(pathologiesTest.size + nonPathologiesTest.size)(classifierFalseClass)
    val classificationScores =  Array.fill(pathologiesTest.size + nonPathologiesTest.size)(0.0)
      classifier.transform(
        vClasses = classificationClasses
        , scores = Some(classificationScores)
        , dag = None
        , vectors = pathologiesTest ++ nonPathologiesTest
        , tokens = pathologiesTestTokens ++ nonPathologiesTestTokens
        , spark = spark
      )
      classificationClasses
    }

  def clusterInClass = 0
  def clusterOutClass = Array(1, 2)
  def clusterInVectors =  pathologiesTest ++ nonPathologiesTest ++ pathologies ++ nonPathologies 
  def clusterInTokens = pathologiesTestTokens ++ nonPathologiesTestTokens ++  pathologiesTokens ++ nonPathologiesTokens
  lazy val clusterOutClasses = clusterInVectors.map(v => clusterInClass).toArray
  lazy val clusterTokens = clusterInTokens.toArray
  lazy val clusterVectors = clusterInVectors.toArray
  
  lazy val clusterer =  {
    val c = ClusteringNode (
      name = "clusterer"
      ,params = NodeParams(
        inClasses=Set(clusterInClass)
        , outClasses=Set(clusterOutClass :_*)
        , links = Map(0 -> Set(1, 2))  
      )
      , maxTopWords = 6
      , classCenters = Map(1->0, 2->1)
      , vectorSize =  pathologiesTest(0).size
    )
    for(j <- 0 until 100) {
      val rIndex = Random.shuffle(Range(0, clusterInVectors.size).toList)
      for(i <- Iterable.range(0, clusterTokens.size)) {
        clusterVectors(i) = clusterInVectors(rIndex(i))
        clusterTokens(i) = clusterInTokens(rIndex(i))
      }
      for(i <- Iterable.range(0, clusterTokens.size)) clusterOutClasses(i) = clusterInClass
      
      c.transform(vClasses = clusterOutClasses, scores = None, dag = None
       , vectors = clusterVectors, tokens=clusterTokens, spark = spark) 
    }
    c
  }

  //checking that each vector is closest to its cluster
  def pointsInCluster = (for(i <- Iterable.range(0, clusterVectors.size)) 
    yield
      clusterer.pCenters.map(c => c.cosineSimilarity(clusterVectors(i))).max 
        == clusterer.pCenters(clusterer.classCenters(clusterOutClasses(i))).cosineSimilarity(clusterVectors(i))
    )
      .filter(v => v == true)


  /*Ensuring we are on a local maximum 
  val v1 = vectors.zip(outClasses).filter(p => p._2 == 1).map(_._1)
  val v2 = vectors.zip(outClasses).filter(p => p._2 == 2).map(_._1)
  val t1 = tokens.zip(outClasses).filter(p => p._2 == 1).map(_._1)
  val t2 = tokens.zip(outClasses).filter(p => p._2 == 2).map(_._1)
  val v1Center = v1.reduce(_.sum(_))
  val v2Center = v2.reduce(_.sum(_))
  val p1 = Iterable.range(0, clusterer.points.size).filter(i => clusterer.pClasses(i) == 1).map(i => clusterer.points(i)).toSeq
  val p2 = Iterable.range(0, clusterer.points.size).filter(i => clusterer.pClasses(i) == 2).map(i => clusterer.points(i)).toSeq
  val pTok1 = Iterable.range(0, clusterer.points.size).filter(i => clusterer.pClasses(i) == 1).map(i => clusterer.tokens(i)).toSeq
  val pTok2 = Iterable.range(0, clusterer.points.size).filter(i => clusterer.pClasses(i) == 2).map(i => clusterer.tokens(i)).toSeq
  val p1Center = p1.reduce(_.sum(_)) 
  val p2Center = p2.reduce(_.sum(_))

  println(s"gap is ${Seq((v1Center, p1Center), (v2Center, p2Center)).map(p => 1.0 - p._1.similarityScore(p._2)).sum} and should be ${clusterer.GAP}")
  val cVectors = Seq(v1, v2)
  val cTokens = Seq(t1, t2)
  val cPoints = Seq(p1, p2)
  val cPToks = Seq(pTok1, pTok2)
  val vCenters = Seq(v1Center, v2Center)
  val pCenters = Seq(p1Center, p2Center)

  val optimalRespected = 
    (for{c <- Iterable.range(0, cVectors.size)
        v <- Iterable.range(0, cVectors(c).size)} 
      yield {
        val (closestPoint, closestSim) = 
          (for(p <- Iterable.range(0, cPoints(c).size))
            yield (p, cPoints(c)(p).cosineSimilarity(cVectors(c)(v)))
          ).reduce((p1, p2) => (p1, p2) match {case ((_, sim1), (_, sim2)) => if(sim1 > sim2) p1 else p2})
        val newCenter = 
          (for(p <- Iterable.range(0, cPoints(c).size))
            yield if(p == closestPoint) cVectors(c)(v) else cPoints(c)(p)
          ).reduce(_.sum(_))
        if(newCenter.cosineSimilarity(vCenters(c)) - pCenters(c).cosineSimilarity(vCenters(c)) > .00001) {
          println(s"better found ${cTokens(c)(v)} than ${cPToks(c)(closestPoint)} on $c by ${newCenter.similarityScore(vCenters(c)) - pCenters(c).similarityScore(vCenters(c))}")
          false
        }
        else
          true
      }
    )
      .filter(v => v == true)
      .size
  println(s"Optimal position respected on $optimalRespected instead of ${vectors.size}")  

  println(s"tokens(0) = ${cPToks(0)} getting ${cVectors(0).size} words")
  println(s"tokens(1) = ${cPToks(1)} getting ${cVectors(1).size} hits")
  
  
  val patC = (DoTest.pathologiesTestTokens ++ DoTest.pathologiesTokens).toSet
  val nPatC = (DoTest.nonPathologiesTestTokens ++ DoTest.nonPathologiesTokens).toSet

  val m1 = t1.toSet.intersect(patC).size
  val m2 = t2.toSet.intersect(patC).size
  println(s"match is ${(if(m1 > m2) m1 else m2).toDouble/patC.size} on gap ${clusterer.GAP}")
  */
  def pathologiesTestTokens = Seq("migraine", "laryngitis", "leukaemia", "obesity", "lyme", "autism", "giantism", "diarrhea", "flu", "chicken pox", "hepatitis", "polyomyelitis", "polio", "yellow fever", "fever")
  def pathologiesTest = Seq(migraine, laryngitis, leukaemia, obesity, lyme, autism, giantism, diarrhea, flu, chicken_pox, hepatitis, polyomyelitis, polio, yellow_fever, fever)
  def nonPathologiesTest = Seq(experimentation, conclusions, discussion, after, belief, either, worst, death, beginning, end, vaccination)
  def nonPathologiesTestTokens = Seq("experimentation", "conclusions", "discussion", "after", "belief", "either", "worst", "death", "beginning", "end", "vaccination")

  def pathologiesTokens = Seq("cancer", "malaria", "influenza", "asthma", "bronchitis", "emphysema", "cystic_fibrosis", "burns", "breast_cancer", "measles", "vih")
  def pathologies = Seq(cancer, malaria, influenza, asthma, bronchitis, emphysema, cystic_fibrosis, burns, breast_cancer, measles, vih)

  def nonPathologiesTokens = Seq("sthis", "doctor", "hospital", "patient", "study", "why", "cohort", "first", "again", "our", "performance", "results", "associated")
  def nonPathologies = Seq(sthis, doctor, hospital, patient, study, why, cohort, first, again, our, performance, results, associated)
  

  def seqTokens = "complete response associated with lenalidomide and celecoxib in a case of primary refractory hodgkin lymphoma hodgkin lymphoma hl represents 11 of all lymphoma cases this disease occurs in young adults but also affects people over 55 years of age despite the fact that 80 of all newly diagnosed patients under 60 will achieve a sustained complete response cr 5 10 of hl patients are refractory to initial treatment and 10 30 of patients will eventually relapse after an initial cr the treatment recommendation for primary refractory or relapsed hl patients is salvage therapy followed by high dose chemotherapy and autologous stem cell transplantation following this approach a significant part will still relapse at any moment thus further research and new drugs or combinations are required overexpression of cox 2 has been associated with poor prognosis in relapse refractory hl patients so it could be a potential therapeutic target in hl for this purpose several drugs may have a role specific cox 2 inhibitors such as celecoxib or other anti inflammatory drugs such as lenalidomide may further inhibit lipopolysaccharide mediated induction of cox 2 moreover lenalidomide and cox 2 inhibitors celecoxib have been tested in solid tumors with encouraging results we present a case of a young female diagnosed with a heavily pretreated hl nodular sclerosis subtype who after failing six treatment lines only achieved clinical and radiological cr after six cycles of lenalidomide celecoxib that resulted in an event free survival of 22 months we explain the rationale of using this chemotherapy regimen and our patient follow up".split(" ").toSeq
  def cancer = Vectors.dense("0.225 -0.013189 -0.14105 -0.41083 -0.22931 0.21992 -0.35604 -0.028869 -0.37324 0.22845 -0.51933 0.24243 0.037752 -0.24094 0.14015 0.43498 -0.12517 0.33964 -0.0023665 -0.24429 0.069277 0.26496 -0.30905 0.35299 -0.13238 -0.78208 0.27071 -0.044216 -0.22124 0.09111 -0.1213 -0.24375 -0.02073 -0.15952 -0.23683 -0.17004 0.66903 0.20916 -0.2434 -0.2693 0.32358 0.74463 -0.16872 0.35362 -0.24254 -0.8156 -0.3428 0.18487 0.040053 -0.18641 -0.27479 -0.87252 0.1935 0.30648 0.061574 0.0034287 -0.52138 -0.32188 0.24453 -0.78913 -0.043933 -0.55406 0.025978 0.31133 0.28642 0.39285 0.0041877 -0.22118 0.75599 0.11338 0.85577 -0.14954 0.19678 0.0039879 1.0502 0.11279 0.25442 -0.12599 0.024918 0.2302 -0.23431 0.47343 0.25685 0.26935 -0.29335 0.12961 0.042201 0.49611 -0.46753 0.10103 -0.37729 0.39798 0.13596 -0.00051042 0.42995 0.43887 0.24575 -0.29991 0.28836 0.36636".split(" ").map(_.toDouble))
  def chemotheraputic = Vectors.dense("-0.07717 -0.26366 -0.081799 -0.38342 -0.11181 0.50445 -0.11943 -0.14513 0.28472 0.11074 -0.20772 0.51748 -0.0056331 -0.34269 0.49227 0.33653 -0.079749 -0.028395 -0.12494 -0.47308 0.066413 0.37537 -0.3807 0.74962 -0.12464 -0.54497 0.22737 -0.23346 0.38039 0.36694 0.11474 -0.45566 -0.1804 0.022294 -0.31231 0.18614 0.20533 -0.41676 -0.1416 0.20984 0.31247 0.41639 -0.62547 -0.29666 -0.26521 -0.11273 -0.36513 -0.14175 -0.40733 -0.43928 0.11928 -0.55472 0.36419 -0.11054 -0.1688 -0.22445 -0.23074 -0.26316 0.010922 -0.25096 0.048618 -0.149 -0.13041 0.43598 0.52322 0.13872 0.12209 -0.033352 0.73141 -0.060483 0.72807 -0.10851 0.32193 0.38621 0.45084 0.14329 0.22719 0.092764 -0.29365 0.16641 -0.28661 0.073616 0.066387 0.090371 -0.34785 0.38701 0.08468 0.077097 -0.38351 0.055653 -0.13971 0.51535 0.07806 -0.2654 0.055063 0.77227 0.61264 -0.025549 0.17992 0.50357".split(" ").map(_.toDouble))
  def cisplatinr = Vectors.dense("0.0056261 -0.31511 -0.39438 -0.36309 -0.19055 0.35286 0.017978 -0.59579 0.24075 0.11423 -0.36981 0.46617 0.25196 -0.27236 0.52166 0.55823 -0.25057 -0.060522 -0.080976 -0.38888 0.20812 0.0010263 -0.27604 0.57077 -0.35726 -0.55653 0.30835 -0.24301 0.093634 0.20305 0.0083214 -0.33746 0.025527 0.072227 -0.61972 0.14452 0.4271 -0.22506 -0.042149 0.58168 0.04261 0.31256 -0.33048 -0.15001 0.04061 -0.048414 -0.46628 0.26593 -0.31102 -0.2222 -0.12433 0.0078262 0.016237 -0.56727 0.071413 -0.076783 -0.17198 -0.82845 -0.44717 -0.64179 0.33431 -0.21086 -0.59662 0.51296 0.55362 0.21322 0.27536 -0.28494 0.61611 -0.063917 0.50173 0.31905 0.18122 0.30639 0.66296 0.14799 0.33788 -0.15714 -0.091234 0.35837 -0.24941 -0.14231 0.20942 0.22285 -0.48101 0.27009 0.11855 0.62946 -0.49055 -0.12313 -0.14007 0.87011 -0.14201 -0.47806 -0.58065 0.89781 0.42426 0.37526 0.01462 0.157".split(" ").map(_.toDouble))
  def chemotherapy = Vectors.dense("-0.40138 -0.35458 -0.19108 -0.28267 -0.36412 0.44622 -0.39533 -0.35204 0.28861 0.0087522 -0.21347 0.72168 0.27373 -0.1197 0.4069 0.63505 -0.1399 0.019339 -0.053347 -0.51269 0.26738 0.58453 -0.69341 0.94094 -0.24685 -0.80088 0.05746 0.13687 0.29246 0.36842 0.023651 -0.33279 -0.093318 0.0072907 -0.56683 0.29205 0.43506 -0.11432 -0.15621 0.13481 0.47786 0.57783 -0.54481 -0.15923 -0.30893 -0.083424 -0.21978 -0.036366 -0.20223 -0.20625 -0.060658 -0.49146 0.33334 -0.42078 -0.16701 -0.12545 -0.073621 -0.72139 -0.049409 -0.4613 0.10566 -0.22161 -0.27067 0.29593 0.72632 -0.083901 0.5587 -0.16026 0.68779 -0.20059 0.49255 0.090622 0.26082 0.19988 0.62459 0.29285 0.29628 0.3455 -0.21697 0.21144 -0.65872 0.25805 0.40361 0.31471 -0.31048 0.22971 0.0028081 0.47222 -0.48383 -0.69284 0.15022 0.74904 0.26434 -0.25594 -0.22289 0.70345 0.27468 0.16403 0.22516 0.38528".split(" ").map(_.toDouble))
   def inflammatory = Vectors.dense(Array(0.059048,-0.055116,0.14444,0.16264,-0.71312,-0.14882,0.25088,0.14861,-0.36569,-0.4918,0.37473,0.49631,-0.19203,-0.36181,0.2217,-0.035858,0.22444,0.25472,-0.43474,-0.083547,0.32337,0.31338,-0.1086,0.5428,-0.17338,-0.57984,-0.14396,-0.1663,-0.027897,-0.1404,0.010253,-0.10886,-0.097213,0.10058,0.3677,-0.012598,-0.0061218,0.31472,0.54512,-0.021652,-0.29644,0.31242,-0.89989,0.11805,-0.23925,0.38698,0.017404,-0.041265,-0.043963,0.15958,-0.12347,-0.76676,-0.42445,0.46825,-0.79679,0.51951,-0.81393,-0.29608,-0.02027,-0.2683,0.22848,-0.32381,0.28776,0.31566,-0.49732,0.2826,0.2933,-0.027445,0.090628,-0.34678,0.16884,-0.1591,0.5442,0.81595,0.20019,-0.38197,0.25188,0.097923,-0.061942,0.11296,0.095348,0.5351,0.17203,0.56852,-0.61711,0.16035,0.041867,-0.085551,-0.51837,0.3851,-0.36328,0.014879,0.12666,-0.23314,0.28532,0.60282,0.13237,-0.17377,-0.3862,0.4245))
  def relapsed = Vectors.dense(Array(0.032012,-0.29727,-0.093581,-0.072434,-0.71744,0.61539,-0.025934,-0.07933,0.28234,-0.2977,-0.43421,0.9403,0.41332,0.38359,-0.082754,0.09775,-0.50303,0.066657,0.35169,-0.20913,0.85761,0.59981,-0.86262,0.57806,-0.33227,-0.88101,-0.51755,0.10189,-0.16329,0.39831,-0.10008,-0.53013,-0.46608,0.054838,-0.35128,-0.11867,0.18625,0.066971,0.018146,-0.12984,0.38257,0.62778,-0.54708,0.092331,-0.28226,0.22543,-0.17066,0.20254,0.55527,-0.37559,0.18821,-0.68254,0.40362,-0.22964,-0.45303,-0.11468,0.14386,-0.36396,-0.36342,-0.74261,0.024743,0.15742,-0.48637,0.023555,0.86069,0.12811,0.66313,-0.19128,0.97943,0.23113,0.33901,0.066678,0.11919,0.25068,0.47519,0.19054,0.30221,0.38001,-0.52976,0.3098,-0.21165,0.043455,0.34143,-0.0089013,-0.23076,0.0027604,0.44381,0.37084,-0.14765,-0.79578,-0.43465,0.62688,0.71689,-0.62116,-0.3719,-0.10785,0.52501,0.43743,-0.058035,-0.29926))
  def nodular = Vectors.dense(Array(0.31236,-0.14648,-0.15543,0.22038,-0.84781,0.22237,-0.20116,-0.27438,-0.31098,-0.62749,-0.030149,0.21483,0.26364,0.0050454,0.040542,0.21379,0.56688,0.25444,0.18593,0.15725,0.45089,-0.17905,-0.52077,0.58774,-0.15053,-0.30188,-0.10551,0.22428,-0.5761,0.34238,0.071292,-0.072885,-0.18651,-0.047791,-0.38382,-0.019603,0.0454,0.95991,0.7513,-0.066748,0.058133,-0.0051471,-0.66106,0.0066003,0.1787,-0.028035,-0.32745,0.51631,0.58342,0.44578,-0.57896,-0.77657,0.74693,-0.30011,-0.34706,0.022023,-0.044064,-0.22358,0.57739,-0.033941,-0.25032,-0.13025,-0.099475,0.3189,0.30617,0.20734,0.51698,0.79095,0.81281,-0.35121,0.17494,-0.16151,0.086646,0.20314,0.34401,-0.27644,0.13495,0.18222,0.24254,0.33077,0.91788,0.63372,0.60088,0.40868,0.057022,0.25226,-0.4646,0.14204,-0.25008,0.24568,0.057391,-0.21864,0.57523,-0.24528,-0.68093,-0.35378,0.85206,-0.26991,-0.24552,-0.21342))
  def moreover = Vectors.dense(Array(0.23443,-0.030347,-0.42365,-0.31962,-0.29385,-0.027722,0.3337,-0.0079772,-0.25371,0.10978,0.042377,0.16685,0.090803,-0.12989,-0.025221,-0.27281,-0.11641,-0.082616,0.10494,0.18207,-0.021376,0.15749,0.030339,0.0056221,-0.25897,0.084317,0.15497,-0.39828,0.062747,0.22469,-0.053382,0.097174,0.11004,0.35229,-0.032599,0.097072,-0.051639,0.044646,0.0053135,0.3084,-0.35711,0.31578,-0.18938,-0.076192,-4.2049E-4,0.012294,-0.31175,0.19365,-0.27194,0.2164,-0.20542,-0.024192,-0.072746,0.18436,-0.35857,-0.25707,-0.061194,-0.26876,0.18076,-0.35555,-0.073191,-0.30762,-0.0059636,0.21091,-0.1758,-0.1114,0.25106,-0.043156,0.51672,-0.0066719,0.066001,0.091877,0.21787,0.0032938,0.064485,-0.095223,0.29545,-0.096468,-0.23222,-0.051347,-0.13916,0.085232,-0.27491,0.12445,-0.14645,0.035771,0.22306,0.12535,-0.21414,0.14219,0.13196,0.15142,0.083318,-0.27729,-0.020301,0.26245,-0.04632,-0.20903,-0.018789,0.058133))
  def sfor = Vectors.dense(Array(0.35613,0.067493,-0.26774,-0.20661,-0.025327,0.33377,-0.17266,-0.14238,0.053813,0.029856,-0.21017,-0.14961,0.15162,-0.083554,-0.13311,0.073844,-0.28419,-0.02152,0.034731,-0.21415,-0.1195,0.088071,-0.24663,0.13876,-0.015406,-0.67515,-0.15584,-0.07992,0.14193,-0.053735,-0.082693,-0.068485,-0.10714,-0.218,0.22371,-0.07633,-0.20072,-0.1175,0.0023056,-0.028545,0.15969,0.044314,-0.2211,0.095321,-0.058075,0.23706,-0.064218,0.16918,-0.082886,0.27057,0.13574,0.042304,-0.10526,0.16387,-0.10595,-0.12873,-0.18753,-0.16395,0.19539,-0.31656,-0.11647,-0.28841,0.22298,0.32972,0.11523,-0.029673,-0.065184,-0.16141,0.33164,-0.33413,0.29032,0.28659,0.075722,0.093172,0.14248,-0.15374,0.15331,-0.061602,-0.052837,-0.037472,0.057553,0.1111,-0.2008,0.11877,-0.06728,-0.13207,0.19609,0.15104,-0.13472,0.11799,-0.16847,-0.066564,0.27933,-0.21846,0.21017,-0.012751,0.18425,-0.31736,0.056622,-0.11855))
  def despite = Vectors.dense(Array(0.1778,-0.37614,0.022415,0.021768,-0.63566,-0.095956,0.21464,-0.17528,-0.0079511,-0.22001,-0.15477,0.18836,0.5168,-0.23751,-0.24536,0.26819,-0.23927,-0.037705,0.22327,-0.4491,0.19609,0.32203,-0.28219,0.079341,0.06712,-0.0070039,-0.22668,-0.20116,-0.07182,0.19924,0.020294,-0.10148,-0.28585,0.21413,-0.1348,0.17477,0.08476,0.013005,0.062295,-0.051677,0.032396,0.28021,-0.16985,-0.44824,-0.18052,0.29671,-0.29389,0.025742,-0.35297,0.044834,-0.025082,-0.33769,-0.23283,-0.09244,-0.16976,-0.1559,0.43097,-0.11633,0.35448,-0.14994,-0.13962,-0.29256,0.14049,-0.18604,-0.14685,-0.3536,-0.26706,-0.069166,0.62028,-0.0080156,0.42242,0.28949,0.11122,0.10649,-0.05442,0.21511,0.026803,-0.11701,-0.14114,-0.22002,-0.016714,0.14284,-0.31767,-0.035663,-0.28373,-0.11909,0.099927,0.050139,-0.22139,0.18563,-0.021418,0.23368,0.50672,0.32469,-0.15977,-0.17096,0.084088,-0.0046445,-0.063802,0.21142))
  def further = Vectors.dense(Array(0.14183,-0.1367,-0.016633,-0.45741,-0.13104,0.093139,-0.14153,-0.35968,-0.26288,-0.026839,-0.044798,0.084372,0.098471,-0.3255,-0.12377,-0.2501,-0.20172,-0.008002,0.15961,0.084756,0.058927,0.29959,-0.09635,-0.041557,-0.36589,-0.23875,-0.0033489,-0.40358,0.36635,0.13058,-0.066515,0.082561,-0.048896,0.071003,0.022004,-0.11882,-0.19178,0.1906,-0.34083,0.16727,-0.29532,0.29142,-0.42539,-0.12065,0.15943,-0.23403,-0.43077,0.23732,-0.34387,-0.0025854,-0.051961,-0.039868,-0.088814,0.084298,-0.085652,0.065807,-0.25926,-0.16903,-0.29426,-0.025474,-0.22852,-0.35892,0.13864,0.43762,0.1178,-0.24154,0.13901,-0.23857,0.37327,-0.35455,0.42119,0.052444,0.14661,0.027272,-0.2614,-0.23383,0.26279,-0.054337,0.017223,-0.24117,-0.10267,0.047919,-0.06265,-0.085189,-0.62635,-3.4067E-4,-0.011597,0.22051,-0.41721,0.1348,-0.020146,-0.002411,0.37264,-0.67617,0.094036,-0.15191,-0.1413,-0.39592,0.21422,0.1357))
  def people = Vectors.dense(Array(0.36921,-0.42719,-0.050056,0.46488,0.21248,0.090249,0.041862,0.13101,-0.0046005,0.008557,-0.2007,0.29253,0.075992,-0.28972,-0.14703,0.14452,0.024347,-0.40719,0.40978,-0.85132,0.19314,0.29234,-0.74862,0.34393,-0.063707,-0.29676,0.044435,-0.78445,-0.34982,-0.099006,0.082011,0.54578,0.22265,-0.34214,0.18044,0.042785,-0.25352,0.39857,0.6011,-0.741,0.55645,0.42786,-0.15678,0.18318,-0.18615,-0.44857,-0.13761,0.21381,0.60303,-0.033889,-0.37146,-0.23983,-0.29594,0.024807,-0.51382,-0.091346,-0.056409,-0.39392,0.15695,-0.2399,-0.021322,-0.56837,-0.6215,-0.27705,0.10852,-0.011227,-0.29164,-0.12763,0.6343,-0.2898,0.48022,-0.092053,0.14995,-0.26678,-0.096462,0.30153,0.20974,-0.69386,-0.1755,0.20797,0.034896,0.76663,0.33845,0.14984,-0.75788,-0.38424,0.55159,-0.69519,-0.28494,-0.16904,0.2509,-5.1182E-4,0.37918,-0.29457,0.073433,0.2261,-0.084849,-0.010579,0.094931,-0.13231))
  def any = Vectors.dense(Array(0.43882,0.30683,0.23206,-0.037667,-0.11073,-0.11904,-0.16745,-0.25629,0.013464,-0.0012713,0.1866,-0.033464,0.27248,-0.10998,-0.046235,-3.2348E-4,-0.17774,0.30261,-0.14486,-0.0055949,0.065766,0.3905,-0.26718,0.46234,-0.015803,-0.043941,-0.22835,-0.19036,0.38112,-0.044797,-0.22637,-0.041648,-0.014492,-0.077808,-0.038036,0.26642,-0.11452,-0.15361,0.15214,0.074734,-0.0044549,0.13034,-0.030994,-0.05777,-0.077568,-0.34226,-0.13501,0.1994,-0.14465,0.19098,-0.2934,-0.16223,-0.30213,-0.086315,-0.35447,-0.09847,-0.27248,-0.53604,0.084887,-0.2574,0.022786,-0.18249,0.10526,0.17859,-0.084034,0.070663,0.045939,-0.16376,0.51256,-0.060554,-0.084888,0.11808,0.58443,-0.068284,-0.29198,-0.098451,0.18624,-0.093102,0.11149,-0.19679,-0.16827,0.43161,-0.072924,0.16064,-0.086531,0.2814,0.1645,0.073944,-0.071061,0.11146,0.18098,-0.097577,0.21841,-0.34322,-0.10082,-0.28593,0.38278,-8.6868E-4,0.049476,-0.32654))
  def cox = Vectors.dense(Array(0.24693,-0.43005,0.24416,-0.40576,-0.56764,-0.2535,-0.017505,-0.021092,-0.87916,-0.20553,-0.032555,-0.23311,-0.096358,-0.11618,0.29213,0.10719,-0.36375,0.5667,-0.31448,0.59537,0.16378,-0.18775,-0.29852,0.27878,-0.55391,-0.72908,-0.55514,-0.34006,-0.10435,-0.43656,-0.38054,-0.50315,0.021752,-0.18214,0.14151,-0.018669,0.045155,0.60881,0.099863,0.91771,-0.28403,0.64438,-0.087268,0.43739,-0.4253,-0.26381,0.20137,0.077099,-0.5071,0.57345,-0.48127,-0.27443,-0.57483,0.45441,0.10061,-0.29313,-0.46407,-0.59675,0.55189,-0.74866,-0.073544,0.37973,0.12399,0.72022,-0.031972,0.19442,0.73887,-0.22531,0.075158,-0.58769,0.1472,0.33097,0.055657,0.081794,0.19693,-0.93541,0.95051,0.11576,-0.052785,0.16002,-0.22132,0.015263,-0.26105,-0.35265,-0.38628,-0.059254,0.65923,-0.22478,-0.44487,0.31284,0.081191,0.31394,0.25295,-0.53538,0.14064,0.79954,0.077815,-0.30134,0.27265,0.15704))
  def years = Vectors.dense(Array(0.17777,-0.72421,-0.32431,0.34208,-0.13209,0.16337,-0.59923,-0.18643,-0.17475,-0.32705,-0.13505,-0.1527,0.12855,0.04975,-0.22269,0.22064,-0.21112,-0.08253,0.15928,-0.36225,0.3607,0.23301,-0.22692,0.07453,-0.3127,-0.57478,-0.50277,-0.26817,-0.43183,0.19962,0.47254,0.13528,0.26221,-0.089055,0.13484,-0.16595,0.0076389,0.28253,-0.022012,-0.3644,0.89304,0.36181,-0.095135,-0.082989,-0.49406,0.064245,-0.10522,0.23071,0.44066,-0.16651,-0.18562,-0.10238,0.090284,-0.023458,-0.42073,-0.33097,-0.32237,-0.42795,0.36314,-0.30701,-0.072379,-0.24246,-0.24896,-0.25113,0.1551,0.12888,0.098936,-0.57113,0.12433,-0.33883,0.48641,0.14743,-0.20004,-0.19572,0.32136,-0.18703,0.26316,-0.23711,-0.34592,-0.21697,0.032065,0.36153,0.034125,0.13936,-0.19512,-0.067007,0.44113,0.21891,-0.12739,0.11429,-0.38368,-0.18138,0.70501,-0.15047,-0.57293,-0.34694,-0.18856,0.36778,-0.018203,-0.38949))
  def young = Vectors.dense(Array(0.24817,-0.15538,-0.48146,0.032097,-0.08351,0.21329,0.012484,-0.056452,-0.067285,0.011472,-0.45717,0.2785,0.077187,-0.4022,-0.42966,-0.08512,-0.20494,0.0015468,-0.11366,-0.26155,0.32602,-0.31265,0.040278,0.17555,-0.20696,-0.38323,-0.23714,-0.38959,-0.48625,-0.14352,0.19137,-0.029156,-0.065022,0.15755,0.34051,0.18527,-0.36622,0.1195,0.4675,-0.41356,0.47833,0.4993,-0.076181,0.35239,-0.15734,-0.15368,-0.092661,0.046029,0.84909,0.097699,-0.028429,-0.3023,-0.035702,-0.056438,-0.38916,-0.49578,0.26928,-0.29715,-0.079456,-0.31301,-0.28622,-0.54055,0.026469,0.14166,-0.18485,-0.078672,-0.033307,-0.265,0.15966,-0.36997,0.45167,-0.053944,-0.13516,0.01519,-0.084995,-0.30151,0.034618,-0.17372,-0.1614,-0.2084,-0.07402,0.39693,0.43386,0.28759,-0.48024,-0.22324,-0.054797,0.031538,-0.024693,0.26065,0.072092,-0.16401,0.1704,-0.16437,-0.20813,0.050101,0.064069,0.41745,0.25174,-0.64585))
  def sthis = Vectors.dense(Array(0.25116,-0.041767,-0.3409,-0.38874,-0.095589,0.23383,0.0098166,-0.43673,0.22938,-0.14455,0.070084,0.407,0.067735,-0.16582,-0.012746,-0.058594,8.8297E-4,-0.15385,0.087248,-0.1734,0.10222,0.16953,0.0045393,0.1282,-0.33843,-0.15899,0.076524,-0.1342,0.1273,0.030234,-0.029683,0.078692,-0.039858,0.17892,0.090193,0.15577,0.026394,0.28199,0.11413,-0.033671,-0.53024,0.45673,-0.26613,0.013771,0.13952,-0.32317,-0.4109,-0.050058,-0.30398,0.30938,-0.26855,-0.21366,0.05455,0.41591,-0.15728,-0.052471,-0.24579,-0.41891,0.10864,-0.047314,-0.36174,-0.19699,-0.11195,0.23295,0.028746,-0.27712,-0.41022,-0.47677,0.25972,-0.41602,0.32349,-0.15534,0.36006,-0.13035,-0.047111,-0.36549,0.27692,-0.14949,-0.16089,-0.39115,-0.21097,-0.057349,-0.059111,0.12442,-0.41815,0.084738,0.27274,-0.045678,-0.20155,0.010139,-0.0042367,-0.16235,-0.079771,-0.47914,-0.055305,-0.14036,0.3046,-0.12041,0.15414,-0.35699))
  def hl = Vectors.dense(Array(0.21524,0.2658,-0.26065,0.033178,-0.1395,-0.12675,0.12286,-0.1127,0.15633,0.3028,-0.30504,0.60343,0.050717,-0.553,0.04189,0.24003,-0.010012,0.13337,0.76865,0.066772,0.061532,0.17703,0.12481,0.33219,-0.23202,-0.26408,-0.17789,-0.32057,-0.14281,0.21777,-0.16561,-0.39368,-0.32054,-0.25854,-0.10608,-0.18166,0.10066,-0.093305,0.16527,0.26985,-0.16297,0.83069,-0.47056,0.32723,0.037276,-0.29038,-0.21384,0.64047,0.035147,0.087485,0.10711,0.18102,0.55721,-0.26724,-0.039232,-0.52853,-0.26287,-0.14522,-0.49137,-0.9502,0.13461,-0.20324,0.07517,0.1282,-0.35018,0.1262,0.14469,-0.23987,0.80848,0.23087,0.35489,-0.27731,-0.43804,0.29264,0.34871,-0.18361,0.059454,-0.02217,0.09702,0.62516,-0.13493,-0.36376,0.17643,0.53816,-0.080007,0.63001,0.096491,-0.23091,-0.38772,0.060044,-0.55517,0.050397,0.13219,-0.41977,0.012882,0.43873,0.033361,0.37802,0.11613,-0.12848))
  def in = Vectors.dense(Array(0.41132,0.13434,-0.24188,-0.14787,-0.066117,0.049959,0.05198,-0.082609,0.023435,0.044354,-0.40567,0.03362,0.091334,0.018492,-0.13268,-0.07231,-0.11065,-0.11712,-0.11378,-0.2844,0.060909,0.02709,0.20634,0.063242,-0.10745,-0.34219,-0.089213,-0.25476,0.036328,0.052881,-0.086773,0.070554,-0.1829,0.019459,0.2403,0.086587,-0.081499,0.10359,0.29166,0.15598,0.14164,0.11271,-0.27246,0.016328,-0.014342,-0.0041862,-0.21106,0.24949,-0.015803,0.14888,-0.080645,-0.1786,0.0061124,0.20532,-0.2232,-0.0663,0.0023727,-0.26389,0.086354,-0.36461,-0.10412,-0.14612,-0.10054,0.064614,-0.13137,-0.010253,0.030127,-0.084582,0.2189,-0.19225,0.35004,-0.045785,0.038667,0.056754,0.24836,-0.24754,0.17741,0.077385,-0.033535,-0.13293,-0.12762,0.11964,0.036423,0.17971,-0.29599,-0.1296,-0.10128,0.14789,-0.24636,0.2277,-0.059763,-0.15497,0.097193,0.1015,-0.14897,0.18843,0.20884,-0.10224,0.0060748,-0.15582))
  def have = Vectors.dense(Array(0.059089,-0.029938,-0.13579,-0.072924,-0.096695,0.075799,-0.098979,-0.056874,-0.0065101,0.034501,-0.25323,0.1073,0.22629,-0.27671,-0.1001,-0.1212,-0.32299,0.11123,0.14506,-0.012077,0.01114,0.39864,0.24427,0.21918,-0.25514,-0.13428,-0.17661,-0.23051,-0.17947,0.32634,0.11958,0.13461,-0.10511,0.077095,0.22617,0.053976,0.057834,-0.11147,0.065731,0.21995,0.026773,0.28282,-0.43993,-0.23392,-0.13328,0.034343,-0.12533,0.079159,-0.024577,0.091733,-0.2338,-0.22884,-0.091255,0.36142,-0.30886,-0.56,-0.4666,0.30855,0.40456,-0.37709,-0.19943,-0.37627,-0.17739,0.046798,-0.12268,0.062148,-0.20102,-0.18406,0.21582,-0.12241,0.2069,0.020065,0.052445,0.01327,-0.24686,0.084881,0.26657,-0.055626,-0.064369,-0.29041,-0.23091,0.46487,-0.51885,-0.27704,-0.42725,-0.0089194,-0.11586,0.13252,-0.38303,0.11332,0.0023318,0.20511,0.43591,-0.16936,-0.13167,-0.058641,0.28273,0.033272,-0.1877,0.11006))
  def lipopolysaccharide = Vectors.dense(Array(-0.16726,0.18029,-0.3101,-0.079465,-0.49999,-0.070878,0.18888,0.3616,-0.50158,-0.24387,-0.47368,0.61406,-0.4369,-0.43419,0.44466,-0.073011,0.18212,-0.083312,-0.23129,0.45396,0.096804,0.49435,-0.02893,0.077681,-0.29855,-0.12657,-0.5962,-0.52918,0.83138,-0.64899,-0.24778,-0.026953,0.070381,0.066552,0.56805,-0.0844,0.094179,0.21442,0.30976,0.59902,-0.53268,0.69859,-0.65164,0.078779,-0.21913,-0.011694,-0.46957,-0.12072,-0.38988,0.085702,-0.091347,-0.08809,-0.55585,-0.33568,-0.69359,0.10137,0.062313,-0.54858,0.31615,-0.62223,0.50649,0.048695,-0.020322,0.066336,-0.089255,0.30147,-0.061748,0.46591,-0.12049,-1.0171,0.33966,0.10362,0.23742,1.0673,0.18823,-0.76291,0.11609,0.15261,0.032021,0.2396,-0.12551,0.27519,-0.2136,1.0911,-0.56888,0.41447,-0.18811,0.22976,-0.24734,0.41292,-0.2131,0.40939,-0.01839,-0.28636,-0.14785,0.19636,0.092791,0.026302,-0.46176,0.11599))
  def are = Vectors.dense(Array(0.17607,0.0033535,-0.17015,-0.015317,-0.044902,0.047295,0.072121,-0.16038,-0.0079965,0.085165,-0.32978,-0.048624,0.24729,-0.27088,-0.17106,-0.075485,-0.2115,0.077898,0.25114,-0.23481,0.12387,0.12036,0.10558,0.23344,-0.068152,-0.28733,-0.012966,-0.082895,-0.1818,0.24741,-0.063038,-0.14167,0.06211,-0.1516,0.43354,0.30564,-0.18638,-0.032211,0.11398,0.36136,0.021388,-0.17811,-0.32249,-0.07909,-0.03016,0.1486,-0.12548,0.034563,-0.02577,0.084892,0.074287,-0.47744,-0.043365,0.42387,-0.18733,-0.26464,-0.35469,0.32539,0.28444,-0.5674,-0.079668,-0.26168,0.12338,-0.05134,0.065041,-0.14908,-0.20222,-0.046916,0.35906,-0.35825,0.090313,0.1978,0.07529,0.28949,-0.16777,0.14481,0.20491,-0.09931,0.088098,-0.22076,-0.30325,0.31942,-0.15367,-0.090194,-0.36933,0.019556,-0.039683,-0.061554,-0.39343,0.37919,0.25647,0.11135,0.16248,-0.39597,0.065033,0.098519,0.40087,0.081637,-0.025085,0.081957))
  def is = Vectors.dense(Array(0.086161,0.053297,-0.47055,0.046542,-0.16549,0.1792,0.08987,-0.18469,0.037595,0.22323,-0.1381,-0.0072779,0.25273,-0.28147,-0.037394,0.27218,-0.087563,-0.061921,0.16547,-0.19029,-0.032882,0.14951,-0.28053,0.011767,-0.040894,-0.23357,0.094274,-0.11669,-0.072144,0.020329,-0.054257,-0.28852,-0.0575,0.095033,0.16125,0.42481,0.013875,0.18675,0.29562,0.096969,-0.24788,0.3898,-0.11679,-0.11018,0.3176,0.23923,-0.21482,0.024129,-0.010825,0.39565,0.03667,-0.27892,-0.023541,0.64015,-0.24078,0.047305,-0.096672,0.034397,0.23352,-0.35647,-0.18804,-0.017748,0.024144,-0.12879,0.029369,-0.40903,-0.362,-0.22534,0.28643,-0.24344,0.21344,0.1586,0.17047,-0.044524,-0.21598,-0.26487,0.15974,0.052604,0.16127,-0.16239,-0.13883,0.25507,-0.1503,0.3697,-0.15719,0.097811,0.18403,0.10706,-0.44125,-0.053471,-0.077617,0.035525,8.9474E-4,-0.15695,-0.073185,0.070103,0.44486,-0.12978,0.092365,-0.11636))
  def prognosis = Vectors.dense(Array(-0.02323,-0.54595,-0.65501,0.403,-0.11659,0.14728,-0.22826,-0.22528,-0.10294,-0.053925,-0.27037,0.40478,0.11536,0.13822,0.006387,-0.016818,0.011057,0.42097,0.69107,-0.032211,0.58176,0.3264,-0.40968,0.64542,-0.088081,-0.46601,0.059034,0.057368,-0.51842,0.098604,-0.07862,-0.7732,-0.020804,0.086705,-0.47918,0.17744,-0.35428,0.52913,-0.35774,-0.47402,0.19832,0.58012,-0.66187,-0.023267,-0.17777,0.12686,0.13659,0.14881,-0.4363,0.30587,-0.44853,-0.86564,-0.31842,0.077659,-0.43274,0.056936,-0.049854,-0.53734,-0.41654,-0.68874,-0.4813,-0.24719,-0.13332,0.1397,0.2776,0.28483,0.48261,-0.23737,0.43846,0.13521,1.019,0.27043,-0.18197,-0.19687,-0.21463,0.084226,0.35929,0.013729,0.30082,0.35804,-0.59263,0.39415,0.15663,0.12006,-0.24126,-0.16388,0.16863,0.24089,-0.21953,-0.26625,-0.012225,0.36453,0.184,-0.032804,0.22965,0.28724,0.64563,-0.41295,0.054357,0.17719))
  def stem = Vectors.dense(Array(0.047303,-0.27793,-0.49703,-0.76379,-0.031592,-0.097127,0.18432,-0.14039,0.26561,-0.70634,-0.52654,0.10704,0.4535,-0.65316,-0.020194,-0.50699,0.18389,0.049115,-0.08134,-0.34604,0.64116,0.49684,0.094523,0.55223,-0.26637,-0.68267,0.14248,-0.42477,0.37081,-0.062883,-0.49035,-0.43631,-0.07026,-0.3067,0.016464,0.72088,-0.10184,0.13177,0.15041,0.24082,0.16364,0.26662,-0.50909,0.19308,-0.26727,-0.054936,-0.15063,0.044178,0.48582,-0.21927,0.28451,0.25716,0.05294,0.34776,-0.51269,-0.90197,0.052309,-0.061084,-0.26093,-0.5571,-0.22537,-0.44512,0.20397,0.4798,0.54684,-0.097917,-0.30147,-0.53532,0.50682,0.2146,0.18914,-0.3307,0.46332,0.32507,0.27137,-0.14492,-0.03448,0.64191,-0.055959,0.26343,0.46532,0.48915,-0.29441,0.65112,-0.60625,-0.028592,-0.55616,0.5072,-0.10669,-0.26704,-0.35903,0.21018,0.33221,0.28285,-0.021808,0.088698,0.16027,0.0088822,0.097451,0.23362))
  def susing = Vectors.dense(Array(0.24637,0.31889,-0.35823,-0.39521,-0.050074,0.26474,-0.012408,-0.11401,0.17676,-0.30373,-0.40149,-0.30079,-0.069988,-0.06719,-0.37149,-0.18021,0.0023371,0.072088,-0.088467,0.080053,-0.21174,-0.19526,-0.22511,-0.17169,-0.17422,-0.56668,-0.054977,-0.0091827,-0.053311,-0.18878,0.033835,0.49768,0.20742,-0.4078,-0.033081,-0.012457,0.039549,-0.18137,0.13026,0.67692,0.11276,0.43896,-0.11402,0.1515,-0.097765,0.31524,-0.0614,0.40593,0.061491,0.35388,0.09575,0.25928,0.20429,0.31237,-0.20008,-0.27395,-0.382,-0.46145,0.32898,-0.47559,-0.046273,-0.16648,0.20424,0.13004,-0.078628,0.22741,0.0070614,0.064277,0.14329,-0.28745,0.34041,-0.074051,9.1891E-7,0.27603,0.15224,-0.020788,0.44419,-0.011752,-0.38943,0.053481,-0.19037,0.23682,-0.44413,-0.079983,-0.074743,0.1309,0.062262,-0.10611,-0.40553,-0.062802,-0.30665,0.067955,-0.08091,-0.22822,0.37191,-0.11923,0.15756,-0.30952,0.19464,-0.38569))
  def encouraging = Vectors.dense(Array(0.21373,-0.30407,0.030752,-0.23044,-0.13204,0.51622,0.15728,-0.26503,0.35748,-0.40603,-0.062917,0.43022,-0.016127,-0.16887,0.078835,-0.34928,-0.61297,-0.44966,-3.3464E-4,-0.22407,0.28797,0.1611,-0.45002,0.2846,-0.45155,-0.20837,-0.41516,-0.29357,-0.26471,-0.036339,0.15606,0.066342,-0.39199,0.223,-0.089177,0.28645,-0.18087,0.014605,-0.35352,-0.52352,0.056951,0.52958,-0.35851,-0.26249,-0.2074,0.09262,0.096808,0.466,0.17619,0.12351,-0.15932,-0.57052,-0.1899,0.25876,0.016406,-0.43803,-0.18289,-0.12808,-0.13413,-0.043755,-0.15755,-0.49328,-0.016037,0.45174,0.52317,-0.53025,0.04763,-0.27875,0.30615,-0.051193,0.31072,-0.10565,-0.10443,-0.096288,0.020449,0.43124,-0.048636,-0.52599,-0.055288,-0.15981,-0.20258,0.29315,0.048219,-0.0032055,-0.38049,0.14621,0.28578,0.090889,-0.42652,0.16087,-0.064186,0.47002,0.52395,-0.032674,0.36877,0.046816,-0.035968,0.034997,0.0026968,0.20852))
  def research = Vectors.dense(Array(0.41135,-0.2971,-0.15792,-0.57249,-0.009868,0.34835,-0.4564,-0.46094,0.23811,0.083598,-0.093664,0.42494,0.2995,-0.52053,-0.16212,-0.25739,0.056511,-0.62686,-0.13733,-0.41402,0.011705,0.5787,0.1323,0.0073859,-0.26072,-0.42158,-0.42028,-0.29798,0.02354,-0.1375,0.26462,0.0071108,-0.055451,-0.28594,-0.23854,0.21124,-0.29851,0.12925,-0.3935,-0.056817,0.061962,0.40139,-0.26698,-0.10971,0.26786,-0.76605,-0.031827,-0.035364,0.1846,0.17003,-0.23301,-0.26271,-0.0098028,0.22435,-0.082705,-0.049376,-0.23957,-0.14804,0.096669,-0.17109,-0.33718,-0.39224,0.069307,0.020471,0.41704,-0.37925,0.047947,-0.28887,0.15923,-0.17644,0.43042,-0.23425,-0.033371,0.01185,-0.029389,-0.16201,0.16686,-0.37441,0.21841,-0.37187,0.069487,0.39269,-0.16368,-0.044625,-0.99409,-0.027035,0.32888,-0.17721,-0.6122,0.16658,-0.26769,-0.064344,0.44896,-0.0097054,0.14749,-0.26222,0.0083557,-0.23415,-0.28271,0.06761))
  def initial = Vectors.dense(Array(0.53322,0.013363,-0.16408,-0.23328,-0.10991,0.17168,-0.25607,-0.50214,0.023228,-0.31732,0.026806,0.17442,0.15436,5.4004E-4,0.060654,0.26627,-0.28039,-0.041675,0.21442,0.034378,0.21263,0.10087,-0.29143,0.13188,-0.51671,-0.31046,-0.11415,0.033431,0.08485,0.25969,-0.016431,-0.024088,0.025629,0.073557,0.035685,0.11633,-0.14711,-0.14373,0.084847,-0.027086,-0.07893,0.18303,-0.47572,0.011199,-0.12905,0.38584,-0.042239,-0.17194,-0.18961,0.13746,0.041951,-0.067291,-0.17697,-0.044948,-0.23348,-0.01708,-0.076141,-0.5188,-0.026106,-0.040808,0.10411,-0.13351,0.13963,-0.0030678,0.24934,-0.066004,0.13582,-0.13102,0.089551,-0.20482,0.39191,0.10651,0.29042,-0.05799,-0.097788,-0.11903,-0.070305,-0.037903,-0.28086,0.093525,0.083254,-0.0037093,0.32145,0.32187,0.059358,0.17417,-0.0049126,0.3709,-0.26906,-0.014503,-0.12103,-0.33918,0.36705,-0.23013,-0.062755,-0.2477,-0.148,-0.16345,0.26439,-0.23494))
  def explain = Vectors.dense(Array(-0.004615,-0.42018,0.098744,-0.013175,-0.17118,-0.18093,0.38821,-0.27953,-0.2079,0.16406,0.031764,0.42605,0.66151,-0.41206,-0.13958,-0.035227,-0.12707,-0.35806,-0.10165,-0.36665,0.30184,0.17697,-0.17508,0.25112,-0.083334,0.17541,-0.24532,-0.54248,-0.077551,0.12944,-0.29776,0.25233,0.11453,0.21639,-0.1104,0.027779,-0.061566,0.27161,0.089769,0.24109,-0.29098,0.1859,-0.55972,0.016339,0.15985,-0.25633,-0.28438,-0.4869,-0.1034,0.61674,-0.095944,-0.16922,-0.27958,0.37674,-0.046715,-0.47339,-0.29291,-0.28873,0.36959,-0.81212,-0.003559,-0.33153,-0.077106,0.1173,-0.21041,0.21696,-0.10472,-0.1039,0.26688,-0.47002,0.014692,0.0058936,0.014127,0.0023321,-0.26927,0.21157,-0.075928,-0.097294,0.25572,-0.4978,-0.018249,0.055732,0.047564,-0.24697,-0.056968,-0.16571,-0.27145,0.021127,-0.057679,-0.079153,0.085364,-0.024768,0.2439,-0.2371,0.082863,-0.052857,0.3898,0.04762,0.42145,0.22666))
  def solid = Vectors.dense(Array(0.42512,0.28853,-0.040318,-0.25794,-0.065867,0.57879,-0.099713,-0.12403,0.18018,-0.65891,-0.26739,0.75847,0.14038,-0.10451,-0.56534,0.038404,-0.48465,-0.039294,-0.11014,-0.17423,-0.0060596,-0.13636,0.085511,0.4069,-0.30423,-0.53699,0.67499,-0.066403,-0.093138,0.078605,0.22975,-0.44167,-0.19508,-0.18275,-0.17517,0.3604,-0.060199,-0.10084,0.050172,0.32744,-0.1067,0.036392,-0.40934,0.023729,-0.42047,0.31675,-0.29675,0.79945,0.065883,0.081158,0.34097,0.0127,-0.091484,0.50338,-0.3643,0.12723,-0.37501,-0.029752,0.40735,-0.40286,0.2616,0.001458,0.25877,0.24798,0.85502,0.15878,0.061214,0.50912,0.80825,0.021179,0.55719,0.030658,0.060755,-0.15333,0.13893,-0.26774,-0.089825,0.061187,0.052733,-0.54392,0.11373,-0.051626,0.33297,0.53646,-0.15769,0.60762,-0.37312,0.078076,-0.2406,-0.16409,0.12589,-0.12865,0.17774,-0.48968,0.10088,-0.41693,0.4541,-0.3518,-0.18409,0.037088))
  def female = Vectors.dense(Array(0.40379,-0.31622,-0.33584,0.15717,-0.13079,0.059931,-0.22614,-0.32395,-0.39239,0.17975,-0.44605,-0.084095,-0.051845,-0.25643,-0.57972,0.1794,0.30089,-0.26764,-0.15798,-0.078549,0.0024333,-0.15907,0.073218,0.12811,-0.093697,0.0029776,0.044596,-0.35223,-0.58659,-0.13297,0.19122,-0.23741,-0.025143,0.26677,0.21037,0.063466,-0.47415,-0.26937,0.74525,-0.16088,0.4151,0.25063,-0.07196,0.45452,-0.38276,-0.25357,-0.21735,0.027676,0.57676,-0.031782,-0.14568,-0.38668,0.11423,-0.28701,-0.36261,-0.47769,0.19858,-0.59143,-0.016871,-0.37841,-0.43701,-0.17893,0.13393,0.38919,-0.23761,0.24669,0.024292,-0.49725,-0.07993,-0.47736,0.12817,0.013316,0.054378,0.18471,0.55527,-0.39917,0.18334,0.066863,-0.64008,-0.58081,-0.02623,0.29947,0.14886,0.33863,-0.38722,-0.23746,0.085561,0.54198,-0.033674,0.10583,0.11898,0.13743,0.44091,-0.31349,-0.03704,-0.13114,0.26656,0.23804,0.01449,-0.62208))
  def survival = Vectors.dense(Array(-0.02421,-0.53288,-0.76677,0.074549,0.15201,0.10278,-0.18426,-0.27742,0.030211,-0.26279,-0.14056,0.029756,-0.10367,0.14423,0.081104,-0.23696,-0.2488,0.31344,0.041426,0.26433,0.45557,0.3092,-0.49462,0.71477,-0.40626,-0.43882,-0.1714,0.044351,-0.20722,-0.2926,-0.32153,-0.17073,-0.395,0.17031,-0.33232,0.32777,-0.3137,0.50383,0.17483,0.24125,0.47254,0.62894,-0.48376,-0.21775,-0.31395,-0.35339,0.24626,0.5045,-0.15644,4.3873E-4,-0.41523,-0.41192,-0.45019,-0.0035372,-0.37044,-0.49649,-0.086637,-0.41859,-0.059858,-0.71126,0.038135,0.031971,0.39548,-0.082487,0.41741,0.28984,0.41339,-0.51485,0.29333,-0.43491,0.42262,0.38983,0.13956,-0.48396,0.67393,-0.36702,0.50753,0.067145,-0.37471,0.41099,-0.93244,-0.35699,-0.099653,0.080881,-0.21296,-0.14273,0.17525,0.41938,0.20322,0.20791,-0.19871,0.048009,0.35168,0.11167,-0.15093,0.37153,0.41169,0.020528,0.22344,0.2869))
  def but = Vectors.dense(Array(0.25282,0.15952,-0.10471,0.065917,-0.26028,-0.23641,0.031456,-0.15224,-0.16537,0.17497,-0.15589,0.049062,0.34,-0.13272,-0.094078,-0.028595,-0.23126,0.15189,0.12849,0.026609,0.22987,0.058718,-0.28373,0.18702,0.048366,0.013453,-0.1767,-0.28271,0.0056451,0.12688,-0.22927,-0.17834,-0.065867,0.12458,0.079427,0.23559,-0.1273,-0.092352,0.353,0.1548,-0.11669,0.24993,-0.14717,-0.119,0.16122,-0.061723,-0.13021,0.056269,0.10573,0.06633,-0.090798,-0.13183,-0.21595,0.05116,-0.1891,-0.12655,0.042312,9.214E-4,0.17777,-0.49083,0.066741,-0.15511,-0.026678,-0.13815,-0.14685,-0.17115,0.07771,0.030026,0.41318,-0.1297,0.26256,0.14834,0.15974,0.11702,-0.077038,-0.14851,0.12652,-0.052629,0.082785,-0.1142,-0.22729,0.20939,-0.052851,0.13137,-0.22134,0.14114,0.15778,0.19466,-0.26915,0.21579,0.15645,0.087427,0.28121,0.02661,-0.21512,0.15616,0.18706,0.084092,-0.0028376,0.05745))
  def s11 = null.asInstanceOf[MLVector]
  def subtype = Vectors.dense(Array(0.26917,0.0069208,-0.22558,0.26131,0.041509,-0.39576,-0.20894,-0.10655,-0.30579,0.042034,-0.49501,0.37864,0.24449,-7.5164E-4,-0.33074,-0.044834,0.017546,0.44715,0.672,-0.12056,0.69095,0.35609,-0.18625,-0.20793,0.39127,-0.48621,-0.31615,0.10635,0.13227,0.30998,0.15506,-0.67525,0.29167,-0.1274,-0.06256,-0.21815,-0.51641,0.71874,0.43403,0.28052,-0.68613,0.56359,0.14466,0.46462,-0.13605,0.025362,-0.3366,-0.08575,-0.025189,0.71704,-0.3642,-0.19098,0.11097,-0.018057,-0.73067,-0.37005,0.32436,0.12976,0.36919,-0.2462,0.46243,-0.45149,0.071153,1.005,0.2889,0.31249,-0.049205,0.26657,0.31705,-0.40942,0.18011,0.010874,-0.015065,-0.089018,0.43304,-0.10348,0.13742,0.31077,0.18513,-0.035243,-0.36887,0.11746,0.55301,-0.02812,-0.36202,-0.32243,0.54753,0.19343,-0.4304,-0.55813,-0.13801,0.18381,0.49991,-0.22575,-0.06399,0.15617,0.63212,-0.36174,-0.36147,-0.31714))
  def role = Vectors.dense(Array(0.26182,-0.24349,-0.65067,-0.22961,0.023843,0.21138,0.17567,-0.33467,-0.45955,0.11222,0.071015,0.02011,0.082148,-0.30908,2.0188E-4,-0.14722,-0.019686,-0.54802,-0.44724,-0.17019,0.062098,0.6776,0.37944,0.010033,-0.1324,0.063471,-0.34358,-0.15873,0.16388,-0.025619,-0.29738,-0.48224,-0.41303,0.14417,0.12836,-0.16371,-0.16824,0.6017,0.20964,-0.029078,-0.11122,0.44359,-0.35059,-0.039301,0.11487,0.29781,-0.44282,-0.15842,0.21883,0.47165,-0.10079,-0.25549,-0.4211,0.46851,-0.1128,0.18491,-0.26767,-0.16759,-0.22566,-0.13416,-0.15066,-0.40489,0.36723,0.09369,0.18192,-0.34554,-0.26458,-0.17504,0.26149,-0.32281,0.21644,0.0055303,-0.52239,-0.056946,0.17928,0.073983,0.43414,-0.04168,0.14821,-0.095704,-0.093498,0.30107,-0.052394,0.30636,-0.039916,-0.19942,-0.27642,0.32941,-0.7143,0.1339,-0.13245,-0.053883,0.058231,-0.098836,0.3758,0.059974,0.90437,-0.19611,-0.11268,0.20407))
  def treatment = Vectors.dense(Array(0.4475,-0.31577,-0.20395,-0.084669,0.16745,0.43874,0.019175,-0.24843,0.055585,0.1445,-0.38696,0.33697,0.12721,0.13858,0.29026,0.17828,0.059929,0.18584,-0.083192,-0.071567,0.15282,0.76131,-0.79628,0.13421,-0.080918,-0.83162,0.12734,-0.098489,0.19645,0.15804,0.056597,-0.049329,-0.26353,0.078543,-0.17218,0.021722,-0.094755,0.042764,-0.11714,-0.080328,-0.020086,0.11441,-0.61573,0.027458,-0.09113,0.39988,0.1024,0.1316,0.28426,0.077466,0.22987,-0.25239,-0.085802,-0.33827,-0.3828,0.034472,0.064577,-0.363,0.0092318,-0.13821,0.082344,-0.059406,-0.22573,0.105,-0.10595,-0.25857,0.39984,-0.1829,0.36059,-0.3127,0.49405,-0.076914,0.13503,0.26416,0.042728,0.023034,0.059428,0.20151,-0.011464,-0.18006,-0.31559,0.24643,0.042493,0.23322,-0.25871,0.041983,0.51059,0.10884,-0.42243,0.11082,0.09312,-0.013146,0.2225,-0.19523,-0.077318,0.17319,0.2489,-0.053687,0.014071,-0.14424))
  def heavily = Vectors.dense(Array(0.32913,-0.030145,-0.51438,-0.12438,-0.31299,0.36974,-0.35541,-0.084273,0.066576,-0.49643,-0.3571,0.26718,0.021036,-0.2874,-0.21416,-0.13237,-0.40927,0.024171,0.57328,-0.29388,0.034834,0.17661,0.19405,-0.11087,-0.043182,-0.29726,0.32698,-0.27314,-0.35046,0.11379,-0.36672,-0.34594,0.089161,0.25428,0.37323,0.55767,0.12192,-0.1439,0.51512,0.54319,0.30454,0.20807,-0.1806,-0.49455,0.09737,-0.40029,0.24416,0.17667,0.2791,0.38429,-0.081887,-0.26988,0.022449,0.18806,-0.1708,0.013934,-0.0028445,0.20518,0.40456,-0.24627,-0.16428,-0.078715,0.055605,-0.055118,0.31525,-0.2556,-0.18396,0.41939,0.23627,-0.32299,0.44204,-0.21385,0.13139,0.43663,0.25404,0.38864,0.29656,0.15975,-0.26315,-0.11799,-0.46752,0.54365,0.11083,0.28109,-0.22107,0.47927,0.37081,-0.25151,-0.18702,0.019224,0.44096,0.22023,0.31826,0.11992,-0.13012,-0.047636,0.17413,0.011334,0.10986,0.018033))
  def event = Vectors.dense(Array(0.30029,0.11203,-0.43524,-0.10155,-0.015231,0.070355,-0.35526,-0.56823,0.011967,-0.019802,0.41663,-0.41247,0.15114,0.0097102,-0.22088,-0.086656,-0.15856,0.026802,0.21437,-0.40234,0.56735,0.28395,0.054453,0.066847,-0.21648,-0.31434,-0.29918,-0.073119,0.55564,-0.016048,0.11413,-0.09494,0.28567,-0.12655,0.3105,0.58909,0.52329,0.27099,0.264,-0.055114,0.13743,0.74517,-0.069979,0.162,-0.37993,0.16041,0.18451,0.048076,-0.22593,0.21444,0.089508,-0.73165,-0.58721,0.45009,-0.012165,-0.32043,0.20798,-0.54846,0.32367,-0.97716,0.11656,-0.14422,0.055768,0.0098838,0.23363,-0.019021,0.27307,-0.20485,-0.10292,-0.32052,-0.14287,-0.021477,0.16989,-0.39834,0.074047,0.22558,0.066268,-0.3616,-0.033358,0.54364,-0.15074,0.30705,-0.050253,0.39592,-0.27655,-0.13232,0.24608,0.26639,-0.13706,-0.1674,-0.30813,-0.27223,-0.0076167,-0.30275,-0.36919,0.1317,0.33983,-0.17683,0.37237,-0.24515))
  def dose = Vectors.dense(Array(0.059498,-0.69449,-0.1886,-0.014577,-0.080222,0.50639,-0.31883,-0.54853,-0.2145,0.17001,-0.12403,0.22932,0.051404,-0.27249,0.36412,0.3413,-0.37777,0.31513,-0.41441,-0.20841,0.014114,0.22591,-0.67485,0.24425,-0.40033,-0.21337,0.16487,-0.4644,0.24239,-0.18111,0.31513,0.016637,-0.096079,-0.25624,-0.15901,0.237,0.069185,-0.10286,0.075747,0.52665,-0.37977,-0.12444,-0.087695,0.14089,-0.013488,0.42477,-0.61725,0.34059,0.087074,0.087722,-0.044875,-0.24191,0.13467,-0.11349,-0.36697,0.052813,0.37157,-0.49704,0.02169,-0.3884,0.30434,0.19236,-0.16957,0.27762,0.10499,-0.4524,0.28848,0.142,0.46107,-0.84976,-0.088264,0.049313,0.79419,0.15845,0.5216,-0.43545,0.18796,-0.19447,-0.26846,0.5524,-0.38273,0.041858,-0.0021918,0.33615,-0.056852,-0.076327,-0.013354,0.34784,-0.38497,0.15125,-0.15104,0.48162,-0.086663,0.0079059,-0.064359,0.10538,-0.295,0.59134,-0.062223,-0.64612))
  def clinical = Vectors.dense(Array(0.28127,-0.078992,0.1136,-0.18748,-0.10984,0.33035,-0.33359,-0.60073,0.096827,-0.2772,0.099054,0.44115,0.06406,0.18335,-0.20248,-0.040794,0.494,-0.0091193,0.32799,-0.13324,0.19251,0.32473,-0.41406,0.36916,-0.24149,-0.5045,-0.16086,0.0018815,-0.0045243,0.21916,0.24024,0.10112,-0.059626,-0.22237,-0.17115,0.057398,-0.63382,-0.16031,-0.35626,-0.28804,0.096607,0.30797,-0.4712,-0.071404,-0.090074,0.15466,-0.5058,-0.0273,-0.31011,0.2343,-0.41112,-0.70916,-0.26509,0.13754,-0.44318,0.036154,-0.038554,-0.39811,-0.24108,-0.24686,-0.0090731,-0.32605,-0.20435,0.049493,0.065583,-0.078908,0.20289,-0.16134,0.31694,-0.18862,0.54752,0.044713,0.20051,0.11832,-0.03202,0.076974,0.080532,0.0078377,0.19134,0.013171,-0.11559,0.4052,4.3092E-6,-0.29273,-0.64278,0.069012,0.14024,-0.15487,-0.5406,0.18146,-0.37134,-0.028364,0.12431,0.088911,0.31023,-0.19307,0.19309,-0.16661,0.13164,-0.20575))
  def up = Vectors.dense(Array(0.36822,-0.090748,-0.14832,-0.14192,-0.28736,0.16368,0.10446,-0.34512,-0.1504,0.068684,-0.092502,-0.23715,0.082135,0.20108,-0.21883,-0.24504,-0.49422,0.19274,0.15945,0.21583,0.45839,-0.053199,-0.15712,-0.12416,-0.42924,-0.64937,-0.3491,-0.098985,-0.055125,-0.14789,-0.23866,-0.082692,-0.10648,0.096539,0.093009,-0.24345,0.11133,0.083676,-0.10789,-0.087503,-0.013855,0.27957,-0.47479,-0.037662,-0.44842,0.25276,-0.19732,0.47949,-0.2661,-0.46003,-0.086889,0.073122,0.25088,-0.13699,-0.40327,0.18702,-0.60515,-0.3838,0.16057,-0.28212,0.064935,-0.030667,0.11443,-0.38028,0.26946,-0.062282,0.0073345,-0.68853,0.3259,-0.34893,0.16474,0.22241,0.17933,0.059068,-0.074439,-0.19118,0.018689,-0.50618,-0.20291,-0.011998,-0.060311,0.30649,0.2978,0.38484,-0.13452,0.055903,0.25475,0.22502,-0.25087,0.48124,-0.12157,-0.16591,0.60334,-0.20106,-0.087446,-0.16149,-0.0083017,-0.010383,0.40171,-0.19062))
  def sustained = Vectors.dense(Array(0.65883,-0.078876,-0.039199,0.14579,-0.63327,0.11416,0.23504,-0.39711,0.18846,-0.26908,0.06342,0.28294,-0.24774,-0.32765,-0.21,0.058784,-0.53947,-0.16104,-0.15483,0.13502,0.65088,0.13491,-0.099109,3.3755E-4,-0.29462,-0.52989,-0.14891,-0.42202,0.28741,0.178,0.13592,0.18198,0.079466,0.28878,-0.19218,0.0421,0.36956,0.088041,0.22176,-0.15535,0.074587,0.42473,-0.34811,0.11668,-0.29196,0.3884,-0.19043,0.1994,-0.26299,0.099684,-0.1666,0.040326,-0.29069,-0.013868,-0.60249,-0.30681,0.61832,0.05597,-0.11153,-0.063998,0.077641,-0.16291,-0.016673,-0.16115,0.04438,-0.3574,0.24571,-0.062553,0.24814,0.040216,0.14808,0.15874,0.40298,0.29994,-0.13002,-0.089297,0.18879,-0.52305,-0.30347,0.10893,0.0041567,0.02733,0.15515,0.43229,-0.25403,-0.53033,0.18922,0.43865,0.015439,0.382,-0.24844,0.053393,0.1816,-0.51933,0.093969,0.24447,0.30578,0.25053,0.10458,-0.31727))
  def so = Vectors.dense(Array(0.13997,0.13094,0.0014286,0.030188,-0.085865,-0.03134,0.0087934,-0.17012,0.18278,0.27628,-0.072743,-0.0086549,0.34341,-0.23141,0.10787,-0.10303,-0.16321,0.02277,0.1584,-0.24824,9.5168E-4,0.029758,-0.27418,0.22887,-0.18339,-0.0097271,-0.060448,-0.26915,-0.04199,0.050359,-0.028254,-0.21564,0.11708,-0.069087,0.19049,0.14867,-0.046727,8.4211E-4,0.18673,0.20591,-0.12667,0.28831,-0.48178,-0.24075,0.083217,-0.28162,-0.11098,0.11176,0.27361,0.12876,-0.025791,0.14356,0.031699,0.24687,-0.03276,-0.15544,-0.38447,0.075679,0.3161,-0.42381,-0.080917,-0.14495,-0.11379,-0.10469,0.0061875,-0.13051,-0.091874,-0.14763,0.37237,-0.053746,0.16051,0.10379,0.13759,0.031995,-0.52646,-0.086731,0.10801,-0.25887,0.21561,0.09034,-0.28373,0.33566,-0.07406,0.095462,-0.26651,0.2895,0.027973,-0.015734,-0.21344,0.032916,0.16457,0.012265,0.3756,-0.39666,-0.16549,-0.11639,0.38632,-0.2155,-0.055505,-0.040941))
  def our = Vectors.dense(Array(0.2547,-0.42512,-0.38435,-0.34799,-0.098254,0.30254,0.39389,-0.36438,0.048303,-0.095241,0.010973,0.32026,0.18102,-0.18148,0.10686,-0.16477,0.017916,-0.41743,0.26711,0.06483,0.31369,0.39263,0.053516,-0.07606,-0.49156,-0.21043,0.15171,-0.086092,-0.075089,-0.02531,0.027204,0.28082,0.19159,0.33001,0.1649,-0.085058,-0.35245,0.024654,-0.17121,-0.066291,-0.46006,0.32123,-0.44068,-0.017195,-0.21338,-0.42088,-0.30323,0.076463,-0.4309,0.27445,-0.33185,-0.28609,0.23407,0.32886,-0.147,-0.20378,-0.406,-0.53525,-0.30827,-0.19317,-0.39356,-0.62729,-0.23651,0.2205,0.062116,-0.13892,-0.092382,-0.23152,0.1431,-0.11974,0.2292,0.12245,0.27526,-0.45167,0.1635,-0.13766,0.2827,-0.17694,-0.2454,-0.41477,-0.017832,0.11953,-0.2681,0.13021,-0.27623,0.088081,0.062245,0.31157,-0.30005,-0.10036,-0.041791,-0.0078257,0.19584,-0.26402,-0.2336,-0.1646,0.014731,-0.32504,-0.016812,-0.029951))
  def s22 = null.asInstanceOf[MLVector]
  def all = Vectors.dense(Array(0.39178,0.063135,0.057358,-0.041929,-0.034757,-0.179,-0.049709,-0.31316,0.17735,-0.044933,-0.3384,-0.12244,0.083879,1.2887E-4,-0.1718,0.015543,-0.26534,0.11337,0.33527,-0.13755,0.082581,0.038456,0.023219,0.15377,-0.34679,-0.28582,-0.3015,-0.064181,-0.058107,0.32077,-0.09306,0.01339,-0.039532,-0.080552,0.27103,-0.094882,-0.23463,-0.30693,0.050729,0.12145,0.40167,-0.21422,-0.21427,0.11982,-0.4466,-0.040446,0.0093579,0.35625,-0.23395,0.048178,-0.30175,-0.18031,-0.078626,0.034834,-0.31501,-0.15052,-0.3999,-0.12516,0.051591,-0.34393,0.010836,-0.23051,0.035676,0.064424,0.048195,0.15285,-0.0017973,-0.082099,0.45982,-0.057408,-8.7252E-4,0.12176,0.29519,0.20651,0.093469,-0.12313,0.31912,0.0099963,-0.29613,-0.073632,-0.2464,0.25559,-0.066515,0.056442,-0.22671,0.41956,0.14029,0.071967,-0.2196,0.2578,0.15599,-0.089573,0.031998,-0.29826,-0.099484,0.036613,0.13018,0.17203,-0.0049262,-0.18226))
  def s55 = null.asInstanceOf[MLVector]
  def present = Vectors.dense(Array(0.22994,0.098075,-0.39151,-0.10657,-0.11946,0.060781,0.17229,-0.14698,-0.0027655,-0.12871,-0.12166,0.52426,0.21509,-0.044587,-0.055532,0.066126,0.037986,-0.057587,-0.0021045,-0.064672,0.34869,0.10811,0.2877,0.046144,-0.30714,-0.14946,-0.095457,-0.16121,0.018302,0.055753,-0.14026,-0.017872,-0.044335,0.18827,0.19826,-0.039376,-0.079024,0.28718,-0.010826,0.053359,-0.37587,0.12764,-0.35636,-0.0050675,-0.064514,-0.20393,-0.31783,0.061069,-0.047373,0.26011,-0.04762,-0.3433,0.4174,0.40513,-0.11738,-0.10966,-0.16054,-0.6161,0.18098,-0.15028,-0.40828,-0.40577,-0.16274,0.17259,0.026555,-0.080557,-0.17171,-0.24335,0.23212,-0.34841,0.11026,0.039494,0.33251,-0.054928,-0.10234,-0.098605,0.38456,-0.032918,-0.079715,-0.3328,-0.020262,-0.056729,-0.20508,0.075889,-0.4062,0.036546,-0.038272,-0.042316,-0.12922,0.21448,0.2047,-0.18322,-0.11745,-0.5053,0.029123,-0.16372,0.37636,-0.18414,-0.27856,-0.56352))
  def it = Vectors.dense(Array(0.07833,0.11274,-0.29834,-0.12415,-0.22028,0.012097,0.029923,-0.24958,0.07615,0.2334,0.080578,0.051115,0.24,-0.27741,0.31868,-0.049586,-0.20504,-0.07215,0.074823,-0.11076,0.18913,0.061566,-0.2235,0.21705,-0.11319,-0.030525,0.1127,-0.36125,-0.097594,0.0017918,-0.06941,-0.2451,-0.040304,0.15396,-0.0064599,0.28028,-0.12261,0.069366,0.13659,-0.010551,-0.26823,0.32164,-0.17457,-0.19926,0.23393,-0.20436,-0.033891,-0.07957,0.028722,0.16963,-0.11429,-0.14168,-0.10117,0.47545,-0.28634,-0.056234,-0.42808,0.037913,0.20992,-0.31414,-0.24825,-0.26868,-0.31624,-0.019659,0.16163,-0.35714,-0.25612,-0.11321,0.20582,-0.12796,0.18212,0.030146,0.34386,-0.19058,-0.33288,-0.33655,0.15902,-0.15264,0.2163,-0.090058,-0.31441,0.46476,-0.050797,0.42599,-0.26646,0.37791,0.27565,0.0509,-0.28273,-0.056959,0.1237,0.12969,0.059566,-0.44517,-0.26077,0.055214,0.38362,-0.068189,0.098033,-0.10795))
  def anti = Vectors.dense(Array(0.2231,-0.21562,-0.2446,-0.23549,-0.30383,-0.29079,0.32811,0.0089542,-0.072408,-0.053196,0.53269,0.18114,-0.17827,0.0066609,0.060297,0.095843,-0.20137,-0.10236,-0.7351,0.51554,-0.20246,0.23261,0.10725,0.35743,-0.031754,-0.61124,-0.0614,-0.50105,0.37576,0.24075,-0.4511,0.027726,-0.035529,0.0026584,0.27748,-0.34659,0.29501,0.016564,-0.019545,-0.0282,-0.24055,0.38331,-0.51699,0.05621,-0.43461,0.4879,-0.28625,0.14062,0.33879,0.53459,-0.19405,-0.50836,-0.054597,0.02319,-0.7553,0.18169,0.048777,-0.25477,0.23511,-0.12031,0.22727,-0.35248,0.061992,0.72752,0.30094,0.044368,-0.17188,0.055811,0.89959,-0.55773,0.14728,-0.51967,-0.28421,0.39968,-0.25398,-0.35285,-0.096853,0.23039,-0.29642,0.14863,-0.14137,0.3832,-0.3795,0.021783,-0.36139,0.29484,0.35302,-0.20969,0.065989,0.014741,0.02231,0.38784,0.43261,-0.24371,-0.17911,0.7115,0.10444,-0.18678,-0.53341,0.24824))
  def a = Vectors.dense(Array(0.31346,0.27782,-0.40247,-0.18704,-0.2682,0.20342,0.042443,-0.22671,0.078896,-0.094276,-0.14967,0.042917,-0.13484,-0.09682,-0.0078927,0.14131,-0.062083,-0.039059,-0.027711,-0.16701,0.015447,0.029733,-0.24082,-0.033934,-0.19182,-0.44441,0.091854,-0.10229,0.15011,-0.024163,-0.064464,-0.13643,-0.035874,0.035569,0.24305,0.019269,-0.10962,-0.048693,0.27688,-0.057635,-0.21583,0.60294,-0.19292,0.16324,0.2098,0.15209,-0.25814,0.294,-0.13153,0.29038,-0.097535,-0.19329,0.28542,0.21565,-0.16856,-0.18714,-0.10109,-0.23558,0.24357,-0.19172,-0.15446,-0.089061,0.071708,0.18251,0.090315,-0.0019975,-0.20907,-0.24325,0.26146,-0.12818,-0.060526,0.059491,0.28328,-0.092388,0.1361,-0.39046,0.1436,-0.17186,-0.22707,-0.14866,-0.0072364,0.19466,0.0061948,0.31719,-0.050511,-0.19978,0.21311,0.093005,-0.28349,0.0023816,-0.25201,-0.13644,-0.0010987,-0.14837,-0.062247,-0.11856,0.1629,-0.15333,-0.027371,-0.29461))
  def achieved = Vectors.dense(Array(0.57096,0.088262,0.0077814,0.16391,-0.35417,0.03346,-0.1804,-0.31793,0.46864,-0.39478,-0.20702,0.024292,0.15796,-0.076148,-0.23892,-0.2213,-0.40256,-0.19316,-0.027582,-0.21971,0.15894,-0.1664,-0.69683,-0.13843,-0.19123,-0.075638,-0.32359,-0.2609,0.017059,-0.28773,0.40264,0.22387,-0.069356,0.016172,-0.31309,0.086272,0.12653,-0.12216,-0.41534,6.2984E-4,-0.14289,0.22045,-0.50738,-0.20117,-0.039747,0.66418,0.050391,0.5214,0.02108,0.2514,-0.015187,0.24592,0.18725,-0.15153,-0.33574,-0.21163,-0.11041,-0.17804,0.25187,-0.18939,0.046099,0.18437,0.0085929,-0.05448,-0.064143,0.086386,-0.026058,-0.1926,0.53328,0.12491,0.35003,0.44487,0.26901,0.0951,0.10008,0.26364,0.0085884,-0.17052,-0.4085,0.17,-0.09918,-0.24218,-0.19458,0.3172,0.24489,0.32691,0.12725,0.58171,0.027082,-0.18095,-0.32951,0.15653,0.33034,-0.35637,0.30895,0.19329,0.11555,-0.027928,-0.046788,0.21981))
  def therapy = Vectors.dense(Array(0.38864,-0.79734,-0.21359,-0.015138,-0.23225,0.60297,-0.2113,-0.3128,0.067223,-0.065022,-0.35431,0.29495,0.13854,0.023463,0.32256,0.47231,-0.027936,0.14228,-0.36554,-0.022532,-0.13726,0.85405,-0.80136,0.55014,0.10394,-0.9579,0.020541,0.16907,0.49052,0.14852,0.057797,0.085868,-0.086086,-0.16446,-0.21118,0.0065449,0.26178,0.18473,0.04994,-0.20172,0.25682,0.51688,-0.80643,-0.080645,-0.073249,0.53295,-0.203,0.11769,0.26915,0.062485,-0.017921,-0.20384,-0.11723,-0.25804,-0.15378,-0.0086037,0.068479,-0.33039,0.014091,-0.33877,-0.0478,-0.096692,-0.23758,0.23457,-0.037434,-0.49771,0.36353,-0.10399,0.39791,-0.070388,0.28125,-0.15244,0.30252,-0.012087,-0.04448,0.55374,-0.067353,0.38617,-0.046809,-0.010983,-0.39834,0.50079,-0.0053482,0.45308,-0.25541,-0.039461,0.44658,-0.092004,-0.46412,-0.27842,-0.15107,0.37892,0.34179,0.012211,0.093802,0.22112,0.21758,0.19415,-0.13848,-0.14224))
  def as = Vectors.dense(Array(0.34015,0.22614,-0.16585,-0.092013,-0.1564,0.20249,-0.054174,-0.14641,-0.072698,0.077876,-0.11681,-0.15622,0.033114,-0.23669,-0.017892,-0.16692,-0.038761,0.19748,0.0025497,-0.12903,-0.11521,0.27924,-0.11963,0.32644,0.11125,-0.39893,0.11098,-0.12207,0.1343,0.21876,-0.06854,-0.18546,0.020257,-0.12236,0.2825,0.17393,-0.22494,-0.22715,0.24107,0.080444,0.11953,0.24882,-0.31414,-0.083266,0.02839,0.31744,0.010949,0.048323,0.11084,0.20964,0.035482,-0.071413,-0.013928,0.41338,-0.24951,-0.20663,-0.38702,-0.017073,0.3048,-0.38717,-0.026222,-0.033392,0.15919,0.29744,0.1768,-0.020871,-0.027135,0.022118,0.18409,-0.22899,0.23653,0.23082,-0.14031,0.27259,-0.1289,-0.18542,0.16594,-0.05435,-0.095628,0.098481,-0.0534,0.37904,-0.11537,0.13451,-0.205,-0.055847,0.15875,0.16414,-0.24366,0.052669,-0.084641,-0.096034,-0.037918,-0.18373,0.16163,0.12042,0.31339,-0.066601,-0.063484,-0.033676))
  def s5 = null.asInstanceOf[MLVector]
  def has = Vectors.dense(Array(-0.051939,0.020426,-0.22478,-0.078789,-0.21391,0.15575,-0.20771,-0.071187,0.10773,0.06656,-0.14465,-0.0065352,0.24281,-0.30467,-0.020167,-0.018368,-0.22774,0.12814,0.14602,-0.095223,-0.20056,0.4792,-0.066034,0.084553,-0.15368,-0.13734,-0.10363,-0.31488,-0.15321,0.15905,0.17429,-0.075292,-0.18445,0.12087,-0.037778,0.11012,0.19234,-0.090237,0.12068,0.11789,-0.086282,0.65884,-0.28021,-0.2484,0.099394,0.1552,-0.21084,0.1175,-0.0030698,0.19618,-0.14455,-0.041068,-0.053368,0.63664,-0.37699,-0.27955,-0.27357,0.24936,0.46258,-0.21114,-0.14661,-0.12178,-0.22587,-0.075001,-0.043504,-0.25153,-0.39489,-0.23114,0.16312,-0.074448,0.35752,-0.077965,-0.014313,-0.1314,-0.29123,-0.19755,0.2647,0.089492,0.0022369,-0.16551,-0.11731,0.45001,-0.49701,0.1348,-0.37037,0.094519,0.098374,0.26201,-0.5752,-0.10564,-0.34142,0.16376,0.24664,0.19408,-0.17998,-0.019802,0.28363,-0.17544,-0.14792,0.11206))
  def s10 = null.asInstanceOf[MLVector]
  def represents = Vectors.dense(Array(0.1823,-0.10103,-0.48735,0.031451,-0.43535,0.058904,0.14646,-0.11443,0.24749,0.26411,-0.12312,0.058083,0.22101,-0.13645,-0.17907,0.020128,0.13326,-0.22665,0.050603,-0.46807,-0.0019559,0.30251,-0.57166,-0.26551,-0.12394,-0.59289,0.075231,-0.25094,0.24822,-0.12222,0.0047182,-0.29206,-0.081084,0.044942,0.081811,0.29638,-0.12092,0.16283,0.080625,-0.40131,-0.16245,0.53389,-0.25723,0.082125,0.27231,0.35877,-0.22875,-0.12454,-0.1071,0.6049,0.14266,-0.32096,0.032947,0.90961,0.014468,-0.17957,0.20592,-0.29056,0.55128,-0.39942,-0.27699,-0.15328,0.3388,0.26009,0.28856,-0.15031,-0.4403,-0.14673,0.28833,-0.17257,0.038867,0.38584,0.28485,0.18407,0.27576,-0.19394,0.027127,0.040138,0.042936,-0.15379,0.15816,-0.13802,-0.0094363,0.48834,0.064562,-0.095513,0.20963,0.19797,-0.27799,-0.2018,-0.19114,-0.28955,0.14298,0.013889,0.014357,-0.025561,0.64042,-0.083514,-0.17509,-0.029106))
  def recommendation = Vectors.dense(Array(0.17556,-0.2102,-0.39328,-0.10815,-0.143,0.48856,0.18751,-0.88664,0.23111,0.11963,0.26797,0.39143,0.62055,-0.10601,0.07948,0.64319,-0.48972,0.028323,0.091388,-0.20215,-0.35987,0.12526,-0.7912,0.148,-0.18231,-0.16722,-0.53542,-0.028445,0.28924,0.081442,0.54503,-0.32967,0.29211,-0.10309,-0.087872,0.034948,-0.35075,0.16499,-0.17265,-0.31381,0.058154,0.095213,0.039401,0.11905,-0.28749,-0.3195,0.2656,0.34778,0.08785,0.56393,-0.53081,-0.38934,-0.22079,-0.25238,-0.11235,0.069586,-0.2477,-0.26435,0.0041262,-0.17188,0.21527,-0.22206,0.10782,0.2601,0.18906,-0.52244,-0.044641,-0.42478,0.33864,-0.46659,0.64103,0.046441,0.19639,-0.15617,0.052095,0.2049,-0.11818,-0.36281,0.031788,0.0078425,0.2701,0.81197,0.20633,0.20228,-0.48462,0.55917,0.53709,-0.12048,-0.1313,-0.38881,-0.10951,0.1528,0.40313,0.0075596,0.62811,-0.36998,-0.21732,0.077374,-0.13314,-0.44457))
  def inhibit = Vectors.dense(Array(0.4949,-0.22048,-0.24001,-0.22852,0.10887,-0.23375,0.24125,0.39137,-0.66647,0.41543,0.073897,0.20573,-0.094156,-0.068375,0.34663,-0.1421,-0.91156,-0.33557,-0.43848,0.85367,0.2689,0.32545,-0.30419,0.17396,-0.0096437,0.047984,-0.30854,-0.86387,0.48368,-0.15031,-0.47112,0.055982,-0.02706,-0.076532,-0.11735,0.13847,0.023121,0.10911,-0.055148,0.46366,-0.59401,0.32728,-0.67939,0.049578,-0.014354,0.10534,-0.023795,-0.1922,0.56626,0.1876,-0.25628,-0.25877,-0.066749,0.59596,-0.62521,-0.69955,-0.021136,-0.089419,-0.11195,-0.36789,0.67122,-0.15482,-0.063776,0.086183,-0.027947,0.11835,0.081023,0.21328,0.50907,-0.28676,0.3778,-0.17391,0.12467,0.21788,-0.26798,0.29776,0.22178,-0.14397,0.12178,0.012761,0.20746,0.085114,-0.015748,0.17641,-0.15491,0.61591,-0.34118,0.27609,-0.46162,0.25182,-0.13698,0.17911,0.23447,-0.35973,0.19587,0.56257,0.62033,0.41334,-0.15317,0.33193))
  def or = Vectors.dense(Array(0.3743,0.21877,7.9662E-4,-0.043854,-0.10587,-0.079603,0.018127,-0.049947,-0.23061,-0.11815,-0.1205,-0.12923,0.037263,-0.10728,-0.13079,0.16535,-0.098499,0.28025,-0.030699,-0.13274,0.036667,0.23186,-0.50245,0.074991,0.13805,-0.38627,-0.0012622,-0.1336,0.28638,0.07642,-0.2807,-0.14681,0.10456,0.051671,0.19305,0.045801,0.014747,-0.18364,0.39005,0.20084,0.18182,0.22821,-0.12535,-0.02201,-0.030453,0.1162,-0.093088,0.23934,0.13145,0.15117,0.083897,-0.046248,-0.073466,-0.22441,-0.12763,-0.15692,-9.4941E-4,-0.31693,0.010767,-0.3778,0.3341,0.020589,0.13746,-0.011561,-0.038304,0.2057,0.10845,0.058525,0.37011,-0.26837,0.26168,0.30868,0.10431,0.22619,0.081788,0.10666,0.2696,-0.067948,0.045882,-0.059107,-0.055268,0.40244,-0.073471,0.078607,-0.0096695,0.14581,-0.055741,0.13255,-0.19568,0.091297,-0.0011752,0.08231,0.27348,-0.24632,0.074182,0.063178,0.17554,0.053138,-0.053411,-0.20474))
  def mediated = Vectors.dense(Array(0.41223,-0.095871,-0.44571,-0.20275,-0.32379,-0.1573,0.30566,-0.29817,-0.52154,0.22325,-0.11174,-0.17731,-0.027237,-0.22799,-0.20141,-0.041935,-0.56042,-0.42679,-0.22285,0.45353,0.084551,0.24933,-0.19457,0.080349,-0.033526,0.10085,-0.1558,-0.30118,0.43243,-0.16616,-0.13531,-0.0092363,0.082133,0.39938,0.056606,0.25665,0.19775,0.55683,0.37909,0.16612,-0.21201,0.58728,-0.43103,0.20755,0.35361,0.52478,-0.72555,0.026664,0.20068,0.34443,0.10914,0.0047372,-0.31196,0.20101,-0.30077,-0.38596,-0.070124,-0.33054,-0.19741,-0.45192,0.56787,-0.086313,0.37825,0.017964,-0.052201,-0.021219,-0.17376,0.18993,0.046134,-0.24293,0.25063,-0.59829,-0.18982,0.26689,0.18821,0.28852,0.40153,0.0069653,-0.0093327,-0.12279,0.035121,0.15775,-0.054666,0.13172,0.18111,0.065525,0.28884,0.25738,-0.5823,0.17179,-0.42365,-0.023859,-0.18682,-0.41918,0.43393,0.76755,0.60518,0.080495,-0.015728,0.44061))
  def such = Vectors.dense(Array(0.36869,0.23431,0.0047378,-0.21374,-0.16062,0.29991,0.0051162,0.048271,-0.1818,-0.043719,0.022949,-0.0099321,0.044522,-0.3853,-0.092864,-0.18043,-0.16058,0.18083,-0.057419,-0.17338,-0.055561,0.3743,-0.13635,0.45812,0.20349,-0.25549,0.095428,-0.22817,0.018304,-0.034944,-0.035504,-0.017567,0.071664,-0.016169,0.22441,0.15097,-0.17394,-0.16626,0.1683,0.22005,0.053362,0.021282,-0.48404,-0.019947,-0.11892,0.19981,-0.10128,0.018793,-0.066888,0.18001,0.10761,-0.23863,-0.11738,0.34074,-0.17145,-0.35286,-0.21928,-0.18545,0.19361,-0.32003,0.045036,-0.18097,0.39204,0.16553,0.013707,-0.059667,-5.7116E-4,0.064111,0.36154,-0.19771,0.30244,0.099875,0.090686,0.29681,-0.31043,0.13837,0.12653,-0.15472,0.15479,-0.085587,-0.2138,0.50231,-0.11666,-0.11717,-0.21134,-0.088194,-0.12775,-0.10172,-0.37429,0.31415,0.099391,-0.25013,-0.012728,-0.14979,0.099754,0.070262,0.48376,-0.085211,-0.13227,0.16554))
  def following = Vectors.dense(Array(0.20444,0.0035886,-0.14158,-0.16828,-0.24757,0.26598,-0.0095364,-0.44251,0.16148,-0.090001,-0.43046,-7.0211E-4,0.11788,0.087488,-0.2434,0.25237,0.066776,0.033843,0.13525,-0.17202,0.078248,0.27535,-0.2274,0.086574,-0.20777,-0.47918,-0.28781,-0.11376,0.32234,0.052493,-0.1489,0.23411,0.1304,0.30203,0.10207,0.08533,0.12788,-0.015444,0.18197,0.35874,0.13461,0.24661,-0.31286,0.28679,-0.52279,0.21407,0.0427,0.038977,0.019407,0.1754,0.095189,0.050797,-0.26559,0.01447,-0.070972,-0.19385,0.1368,-0.56784,-0.0056226,-0.04889,0.30421,0.0083577,0.3047,-0.17367,-0.1166,0.026122,0.14236,-0.12681,-0.069983,-0.25176,0.41218,-0.16039,0.31901,0.3259,-0.040694,0.028074,0.35712,0.040685,-0.155,0.16678,-0.020536,0.1358,-0.18949,0.29261,-0.12419,0.10378,-0.033249,0.4501,-0.22796,0.31061,-0.087845,-0.099469,0.22961,-0.25759,-0.063436,0.012049,0.043224,-0.18287,0.14254,-0.34874))
  def resulted = Vectors.dense(Array(0.4836,-0.012878,-0.22397,-0.087725,-0.51052,-0.043136,0.38087,0.10745,-0.091796,0.085473,-0.23224,-0.02411,-0.047397,-0.038927,-0.27629,-0.047538,-0.27721,-0.19004,-0.049573,-0.32461,-0.0091797,0.047655,-0.43572,-0.25555,-0.088768,-0.12949,-0.081158,-0.35534,0.16688,0.24954,0.023534,0.16341,-0.16179,0.45827,-0.18726,0.16222,0.19651,-0.1513,-0.12219,0.26256,-0.2267,0.1368,-0.35104,-0.040568,0.10171,0.43527,-0.12019,0.54697,-0.18304,0.1417,0.016838,-0.10183,-0.24874,-0.091735,0.009686,-0.3895,0.54567,-0.59562,0.27613,-0.29215,0.22673,0.068925,0.38559,-0.17932,-0.16209,0.07243,0.10359,0.075095,0.52295,-0.0040616,0.25731,0.19008,0.22533,0.42323,0.4383,-0.019575,0.20336,-0.060865,-0.19743,0.10034,0.29473,-0.27871,-0.21062,0.13438,0.21155,-0.018934,-0.093189,0.31864,-0.3319,0.23194,-0.35417,-0.097081,0.59455,0.21426,0.11198,0.21962,-0.15359,0.10179,0.0017356,0.092899))
  def age = Vectors.dense(Array(0.14284,-0.46402,-0.31702,0.14738,-0.13482,0.070778,-0.63781,-0.13118,-0.72463,-0.31548,-0.14271,-0.078065,0.20994,-0.15589,-0.26491,0.1691,0.052668,0.078612,-0.14765,-0.33065,0.079226,0.20665,-0.1519,0.38749,-0.029837,-0.42965,-0.29923,-0.18196,-0.36788,0.26398,0.27787,-0.082523,0.41787,-0.18654,-0.042956,0.24245,-0.56543,0.32122,0.053523,-0.12177,0.72564,0.21854,0.082724,0.38685,-0.066371,0.035276,-0.14031,-5.4576E-4,0.35758,0.1809,-0.43362,-0.018286,-0.054486,-0.1842,-0.35112,-0.17102,-0.11632,-0.7667,0.0033839,-0.47699,0.049157,-0.22083,0.092402,0.075238,-0.30162,0.37628,0.18436,-0.51497,0.20668,-0.47689,0.41965,0.072761,-0.16275,-0.10973,0.020378,-0.56219,0.22928,-0.28461,-0.30328,-0.16279,-0.19683,0.25726,0.30987,0.24316,-0.091644,-0.17667,0.48027,0.3061,0.11646,0.18628,-0.041814,-0.21131,0.48583,-0.1621,-0.28791,0.02186,-0.25644,0.273,0.013949,-0.33157))
  def induction = Vectors.dense(Array(0.18075,-0.063739,-0.29504,-0.25349,-0.28041,0.22532,0.097423,-0.35414,-0.45048,0.0018938,0.119,0.11204,0.26159,-0.1272,0.21702,-0.088305,-0.037027,-0.20426,-0.093144,0.39988,0.15032,0.2023,-0.14429,0.3832,-0.17334,-0.33871,-0.56643,-0.22495,0.74377,-0.042713,-0.29264,-0.32714,-0.31544,0.4027,0.069002,-0.0013092,0.28084,-0.062045,-0.035809,0.50308,0.077502,-0.056176,-0.53969,0.302,0.035192,0.68,-0.27974,0.12771,0.0090905,0.1008,-0.015818,-0.40062,-0.28335,-0.067723,-0.31888,-0.27019,0.14485,-0.29493,-0.24675,-0.41891,0.1773,0.14932,0.113,-0.025824,-0.095517,-0.3353,0.11084,-0.17938,0.093636,-0.50413,0.29897,-0.44379,0.42821,0.14394,0.38239,-0.44742,0.36641,-0.053745,0.012867,-0.060113,-0.34085,0.052707,0.082118,0.56879,0.098288,0.16269,-0.03754,0.32614,-0.30534,0.0968,-0.35523,0.33448,-0.21731,-0.34855,-0.10628,0.56813,0.21601,0.20679,-0.02705,0.20769))
  def eventually = Vectors.dense(Array(0.30249,-0.15927,0.28938,-0.24963,-0.687,-0.061545,-0.23904,-0.39427,-0.13535,-0.042115,-0.22421,-0.035126,-0.032333,-0.015617,0.037098,-0.025274,-0.34978,-0.02263,-0.0069764,-0.073924,0.35558,0.11097,-0.36391,-0.032537,-0.35783,-0.50076,0.38487,-0.268,0.24912,0.036217,-0.19227,0.11735,-0.0091685,0.33754,-0.0090263,0.048917,0.024958,0.04906,0.43274,0.25619,0.33753,0.060775,-0.72696,-0.075796,-0.02957,-0.065242,0.12143,0.084657,0.091916,-0.0071621,-0.072735,-0.33442,-0.26591,0.20842,-0.37758,-0.35796,-0.076229,-0.0095195,-0.064933,-0.15391,0.026191,-0.15493,0.16585,-0.20798,0.44544,0.11795,-0.20085,-0.34753,0.46646,0.15304,0.40615,0.26297,0.38605,-0.008552,-0.38223,0.10959,-0.033299,0.10147,0.01767,-0.11994,0.1105,0.33965,0.2211,0.40723,-0.37187,0.30206,-0.2,0.0092348,-0.045215,-0.049971,-0.069337,-0.20141,0.58709,-0.69042,-0.29931,-0.11971,0.18008,-0.11438,0.29653,0.32609))
  def cr = Vectors.dense(Array(0.67869,0.085995,-0.51316,-0.40115,-0.067142,-0.0674,0.035354,-0.39941,0.13043,-0.033633,-0.43626,0.35902,0.49798,-0.027615,-0.23079,0.07255,-0.79249,0.17225,0.71863,-0.098661,-0.25034,-0.15149,-0.054195,0.18305,-0.46401,-0.47897,-0.16669,-0.19372,-0.03088,0.006077,-0.28766,-0.022445,-0.058002,0.38227,-0.28417,0.1019,0.22432,-0.084073,0.17727,0.053719,0.13371,0.1873,-0.30762,-0.18762,-0.33699,0.10349,-0.58901,0.39053,0.31024,0.56937,-0.11626,0.63297,-0.52822,0.072285,0.090559,0.023128,-0.30736,-0.25639,-0.2446,-0.41463,0.29709,0.19168,-0.29539,-0.086216,0.19676,0.30703,0.58345,-0.47222,0.43136,-0.32571,-0.23263,0.12525,0.077051,0.36776,0.16771,0.10142,0.37435,0.4427,-0.13616,0.77963,-0.28983,-0.2138,0.35803,0.45901,-0.16987,0.0012948,0.33699,0.031577,0.17623,0.053094,0.14536,0.2311,0.45386,-0.18828,0.053017,-0.11381,0.3993,-0.10396,-0.17891,0.04797))
  def that = Vectors.dense(Array(0.26712,0.0080675,-0.23462,-0.45342,-0.1779,0.048488,0.40174,-0.2565,-0.14735,-0.06601,-0.0044369,0.068793,0.028041,-0.36711,0.064063,-0.17477,-0.29067,-0.14415,0.15133,0.098126,0.10223,0.16174,-0.012182,0.10272,-0.24779,0.016885,0.10145,-0.3393,0.0035794,0.2364,-0.1193,0.053047,0.12285,0.2473,0.1496,0.083702,-0.28352,0.040907,0.080775,0.077204,-0.26371,0.255,-0.25183,-0.01596,0.04576,-0.11992,-0.17075,0.069506,-0.11283,0.22835,-0.25374,-0.20379,-0.11456,0.38462,-0.098114,-0.30834,-0.36273,-0.15866,-0.023158,-0.31749,-0.12398,-0.34369,-0.055319,0.18438,0.091688,-0.22663,-0.027674,0.024251,0.090634,-0.081991,-0.067569,-0.018009,0.3907,-0.10359,0.059218,-0.11923,0.17587,-0.082919,-0.11732,-0.21,-0.26155,0.26979,-0.053625,0.15159,-0.18725,0.12384,0.099312,0.10788,-0.31379,0.064688,0.15063,0.067768,0.045292,-0.35727,-0.21471,0.10724,0.10733,-0.055699,-0.12825,0.0021191))
  def to = Vectors.dense(Array(0.34512,-0.032229,-0.066433,-0.35814,-0.077956,-0.041747,-0.091496,0.0027451,0.15094,0.12482,-0.12607,0.17815,0.072288,-0.10805,0.092283,0.082569,-0.18816,0.075644,0.0833,-0.037213,0.024192,-0.056407,-0.16477,0.11206,-0.11335,-0.39383,0.0017205,-0.3406,0.36136,-0.16171,-0.080873,0.20508,0.18444,0.023866,-0.026914,0.077027,-0.11275,0.13074,0.36644,0.12516,-0.1963,0.11647,-0.3342,0.010879,-0.033021,-0.29492,-0.13545,-0.086423,0.0089337,0.16048,0.049754,-0.12848,0.16535,0.038068,-0.18883,-0.053378,-0.24745,-0.21506,-0.089233,-0.31887,-0.12221,-0.25846,0.05225,0.11155,0.056783,0.010804,-0.065095,-0.38101,0.18205,-0.40845,0.26891,0.1452,0.24926,0.012851,-0.32165,-0.11234,0.30043,-0.25932,-0.17449,-0.071333,-0.40632,0.21396,0.045996,0.20507,-0.33483,0.11826,-0.17381,-0.02271,-0.084524,0.15378,-0.22535,0.046104,0.17497,-0.34644,-0.062869,-0.050349,0.28692,-0.035712,0.18422,-0.11462))
  def purpose = Vectors.dense(Array(0.22884,-0.1623,-0.53741,-0.22432,-0.084583,0.17032,0.099934,0.0068215,0.42664,-0.37693,0.19328,0.77615,-0.031024,-0.16105,-0.13722,0.17901,0.19835,-0.24854,-0.32129,-0.11728,-0.076738,0.11119,-0.085416,0.012294,-0.3899,-0.14397,-0.29806,-0.1536,0.22876,-0.43359,0.14336,0.1963,-0.03412,-0.03871,-0.57615,0.10433,-0.15533,0.45895,-0.061673,-0.17625,-0.47882,0.29437,-0.25882,0.082734,-0.26645,-0.27805,-0.21566,-0.23224,0.16473,0.505,-0.18599,0.056733,0.26731,0.27101,-0.080989,0.22053,-0.18757,-0.85183,-0.04962,-0.11169,-0.64167,-0.38456,0.070664,0.35259,0.096895,-0.035727,-0.38709,-0.57513,0.4548,-0.61925,0.42811,0.048974,0.11476,-0.066005,-0.15837,0.15861,0.57898,-0.45052,-0.20919,0.045036,-0.033131,0.013605,-0.11737,0.16538,-0.22997,0.12875,-0.30079,-0.18509,-0.38024,0.21055,-0.22794,0.038644,-0.15578,-0.42726,0.62934,-0.28704,0.69322,-0.21102,0.26186,-0.80369))
  def overexpression = Vectors.dense(Array(0.21271,-0.38342,-0.83846,-0.58592,-0.29084,-0.19549,0.39472,0.14221,-0.80139,0.38174,-0.29531,0.29829,0.083329,-0.4813,0.14409,-0.44023,-0.22661,0.24069,0.0426,0.96255,0.34587,-0.066824,-0.031215,0.24796,-0.23155,0.12937,-0.096601,-0.47391,0.19665,0.40991,-0.48504,-0.23169,-0.41839,0.44044,-0.26931,-0.0023347,0.031326,0.41539,-0.19481,0.24889,-0.57319,0.39298,-0.362,0.29378,0.074706,0.17543,-0.43918,0.54378,-0.053475,-0.073687,-0.53399,-0.5644,-0.31809,-0.053838,-0.40522,-0.61853,0.2969,-0.58394,-0.20512,-0.72978,0.14766,0.036399,-0.034649,-0.065534,0.105,-0.049708,0.31833,-0.196,0.37015,0.12689,0.51294,0.052519,0.17885,-0.31674,0.25528,-0.13583,0.58361,0.16935,0.23386,-0.09707,-0.045558,0.26327,-0.16329,0.057183,-0.18085,0.075898,0.50338,0.31855,-0.34354,-0.3378,0.055992,0.04664,0.1014,-0.20241,-0.061378,0.6484,0.59843,-0.21713,0.081709,0.36435))
  def associated = Vectors.dense(Array(0.42702,0.0013486,-0.40152,0.0065492,-0.39944,0.028545,0.082073,0.50741,-0.47577,-0.040377,-0.037957,0.032485,0.069609,-0.23043,-0.46875,0.18835,-0.16575,0.025474,-0.0085086,-0.063978,0.35793,0.4519,-0.37692,0.2872,0.054133,-0.21435,-0.090466,-0.21412,-0.27099,0.24667,0.12432,0.085913,0.1246,0.32966,0.057925,0.25129,-0.11851,0.28923,0.12266,0.078722,-0.033784,0.25413,-0.27326,0.18715,-0.17406,0.2103,-0.031305,0.19207,-0.16195,0.31362,-0.061079,-0.59079,-0.28551,0.079084,-0.16581,-0.043278,0.12262,-0.47326,0.17515,-0.72543,0.30954,-0.33443,0.32315,-0.13643,-0.10348,0.27425,0.020635,-0.0078719,0.12654,-0.19699,0.33604,0.073177,-0.079259,0.049668,-0.37308,0.090613,0.54404,0.22664,0.087873,0.075086,-0.0053569,0.20565,-0.049765,0.044096,-0.028183,-0.24907,-0.078603,0.24379,-0.18175,-0.09935,0.097225,0.014677,-0.01773,0.19226,0.2049,0.31033,0.37225,0.030909,-0.1809,-0.15131))
  def sclerosis = Vectors.dense(Array(0.029009,0.23642,-0.17853,-0.32761,-0.20372,0.46741,0.3155,-0.27827,-0.96704,-0.64194,0.6306,-0.016357,-0.041281,0.20713,-0.30482,-0.077106,0.11492,0.18077,0.29254,-1.0369,0.78582,0.28207,-0.28298,0.30633,-0.36827,-0.81391,-0.085611,0.0092288,-0.93621,0.012224,0.29921,0.62042,-0.31395,0.082534,-0.21562,0.069193,-0.062317,0.7985,0.39089,-0.052111,0.38598,0.48797,-0.37244,0.29291,0.20456,0.045134,-0.6403,-0.17643,0.71272,0.32456,-0.14164,-0.24907,0.062161,-0.093714,-0.14936,0.16686,-0.17266,-0.51915,-0.089117,-0.70566,0.079645,-0.16527,-0.21525,-0.30807,-0.016328,0.26785,0.10718,0.095276,0.66299,-0.018812,-0.027377,-0.029384,0.39783,0.28118,0.0011528,-0.28196,0.23589,0.23935,-0.20465,0.39965,0.1657,0.93872,0.014693,0.14259,-0.96302,-0.22451,0.093735,-0.38946,-0.55397,0.020404,-0.68162,0.38863,0.40533,-0.094865,0.11896,0.35787,1.0311,-0.50418,-0.67442,0.29404))
  def fact = Vectors.dense(Array(0.2443,-0.12081,0.037195,-0.12827,-0.40424,-0.10485,0.048526,-0.40734,-0.06092,0.064188,0.016228,0.12779,0.20409,-0.36659,0.10917,-0.075237,-0.28841,-0.13495,0.13423,-0.29869,0.16453,0.14404,-0.057319,0.076315,0.041376,0.34818,0.17854,-0.24845,-0.0634,0.11118,-0.13381,-0.086707,0.12306,0.31473,0.10014,0.16033,-0.17348,0.034349,-0.026671,-0.048342,-0.13364,0.21741,-0.17997,-0.17354,-0.010923,-0.13604,-0.22237,0.0043228,-0.088078,0.12078,-0.10919,-0.27968,-0.22991,0.36528,-0.11541,-0.29072,-0.27977,-0.11091,0.17245,-0.26143,-0.12786,-0.044874,-0.12322,0.080765,0.26528,-0.35618,-0.12312,-0.062311,0.43611,-0.058584,0.076813,-0.057159,0.10409,-0.0099039,0.19544,-0.098988,-0.03927,-0.029749,0.10375,-0.31212,-0.27238,0.41987,-0.092071,0.21441,-0.26353,0.29395,0.26922,-0.15657,-0.2583,-0.076517,0.19791,-0.0011303,0.01889,-0.14342,-0.24614,0.042608,0.13708,-0.043565,-0.11694,-0.099035))
  def s80 = null.asInstanceOf[MLVector]
  def six = Vectors.dense(Array(0.32857,-0.003919,-0.096097,0.064659,0.016283,0.10357,-0.26918,-0.11869,0.1108,-0.36293,-0.56343,-0.13131,-0.24159,0.027604,-0.40781,0.010632,-0.2194,-0.026283,0.34546,-0.17745,0.14237,0.043148,0.1662,-0.0021129,-0.45153,-0.49617,-0.61976,-0.015049,0.11354,0.38864,-0.15303,0.052499,-0.30564,0.012195,0.4513,-0.46919,-0.16942,-0.3116,0.029147,0.16609,0.43815,-0.20066,-0.34964,0.27687,-0.33754,0.067686,0.11063,0.38624,-0.096469,0.14002,-0.33789,-0.10912,0.24931,-0.15508,-0.072469,-0.3802,-0.18352,-0.31812,0.35128,-0.16744,0.19784,-0.1989,-0.16551,-0.064148,0.22479,0.31876,0.079908,-0.48132,0.37585,-0.36028,-0.1348,0.17885,0.23729,0.42652,0.16235,-0.037442,0.21938,-4.9793E-4,-0.60442,-0.38731,0.047769,0.29839,-0.038795,0.11946,-0.30483,0.2403,-0.16794,0.20897,-0.30706,0.058335,-0.13978,-0.07467,0.091912,-0.4015,-0.04275,-0.13309,0.26025,0.12193,-0.090605,-0.36543))
  def lenalidomide = Vectors.dense(Array(0.024089,-0.46727,0.035789,-0.53755,-0.56514,0.89913,-0.034946,-0.40181,0.082843,-0.41423,0.70084,0.96323,-0.049758,-0.068975,0.13247,0.18285,-0.16433,-0.36086,-0.014565,-0.28108,0.70221,0.98217,-0.50212,0.69834,-0.61448,-0.88759,-0.16815,-0.3681,-0.12794,0.18362,-0.021972,-0.69829,-0.17776,-0.24678,0.0059089,0.13556,0.031482,-0.0090657,-0.053987,0.21596,-0.6729,0.75155,-0.59102,-0.55628,-0.21891,0.025615,-0.4603,0.54926,-0.3124,-0.29178,0.29984,-0.47301,0.42241,-0.28353,-0.13312,-0.046147,-0.15792,-0.0015169,-0.21365,-1.0989,0.0121,0.16788,-0.4464,0.33105,0.39116,0.25758,0.39482,-0.48741,0.92848,-0.29412,0.057042,-0.039735,0.42364,0.37701,0.40856,-0.18107,0.11916,0.46513,-0.39586,0.92889,-0.24199,-0.04842,0.17131,-0.30258,-0.83156,0.19613,0.16494,0.33171,-0.13632,-0.98857,-0.5551,0.80639,0.78699,-0.3447,-0.61108,0.787,0.14537,0.70116,0.056011,-0.086604))
  def rationale = Vectors.dense(Array(0.082955,-0.72779,-0.1593,-0.38196,-0.14145,0.58839,0.28135,-0.55477,0.080589,-0.53101,0.18025,0.38261,0.16074,-0.053737,-0.069208,0.17826,-0.13091,-0.52211,-0.22745,-0.36938,-0.16515,0.65112,-0.32623,0.10984,-0.22443,-0.55144,-0.15289,-0.20197,0.1424,-0.16187,-0.14364,-0.25392,-0.071528,-0.19819,-0.11628,-0.18507,-0.075037,0.38968,-0.35723,-0.012683,-0.34463,0.40313,-0.47267,0.16232,0.064294,0.095013,-0.38443,-0.057573,-0.037877,0.45637,0.0075886,-0.4097,-0.081251,0.17934,0.33677,-0.22544,-0.086312,-0.28772,-0.11164,-0.080698,-0.083555,-0.3294,0.34288,0.61596,0.13115,-0.48171,-0.21635,-0.25715,0.46243,-0.18129,0.59265,0.084995,-0.10298,0.11904,0.21055,0.3192,0.0091283,-0.1278,0.071271,-0.22212,0.037732,0.29621,-0.030246,-0.21479,-0.34007,0.20319,0.33256,-0.14116,-0.30806,0.032364,-0.25159,-0.048188,0.17118,-0.51159,0.57633,-0.13643,0.20001,-0.13005,0.0093422,-0.13524))
  def response = Vectors.dense(Array(0.32668,-0.25358,-0.20134,-0.36526,-0.23487,0.1918,-0.051838,-0.43579,0.22606,-0.1839,-0.12124,0.31865,0.1299,-0.25737,-0.069626,0.062893,-0.18648,-0.23607,-0.019645,0.38091,0.35311,-0.074734,-0.045887,0.16245,-0.093347,-0.15529,-0.18106,-0.017448,0.56374,-0.0092597,0.0077041,-0.037034,0.25743,0.12413,-0.18683,-0.12297,0.38749,0.19931,0.51421,0.1972,-0.12334,0.29363,-0.53091,-0.05282,0.11336,0.34511,-0.06535,-0.1842,0.30181,0.24961,-0.25483,-0.48465,-0.21161,0.033419,-0.56766,0.010491,0.28471,-0.2115,0.047725,-0.36639,0.24361,0.087884,0.59124,0.025396,-0.072374,-0.14791,0.34899,-0.14216,0.12093,-0.41146,-0.10892,0.12723,0.33698,0.34583,0.27546,-0.41873,0.12892,-0.15936,-0.37472,0.30528,-0.77807,0.22364,0.11182,0.35674,-0.10714,-0.26746,0.10336,0.081315,-0.21441,0.1499,-0.37968,0.094807,-0.058548,-0.0078888,-0.040087,0.1537,0.34257,0.0054772,0.040644,0.069243))
  def at = Vectors.dense(Array(0.66541,0.013339,-0.2282,-0.089382,-0.11445,-0.048048,-0.2937,-0.28023,0.047068,-0.040089,-0.12751,-0.15075,0.2041,0.15586,-0.055959,0.022064,-0.11245,-0.074856,-0.0047269,-0.25025,0.39468,-0.15785,0.11439,-0.19371,0.035364,-0.81192,-0.23676,-0.40083,0.1279,0.015195,-0.12815,-0.24209,-0.21129,-0.035687,0.15737,0.0050236,-0.059292,-0.16099,0.032311,0.19718,0.12271,0.018063,-0.21755,-0.060935,0.088603,0.11646,-0.16128,0.11638,-0.2185,-0.1388,-0.02377,0.01907,0.020148,0.056448,-0.15399,-0.044824,-0.41447,-0.34915,0.032347,-0.31003,0.3545,-0.032974,-0.036312,-0.28918,0.11543,0.078181,-0.097073,-0.11871,0.1848,-0.42454,0.09113,0.16685,0.10026,-0.15886,-0.15803,-0.17434,0.3281,-0.20163,-0.26958,-0.023672,0.0027962,0.11263,0.4398,0.18135,0.1101,0.20081,-0.15657,0.38385,-0.13495,0.075683,-0.14122,0.1007,0.41743,-0.070967,0.062977,0.02341,-0.12834,-0.01608,0.030775,-0.49563))
  def been = Vectors.dense(Array(-0.012422,0.15364,-0.11413,0.014067,-0.11229,0.28137,-0.30775,-0.018441,0.15713,0.065906,-0.36021,-0.19702,0.17729,-0.31212,-0.14294,-0.013768,-0.37659,0.30613,0.18406,0.035763,-0.11356,0.37862,0.13649,0.24608,-0.17947,-0.10142,-0.24698,-0.2175,-0.21571,0.24257,0.12671,0.10098,0.0099479,0.029946,0.12302,0.10577,0.15007,-0.037428,0.073977,0.36471,0.016696,0.49106,-0.3738,-0.20139,-0.11451,0.1133,-0.24087,0.08978,0.15279,0.17652,-0.11306,-0.13444,-0.028725,0.60964,-0.50435,-0.37839,-0.57485,0.43594,0.40367,-0.31782,-0.14144,-0.10342,-0.32735,-0.13223,-0.098488,-0.096527,-0.2668,-0.27649,0.10394,-0.10689,0.3442,-0.17752,-0.064778,0.049864,-0.41081,-0.10811,0.35172,0.075449,-0.044348,-0.18786,-0.15829,0.46516,-0.49009,-0.0717,-0.49438,0.20093,-0.05796,0.24488,-0.58081,0.044449,-0.24322,0.16109,0.18928,-0.19202,-0.074582,0.0084578,0.40007,-0.032882,-0.19824,0.06368))
  def diagnosed = Vectors.dense(Array(0.1297,0.054051,-0.28604,0.50697,-0.23884,0.06282,-0.085229,-0.10366,-0.10373,0.18832,-0.42532,-0.011049,0.45259,0.14558,-0.17062,0.14641,0.36497,0.12685,0.036054,0.24667,0.47479,0.46236,-0.71117,-0.12532,-0.20319,-0.39385,-0.26503,0.27926,-0.69064,0.3167,0.30133,0.21992,0.41519,-0.043842,0.013638,-0.0020096,-0.19464,0.34934,-0.066315,-0.40329,0.69989,0.37479,-0.5592,0.090771,-0.19912,0.28159,-0.23823,0.38841,0.78797,0.45006,-0.099654,-0.78285,0.37087,-0.066835,-0.80039,0.12032,-0.052218,-0.63818,4.1652E-4,-0.53725,-0.13796,-0.27753,-0.26212,-0.0636,0.30573,0.59529,0.20761,-0.0041228,0.23387,-0.26008,0.62376,0.14,-0.21367,-0.23113,0.25665,0.036771,0.33106,-0.013099,0.039544,-0.32708,0.40174,0.47827,0.43394,0.30327,-0.56919,0.38999,0.046303,0.17346,-0.27394,-0.9041,-0.055768,-0.079653,0.33822,-0.28297,-0.29589,-0.076287,0.21835,0.20882,-0.052294,-0.81077))
  def results = Vectors.dense(Array(0.020559,-0.077915,-0.20538,-0.39971,0.0011859,0.24302,0.71346,-0.46799,-0.063365,-0.1935,-0.14874,0.11068,0.10843,-0.049699,-0.10271,-0.26526,-0.26684,-0.42813,0.17351,-0.064383,0.053711,0.018373,-0.0024056,-0.028771,-0.39092,-0.11537,-0.04835,-0.1088,-0.11452,0.10493,-0.070395,0.34862,0.2673,0.28525,-0.09184,0.042234,-0.31045,0.12066,-0.35707,-0.042826,-0.43547,0.26087,-0.18257,-0.23902,-0.015448,0.15703,-0.12013,0.28035,-0.26427,0.19631,-0.3177,-0.25742,-0.21624,0.224,-0.26348,-0.29006,-0.3512,-0.33509,-0.25191,-0.30716,-0.24738,-0.17596,-0.063282,0.46327,-0.096918,-0.11225,0.22368,-0.096557,0.20578,-0.27287,0.0054496,0.066599,0.040301,-0.28953,0.4507,0.15672,0.23138,-0.07872,-0.15232,-0.058618,-0.16593,0.19076,-0.10941,0.060363,-0.097418,0.062119,0.1906,0.14162,-0.44635,0.17353,-0.0012359,0.12735,0.10394,-0.1975,-0.26195,-0.030533,-0.11944,-0.35365,0.11614,-0.021523))
  def over = Vectors.dense(Array(0.51408,-0.32619,-0.16324,-0.21384,-0.23223,-0.12154,-0.13652,-0.1006,0.0074733,-0.3099,-0.15129,-0.0016484,0.13918,0.044862,-0.048085,-0.16626,-0.23345,0.042685,0.07728,-0.40815,0.10861,0.088565,-0.10031,-0.084062,-0.20476,-0.35467,-0.27573,-0.24855,-0.3055,0.065916,0.083829,0.14349,-0.037988,0.14522,0.05162,-0.11707,0.089364,-0.15899,0.17639,0.14779,0.31565,0.2066,-0.25178,-0.047981,-0.14945,0.109,-0.20331,0.16392,-0.22989,-0.37955,0.079556,0.1848,0.13868,0.20661,-0.10375,-0.14981,-0.19377,-0.22648,0.48006,-0.31436,0.24216,-0.38228,-0.35359,-0.22476,0.18943,-0.034089,-0.097242,-0.29764,0.23246,-0.33644,0.2711,-0.017758,0.32946,-0.064682,0.029069,-0.17467,-0.0049861,-0.28117,-0.40352,-0.047371,-0.054973,0.31721,-0.072844,0.084977,-0.018956,-0.072278,0.23348,0.15643,-0.19023,0.35185,-0.26253,-0.092164,0.29252,0.05737,-0.34906,-0.032415,-0.032832,0.017777,0.25003,-0.27067))
  def relapse = Vectors.dense(Array(0.31115,-0.23901,-8.2601E-4,-0.059805,-0.37278,0.40691,-0.010381,-0.059682,0.0081362,-0.17638,-0.010438,0.25229,0.4533,0.23948,-0.032133,-0.06334,-0.42469,0.3834,0.42876,-0.23075,0.77686,0.60715,-0.98723,0.88704,-0.12476,-0.4527,-0.40329,0.1041,0.131,0.25075,0.042257,-0.089605,-0.48056,0.073214,-0.61475,-0.057133,0.27688,0.57779,0.10671,-0.28364,0.22408,0.5452,-0.36508,0.45571,-0.39333,-0.23723,0.18151,0.049191,0.21925,-0.10609,0.46173,-0.98362,-0.41156,-0.091876,-0.84763,0.085139,-0.1834,-0.54662,-0.16568,-0.47494,0.13629,0.13935,-0.36663,0.1186,0.71796,0.19509,0.83333,-0.32281,0.3178,-0.43017,0.18881,-0.0071913,0.20218,-0.16226,0.063438,0.08418,0.41322,0.368,-0.41174,0.25215,-0.48393,0.082001,0.30132,0.3625,-0.083519,-0.53561,0.21828,0.41445,0.036466,-0.58708,-0.26458,0.47353,0.57175,-0.3357,0.063966,-0.16243,0.13392,-0.10198,0.026262,-0.070564))
  def also = Vectors.dense(Array(0.29784,0.079802,-0.22027,-0.31436,-0.15793,0.038858,0.09243,-0.15803,-0.17012,0.21616,-0.070657,0.062531,0.091233,-0.15351,0.064647,-0.20522,-0.16426,-0.049437,0.1503,0.084496,0.084396,0.1668,0.15488,0.26304,-0.17763,-0.072659,0.14978,-0.28637,-0.021504,0.2212,-0.0773,0.058582,0.094293,0.17193,0.16082,0.10776,-0.17881,-0.032058,0.2607,0.22166,-0.20789,0.20897,-0.20753,0.0265,-0.069853,-0.077237,-0.13201,0.14666,-0.11644,0.11761,-0.19952,-0.13992,-0.12357,0.17539,-0.30144,-0.20429,-0.33511,-0.10739,0.092051,-0.25728,-0.015276,-0.24365,-0.064742,0.1751,-0.062394,-0.15292,0.042833,-0.10363,0.2173,-0.18596,0.075736,-0.030664,0.097807,0.0029755,-0.15853,-0.21848,0.33694,-0.0017856,-0.12667,-0.048503,-0.1908,0.2521,-0.10523,0.047368,-0.28601,0.16813,0.13571,0.12517,-0.25289,0.18909,0.12283,-0.038768,0.016084,-0.2581,-0.035091,0.15621,0.1357,-0.13315,0.0038475,-0.059532))
  def combinations = Vectors.dense(Array(0.39567,-0.15541,0.023177,-0.46096,0.38514,0.31171,0.066991,0.1197,0.28978,-0.40594,0.22635,0.23047,-0.14686,-0.13042,-0.0099004,0.18259,-0.10355,0.24396,-0.056189,-0.19601,-0.28701,0.20477,-0.27113,0.38922,-0.13543,-0.14001,0.0026929,-0.14917,0.36242,0.17761,-0.15413,-0.29931,0.53479,-0.13289,-0.0066061,-0.33158,-0.38232,-0.28294,-0.11511,0.65086,0.022701,-0.16283,-0.39693,0.119,0.1356,0.30753,-0.12568,0.11846,-0.18338,-0.078819,0.13955,-0.11622,-0.058048,0.035544,-0.34143,-0.44116,-0.028324,-0.1352,0.17744,-0.4692,0.15285,-0.28678,0.13369,0.45972,0.053834,0.027011,0.21793,-0.045809,0.83655,-0.52318,-0.098694,0.065377,0.33274,0.27944,0.076866,0.32579,0.44676,0.063097,-0.28861,-0.014948,-0.31205,0.42786,-0.0088252,-0.2845,0.077698,0.23159,0.24759,-0.053489,-0.24231,0.1008,-0.19311,0.18577,0.062078,-0.35837,0.28774,0.15242,0.35399,0.26859,-0.23128,-0.26642))
  def poor = Vectors.dense(Array(0.4473,0.0086747,0.013979,0.079429,-0.17563,0.32294,-0.20692,-0.10248,-0.16946,-0.33064,-0.26062,0.28541,-0.03957,-0.38925,-0.48045,-0.026952,-0.65003,-0.063632,0.47656,-0.25415,0.38586,0.0077268,-0.27718,0.44267,0.23119,-0.011087,-0.16023,-0.29165,-0.37515,-0.20808,-0.22711,-0.34996,-0.11363,0.35633,-0.4164,0.42061,-0.39245,0.093684,0.0091994,-0.4377,0.13181,0.45473,-0.055265,-0.40652,-0.37438,0.27031,0.18585,0.34725,-0.33284,0.32489,-0.3146,-0.44455,-0.21747,-0.063385,-0.28494,-0.25182,0.020324,-0.27049,-0.11246,-0.51371,-0.024644,-0.35865,0.11745,0.077441,0.46818,0.026927,0.17427,-0.16591,0.41656,0.23983,0.69289,0.15349,-0.35672,0.18533,-0.102,-0.040844,0.5382,-0.063653,-0.063282,0.14875,-0.22871,0.38592,0.23966,0.17879,-0.29741,0.057381,-0.08624,0.056188,0.21813,-0.33534,0.15126,0.17558,-0.079925,0.058684,0.1476,0.38739,0.39192,-0.1547,0.34806,0.25434))
  def s60 = null.asInstanceOf[MLVector]
  def complete = Vectors.dense(Array(0.23304,-0.074788,0.29624,0.096318,-0.15366,-0.081066,-0.1,-0.64366,0.12991,-0.30343,-0.19224,-0.23397,0.16922,-0.2818,-0.27637,0.23522,-0.58547,-0.37945,0.41105,0.048349,0.38997,-0.38357,-0.52656,-0.10501,-0.46247,-0.42622,-0.23841,-0.032405,0.29113,-0.07118,-0.20217,0.11945,-0.17249,0.41642,-0.25618,-0.10227,0.023907,0.092743,0.059751,0.045767,0.11224,0.44502,-0.17132,0.23186,-0.28899,0.29495,-0.060292,0.3283,-0.23846,0.36486,-0.17716,-0.18809,-0.012534,-0.43692,-0.25686,-0.16816,-0.19818,-0.69787,0.034696,0.35806,-0.34735,0.057916,0.27991,-0.17186,0.10991,0.047067,-0.055983,-0.35317,0.30396,0.21611,-0.043372,0.1738,0.73158,0.39425,-0.002794,0.14016,0.10845,0.22975,-0.21043,0.17626,-0.36575,0.01864,0.13954,0.31626,-0.13708,0.47942,0.011703,0.34331,-0.0085412,-0.084038,-0.18899,-0.13464,0.35422,-0.43829,-0.036669,-0.33574,0.43104,-0.12413,0.22534,-0.0029775))
  def refractory = Vectors.dense(Array(0.28708,-0.52751,-0.1612,0.034331,-0.14965,0.52422,0.20761,0.0070411,0.19256,-0.41084,-0.24766,0.53993,-0.060843,0.20841,0.020509,0.57771,-0.52669,-0.071854,0.062507,0.083874,0.69332,0.74085,-0.77908,0.36159,0.30274,-0.83969,-0.25672,0.20371,0.014842,0.12771,-0.095119,0.012355,0.053999,0.14689,-0.14204,0.27628,0.2136,-0.067448,0.2972,0.028619,0.59673,0.3362,-0.78083,0.088214,-0.011647,0.68249,-0.134,0.02151,0.52833,-0.021462,0.307,-0.70954,0.10991,-0.10026,-0.27075,-0.022593,0.44757,-0.06294,-0.1723,-0.6423,-0.26328,-0.060637,-0.36581,0.16859,0.24772,-0.048604,0.52916,-0.32581,0.53808,0.26885,0.54346,0.0131,0.10966,0.56929,0.029774,-0.15553,0.32518,0.39793,-0.15508,0.0010135,-0.0080348,0.109,0.21928,0.058482,-0.27347,-0.0052997,-0.022375,0.022396,-0.16869,-0.46733,-0.25654,0.018978,0.29035,-0.59081,-0.36313,-0.09124,0.90658,-0.45752,-0.46225,-0.23969))
  def who = Vectors.dense(Array(0.15512,-0.24276,-0.19574,0.47535,-0.14474,0.22776,-0.11703,-0.19266,-0.012444,-0.043645,-0.28549,0.32987,0.035883,0.042981,-0.016845,0.30784,-0.18068,-0.24299,0.33762,-0.090336,0.3202,0.34116,-0.56588,0.062536,-0.35007,-0.56125,-0.27393,-0.19183,-0.0026922,0.016104,0.26844,0.13915,0.42234,0.13487,0.28681,-0.010999,0.12533,-0.081229,0.53477,-0.34282,0.76882,0.15233,-0.23083,0.17981,-0.66831,-0.18541,-0.057142,0.3012,0.57819,0.32517,-0.6517,-0.52353,0.05418,-0.24993,-0.44822,-0.24443,-0.1783,-0.37138,-0.1991,-0.26582,-0.18682,-0.33778,-0.29017,0.034561,0.089646,0.043851,0.18262,-0.19753,0.21285,0.037469,0.35497,0.24772,0.16343,-0.25384,0.067155,0.12369,0.41476,-0.27874,-0.23693,-0.17288,-0.0054305,0.76162,-0.027089,0.24523,-0.33559,0.1904,0.16638,0.070404,-0.24048,-0.45892,0.17155,0.4346,0.59328,-0.41966,-0.13822,-0.37983,0.059102,0.37124,0.045632,-0.42234))
  def occurs = Vectors.dense(Array(0.54747,0.24849,-0.18315,0.12936,-0.42793,-0.18469,0.18607,-0.10599,-0.20368,-0.08413,-0.28546,-0.25994,0.46628,-0.15149,-0.27116,0.32024,-0.16653,-0.14821,-0.32908,-0.32919,0.49727,0.084675,-0.14171,-0.092672,0.12172,0.083903,-0.44752,-0.36212,-0.19572,-0.16669,-0.14016,-0.23533,0.11195,0.28371,0.20766,0.51171,0.047534,0.46854,0.17772,0.045963,0.088262,0.18269,-0.31905,0.029367,0.32481,0.35522,-0.26757,0.049961,0.27387,0.24281,0.47583,-0.26779,-0.18501,0.42725,0.027796,-0.25939,0.18182,-0.31387,0.13975,-0.59172,0.31881,0.063477,0.26436,-0.40658,0.096046,0.014891,-0.20909,0.02568,0.091384,-0.13507,0.26433,-0.1859,0.34472,-0.14728,0.10906,0.14938,-0.12654,-0.09511,0.09927,-0.32503,0.17928,-0.070032,0.3848,0.59499,-0.034506,0.23587,-0.28138,0.25266,-0.21493,-0.18492,0.046548,-0.24625,0.13078,-0.24383,-0.40912,0.49373,0.47358,0.038797,0.12379,-0.16145))
  def newly = Vectors.dense(Array(0.45664,0.055474,-0.33908,-0.19019,-0.061351,0.069885,-0.25642,-0.075072,0.037981,-0.0060889,-0.22825,0.20604,-0.17997,-0.045198,-0.29757,-0.13944,-0.30161,0.035201,0.40461,0.32881,0.074147,0.24365,0.14564,0.13487,-0.43105,-0.55567,0.2349,-0.093994,-0.068613,0.40585,-0.023033,0.0065785,-0.028844,-0.24533,0.40734,0.084838,-0.024445,0.0021085,0.23154,0.50632,-0.0043001,0.44791,-0.27191,-0.084225,-0.35188,0.15807,0.033601,0.21587,0.20529,0.40314,-0.26104,-0.066106,0.33208,0.41966,-0.52885,-0.21982,-0.36279,0.06581,0.01635,-0.061705,-0.16643,-0.41948,-0.074999,0.074801,0.3277,0.1106,-0.57578,-0.32954,0.15807,-0.036941,0.31191,-0.0026537,-0.059497,0.0095698,0.0081425,-0.11583,0.25597,0.36521,-0.50652,-0.30982,-0.010554,0.2685,0.096101,0.27484,-0.684,0.14692,-0.029616,-0.053141,-0.29174,-0.28059,-0.1284,-0.0034048,0.18089,-0.53837,-0.23456,0.0096147,0.28346,0.14237,-0.033155,-0.37347))
  def disease = Vectors.dense(Array(0.11521,-0.21735,-0.13704,-0.040108,-0.32139,0.014313,-0.21101,0.0090274,-0.32274,-0.17524,-0.17175,0.058684,-0.029011,-0.049105,-0.25091,0.39186,0.079257,0.4849,0.13247,-0.32035,0.64175,0.3487,-0.6451,0.41998,-0.40769,-0.52616,0.065343,0.11246,-0.059057,-0.079505,-0.054485,0.1999,-0.29438,-0.19132,0.23937,0.02666,-0.25317,0.68788,0.1376,-0.49124,0.49934,0.36735,-0.43614,0.097557,0.27194,-0.1473,0.037945,0.11958,0.38716,0.49877,0.07636,-0.68197,-0.14351,0.23513,-0.49716,0.094947,-0.12604,-0.3629,0.081204,-0.23983,0.19595,-0.35203,-0.016846,-0.42281,-0.28272,0.44006,0.1774,-0.27788,0.32864,-0.38042,0.29506,0.18827,0.15067,-0.2697,0.12153,-0.079332,-0.27059,0.33296,0.098723,0.36524,-0.37557,0.80346,0.30977,0.0050491,-0.34222,0.13646,0.65412,-0.030982,-0.27635,-0.097817,-0.54893,-0.1766,0.44388,0.12249,0.19447,0.1294,0.61056,-0.56215,-0.3538,0.15261))
  def by = Vectors.dense(Array(0.27251,0.23638,-0.12837,-0.34286,-0.1812,0.08346,-0.069599,-0.37819,-0.11436,0.092049,-0.3014,-0.29591,0.014156,-0.20995,0.01105,-0.14946,-0.094188,0.071186,0.069193,0.035132,-0.047064,-0.043489,-0.061027,-0.013883,-0.014059,-0.16522,0.37326,-0.085426,-0.090877,0.13686,-0.035045,0.25311,0.15397,0.12627,0.29919,0.019224,0.13436,-0.085935,0.3425,0.58861,0.085486,0.49495,-0.121,0.11854,-0.040894,0.36695,-0.1089,0.33335,-0.0093519,0.32247,-0.061617,0.20027,-0.18576,0.11093,-0.43336,-0.095056,-0.24595,-0.09812,0.33052,-0.22727,0.28109,0.16028,0.22456,-0.039691,-0.21149,-0.041967,-0.16352,0.10789,0.1804,-0.37426,0.28589,-0.25412,0.04122,0.263,0.037668,-0.15115,0.29695,-0.041286,-0.23225,0.029244,-0.060748,0.25049,-0.09159,0.047425,-0.21138,0.23516,0.043903,0.10949,-0.53858,-0.122,-0.21365,-0.024293,0.044459,-0.27863,0.16874,0.20032,0.10188,-0.13624,0.22282,0.016627))
  def snew = Vectors.dense(Array(0.26288,-0.12404,0.018343,-0.37006,-0.27909,0.38451,-0.050084,-0.17072,0.0033563,-0.19608,0.10242,-0.071907,-0.18062,-0.056864,0.0064816,-0.31506,-0.25427,-0.086812,0.070023,0.034602,-0.030364,0.37915,-0.18227,0.30662,-0.30012,-0.61499,0.095673,-0.36836,0.33393,-0.037067,0.11716,0.07724,-0.058698,-0.28714,0.092831,-0.17701,-0.46724,-0.29452,-0.051503,-0.063011,-0.15885,0.30497,-0.60186,0.3376,-0.085542,-0.10719,-0.015339,0.017485,-0.23655,0.41856,-0.045273,-0.1463,0.18054,0.54265,0.017355,-0.35702,-0.21257,-0.0443,0.41563,0.1695,-0.21499,-0.46728,0.087886,0.41506,0.13469,0.04783,-0.54494,-0.50194,0.29608,-0.073146,0.52979,-0.0028467,-0.085793,0.1624,0.13643,0.090154,0.068636,0.062155,-0.26632,-0.43489,-0.12301,0.11865,0.35096,0.064287,-0.35161,0.018362,-0.013963,-0.17685,-0.14572,0.0066273,-0.34767,-0.21378,0.34624,-0.31063,-0.05139,-0.074595,0.41662,-0.18017,-0.32808,-0.30149))
  def will = Vectors.dense(Array(0.23278,-0.27809,-0.13142,-0.49524,-0.3282,0.095322,-0.1186,-0.45642,0.34988,0.25227,-0.004763,0.15498,0.10674,-0.046416,-0.039472,-0.38584,-0.20275,-0.12352,-0.039133,-0.2339,0.036352,0.23049,-0.24573,0.14856,-0.40246,-0.43683,0.2307,-0.31967,0.2161,-0.23285,0.1299,0.25056,0.2717,0.04006,0.034381,0.14645,-0.45997,0.17567,-0.024016,0.14599,-0.071281,0.22622,-0.5889,-0.035013,-0.062184,-0.2855,-0.12413,-0.050958,0.15137,0.11807,-0.28461,-0.35428,-0.24576,0.3485,-0.044722,-0.0042596,-0.40047,-0.16765,0.084001,-0.20905,-0.3136,-0.23309,0.11802,0.072747,0.12717,-0.14834,-0.19076,-0.51357,0.37144,-0.39525,0.50051,0.23776,0.34864,0.075427,-0.034491,0.26516,-0.0085888,-0.30448,0.1399,-0.084743,-0.25364,0.29387,0.066608,-0.26371,-0.36042,-0.083052,-0.045398,-0.0062208,-0.28586,0.062867,0.069547,-0.12725,0.71925,-0.51497,0.038394,-0.25033,0.23566,-0.018081,0.16531,-0.026824))
  def specific = Vectors.dense(Array(0.55483,0.20484,-0.25404,-0.51225,-0.30208,-0.065327,-0.22667,-0.095314,-0.094835,0.13033,0.18174,0.043601,0.14291,-0.065004,-0.13849,-0.11629,-0.22854,0.16024,0.24119,0.33425,-0.026278,0.18329,-7.4078E-4,0.4231,0.23561,-0.28698,-0.1868,-0.24944,0.069264,-0.047321,-0.26887,-4.3498E-4,0.16342,-0.17659,0.25986,0.19074,-0.21367,0.21426,0.021352,0.15915,-0.071952,0.090945,-0.1779,0.4807,0.15642,-0.022088,-0.32953,0.10493,0.080138,0.18583,-0.08855,-0.067339,-0.062437,0.16691,-0.06266,-0.22173,-0.21845,-0.35606,0.20066,-0.23198,0.21272,-0.45903,0.54616,0.37766,0.039781,-0.14134,-0.16998,0.11818,0.32252,-0.40303,0.32871,-0.15397,0.34032,0.39153,0.12426,-0.22052,0.091645,0.039679,-0.23837,0.06308,-0.41342,0.19372,-0.024949,0.0084053,-0.28488,-0.040433,0.2311,0.1648,-0.068863,-0.0070206,-0.17372,-0.10285,-0.045557,-0.28914,0.18292,-0.040281,0.39379,-0.089137,-0.19159,-0.028948))
  def moment = Vectors.dense(Array(0.30637,-0.066549,-0.10639,-0.24166,-0.47032,-0.29306,0.078021,-0.40332,0.14126,-0.034329,0.18072,-0.2708,0.19384,-0.23182,0.04464,0.17473,0.093026,0.0050375,-0.29941,-0.64958,-0.094012,-0.1851,0.017928,-0.13593,-0.79602,-0.46025,0.087593,0.014304,-0.037538,-0.12346,0.30226,-0.10717,0.2817,-0.22058,-0.43945,0.15475,-0.12712,-0.5185,0.27756,-0.13486,-0.043216,0.055096,0.11226,0.14022,0.19123,-0.14714,-0.11615,-0.28457,0.19457,-0.0033932,0.030127,0.15654,-0.36077,0.55275,-0.18907,-0.32274,-0.24862,-0.47624,-0.24936,-0.66856,-0.096133,0.33548,0.12427,0.16595,0.49202,-0.19527,0.35028,-0.23626,0.57599,-0.39832,-0.13366,-0.3905,0.064504,0.21488,-0.76044,0.033175,-0.11584,-0.59376,-0.25994,-0.28317,-0.3713,0.42056,0.10753,0.86752,-0.013234,0.22204,0.33107,0.33862,-0.055366,-0.0957,0.09772,-0.14767,0.45227,0.067937,0.25901,0.16774,0.092943,-0.76032,0.31244,-0.39599))
  def swith = Vectors.dense(Array(0.44454,0.034366,-0.24257,0.023439,-0.08856,0.1063,0.1335,0.096406,-0.11023,-0.2579,-0.26832,0.093423,-0.038335,-0.045344,-0.22839,0.072282,-0.078924,0.10945,0.21251,-0.035019,-0.013073,0.15062,-0.19383,0.082107,-0.12271,-0.44453,0.14497,-0.06039,-0.21955,0.07474,0.069807,0.11609,0.1531,0.12021,0.32628,0.026877,-0.066175,-0.11805,0.30506,0.23725,0.11885,0.20406,-0.16971,-0.048388,-0.016083,0.22147,-0.065418,0.33653,-0.0033229,0.27858,0.049657,-0.23734,0.14405,-0.21247,-0.27391,-0.16374,0.014069,-0.35293,0.026423,-0.36307,0.15179,-0.11976,0.079666,0.04553,-0.14235,0.25138,0.12025,-0.080351,0.39901,-0.12293,0.29837,0.22535,-0.035029,0.031023,0.034064,-0.042879,0.13374,0.068515,-0.12386,-0.040226,-0.17392,0.25782,-0.20224,0.073739,-0.20833,0.015607,-0.067226,0.14861,-0.20616,0.076304,0.0021354,0.11098,0.13043,-0.080894,-0.048652,0.12938,0.12651,-0.11992,-0.11529,-0.28708))
  def still = Vectors.dense(Array(-0.040268,-0.089485,0.051158,0.16124,-0.17044,-0.036638,-0.25139,-0.35676,0.099106,-0.1267,-0.19374,-0.063119,0.48196,-0.25788,-0.18264,0.096289,-0.26441,0.20189,0.2078,-0.35631,0.35868,0.028436,-0.36877,-0.016922,-0.088258,-0.060563,-0.20108,-0.31133,0.025672,-0.16034,-0.26191,-0.35483,-0.22808,-0.015632,0.04848,0.19384,0.0038863,0.07851,0.08706,-0.058809,0.078676,0.17161,-0.25902,-0.37785,0.018415,-0.033716,-0.41992,0.046823,0.050213,0.022404,0.010099,-0.24275,-0.31045,0.2634,-0.30941,0.14619,-0.099992,0.16241,0.23317,-0.4372,-0.2227,-0.42142,-0.0058565,-0.35737,0.15806,-0.4716,-0.26478,-0.29558,0.51615,-0.067024,0.65841,0.22776,-0.065179,0.33152,-0.13265,-0.12799,-0.016005,0.045425,0.2864,-0.2202,-0.12509,0.16319,-0.20305,0.23176,-0.37925,0.12277,0.37837,0.14219,-0.30842,0.2164,0.23529,0.25503,0.27131,-0.18967,-0.20415,-0.01982,0.40306,-0.17681,0.051746,0.04518))
  def salvage = Vectors.dense(Array(0.25109,-0.47485,-0.89861,-0.16895,-0.09775,0.083184,-0.078082,-0.15819,0.33303,0.069187,-0.51164,0.23797,0.30053,-0.17608,0.42516,0.47755,-0.33214,0.12555,0.088208,-0.43723,1.0547,0.8554,-0.73854,0.73195,-0.32003,-0.99644,-0.51244,0.39413,0.13637,-0.42664,-0.17633,0.15794,-0.19519,-0.18732,-0.23264,0.39854,0.16746,-0.30408,0.10443,-0.1323,0.27643,0.38039,-0.64167,-0.074387,-0.12427,-0.024408,0.3727,0.14098,-0.064005,-1.7397E-4,0.019572,-0.29618,-0.015014,0.10203,0.26935,-0.50955,-0.23671,-0.40698,-0.36724,0.15715,-0.036366,0.49123,-0.22113,0.20169,0.55253,-0.51452,0.23969,-0.19937,0.085572,0.015374,0.68596,0.6878,0.22899,0.02388,0.38677,0.53552,0.63664,0.38642,-0.70774,0.17121,-0.48911,0.14522,-0.34756,-0.14871,-0.09257,0.46968,0.31268,0.85306,-0.27957,-0.36904,0.04016,0.012661,0.22699,-0.5006,-0.31188,0.28032,0.87962,0.44163,0.47648,0.17884))
  def hodgkin = Vectors.dense(Array(-0.37821,0.13936,-0.20781,0.071454,-1.2498,0.56848,-0.10783,0.03181,-0.11191,-0.42203,-0.2541,0.81784,0.35202,-0.088484,-0.1668,0.49125,-0.19567,0.36644,0.49992,-0.96398,0.9046,0.17593,-0.49626,1.0266,-0.50613,-0.85132,-0.1017,0.54487,-0.64896,0.39835,0.0040417,-0.67304,-0.1393,-0.41727,0.033122,-0.14589,-0.070747,0.38124,0.26297,-0.050909,0.11753,0.88863,-0.39309,0.42385,-0.41397,-0.50016,-0.244,0.092919,0.65109,-0.12426,0.015495,-0.77462,0.63423,0.041331,-0.09712,-0.39071,-0.21208,-0.60199,-0.4246,-1.0448,-0.042975,0.12957,-0.17183,0.28364,0.2695,0.22198,0.093417,0.2549,0.51386,0.15518,0.30598,-0.59604,-0.63357,0.010668,0.94122,0.23478,0.25312,0.10144,0.032992,0.664,-0.28381,0.083321,0.38498,-0.096191,0.44804,0.30254,0.27955,-0.15481,-0.75696,-0.41616,-0.56261,0.44154,0.34427,-0.36034,-0.063054,0.057719,0.81058,-0.21122,-0.021887,-0.066286))
  def adults = Vectors.dense(Array(0.022419,-0.47442,-0.34723,0.055669,0.35708,0.28184,0.12684,-4.5678E-4,-0.10676,-0.15279,-0.34867,0.22341,0.27543,-0.23765,-0.5774,0.29969,-0.1718,-0.31387,0.21377,-0.38791,0.10145,0.10664,-0.56826,0.25537,-0.1013,-0.3921,-0.156,-0.23748,-0.38673,0.064821,-0.10398,0.46524,0.021099,-0.3757,0.40105,0.36096,-0.40085,0.39623,0.46971,-0.55399,0.4996,0.44415,0.073266,0.25343,-0.2728,0.088532,-0.25768,0.26696,0.61056,-0.23317,-0.22242,-0.37449,-0.040968,0.03975,-0.52145,-0.16262,0.21713,-0.23816,-0.042669,-0.4901,0.014344,-0.58699,-0.22308,-0.046272,-0.23344,0.079961,-0.13098,0.085077,0.36775,-0.31147,0.6066,-0.12185,0.011103,0.02064,-0.073522,-0.030499,0.23583,-0.28009,-0.47161,-0.0037684,-0.14433,0.36227,0.58426,0.2835,-0.63986,-0.22479,0.22137,-0.20642,-0.31979,0.040123,0.050157,-0.15927,0.13092,-0.11473,-0.184,-0.12198,-0.16443,0.54679,-0.059837,-0.48698))
  def significant = Vectors.dense(Array(0.4618,0.074904,0.011292,-0.19867,-0.40401,-0.21293,0.037021,-0.039375,-0.18821,-0.0085867,-0.091382,0.14331,0.034047,0.10309,-0.29613,-0.13212,-0.17256,0.071567,-0.3365,-0.18537,0.081067,0.32275,-0.25007,0.42036,-0.34273,0.17888,-0.36718,-0.50712,0.016653,-0.072848,0.082101,0.068915,-0.25317,0.011447,-0.42728,0.16963,-0.15301,-0.074843,0.15736,-0.29758,0.19562,0.27169,0.019834,-0.20616,-0.071073,-0.16381,-0.35999,0.30521,-0.42048,0.17932,-0.42516,-0.096213,-0.63003,-0.23958,-0.29133,-0.21872,-0.013534,-0.5657,0.22981,-0.36333,0.039642,-0.44821,0.044953,0.32253,-0.089752,-0.083156,0.43398,-0.12868,0.5295,0.2666,-0.24455,-0.060472,0.017529,0.31261,-0.14109,-0.44333,0.4117,-0.10334,-0.17304,-0.11076,0.013921,0.056018,0.044241,0.15407,0.24031,-0.081317,0.36479,0.41756,-0.27153,0.30676,0.031386,-0.28252,-0.098087,0.073874,-0.0564,-0.026412,0.18095,-0.050113,-0.22602,-0.011248))
  def tested = Vectors.dense(Array(0.2489,0.47743,-0.16019,-0.21701,0.11478,0.11263,0.039347,0.029097,0.24219,-0.22407,-0.30334,0.029034,0.19692,-0.050635,-0.23546,0.07553,-0.34191,0.1561,-0.40129,0.2419,-0.081138,-0.18141,0.017574,-0.062959,-0.087685,0.098665,-0.68558,-0.38525,0.13507,0.13528,-0.077003,0.34971,0.29774,-0.23138,0.059861,-0.37734,-0.44637,-0.3349,-0.19143,0.13283,-0.056558,0.35779,-0.50794,-0.079336,0.013668,-0.037205,-0.085236,0.058662,0.2657,0.015147,-0.085971,0.095763,0.18935,0.38304,-0.56888,-0.29382,-0.078631,-0.46923,0.19896,-0.5066,0.22388,-0.22947,0.017123,0.37255,0.013363,0.39865,0.058457,-0.079627,0.46071,-0.38451,0.26334,0.04449,0.27898,-0.0083132,0.2323,-0.10643,0.095672,-0.030479,-0.69596,-0.11103,0.058047,0.0064456,-0.19794,-0.041648,-0.35331,0.13398,0.068592,-0.20614,-0.26974,0.061769,-0.071712,0.19513,-0.10403,-0.16169,0.43111,0.3028,0.18297,0.14007,-0.097753,-0.37804))
  def s2 = null.asInstanceOf[MLVector]
  def failing = Vectors.dense(Array(0.27301,-0.53079,0.35137,-0.38682,-0.84731,-0.18293,0.15703,-0.39963,0.27575,-0.27288,-0.17082,0.084539,-0.15564,-0.10473,0.040677,-0.016018,-0.60799,0.096488,0.15836,-0.13427,0.4201,0.18461,-0.080755,0.051774,0.15459,-0.49359,0.12927,0.13593,0.45763,-0.23321,-0.13967,0.14471,-0.048017,-0.082785,-0.013618,-0.15704,-0.33858,-0.03835,0.23252,-0.17354,0.016613,0.22061,-0.38374,0.14809,-0.056817,-0.32402,0.25928,0.17808,0.44568,0.32156,-0.15416,0.0058108,-0.58798,0.034495,-0.46757,-0.2341,0.42934,-0.15708,-0.17206,-0.53896,-0.35076,-0.13057,0.18175,-0.0039687,-0.041478,-0.26293,0.1194,-0.52528,0.37377,0.38728,0.62026,0.19949,0.13308,-0.050135,0.15869,0.13108,0.42385,0.074441,-0.35604,-0.054757,-0.18868,0.38339,0.17144,-0.091984,-0.41431,0.40611,-0.0791,-0.18613,-0.037639,0.10353,0.36762,0.50694,0.22986,-0.3665,0.13888,0.13274,0.67106,0.42979,0.37461,-0.39489))
  def radiological = Vectors.dense(Array(-0.32769,-0.121,0.14288,-0.031701,-0.13802,0.33237,-0.35259,-0.80851,0.10237,-0.17334,0.59221,0.37488,0.50619,0.059851,-0.0037633,0.17868,0.57552,0.24356,0.010021,0.12402,0.71018,-0.0091629,-0.40217,0.25328,-0.2695,-0.46363,-0.24753,-0.14876,-0.52427,0.38167,0.5113,0.18531,-0.11341,0.026752,-0.14117,0.11395,-0.3785,-0.045545,-0.20084,-0.23604,0.01905,-0.35006,-0.33194,-0.18891,-0.57084,0.171,-0.47105,0.47754,-0.42375,0.54809,-0.34961,-0.66068,-0.2048,-0.28083,-0.33975,-0.22246,-0.57583,-0.82499,-0.31617,-0.018411,-0.20349,0.14109,0.034586,0.1592,-0.019897,0.049751,0.13997,0.22979,0.45047,-0.20309,0.40634,0.36188,-0.10085,0.14993,0.069283,0.24636,0.26655,-0.16844,0.010384,0.25318,-0.24956,0.67006,0.23487,0.59405,-0.59048,-0.036635,0.29195,-0.13701,-0.49574,0.25695,-0.1364,-0.35122,0.53132,-0.081189,-0.01026,-0.5276,0.42195,-0.35908,0.29793,-0.099896))
  def could = Vectors.dense(Array(0.15817,0.13238,-0.047794,-0.42138,-0.0052495,-0.17824,-0.019388,-0.262,0.048804,0.32533,-0.10028,-0.045762,-0.082788,-0.29953,0.04428,-0.36206,-0.24431,0.14817,0.035804,0.16485,0.03568,0.14306,-0.26699,0.25762,-0.19431,-0.23246,0.29311,-0.50858,0.24485,0.1214,-0.20892,0.23722,0.27778,0.22433,-0.0568,0.14908,-0.34646,0.019009,-0.094249,0.14543,0.020029,0.37844,-0.5871,-0.059646,0.12409,0.027329,-0.13125,0.075291,-0.0020938,0.25677,-0.26345,-0.075166,-0.22123,0.53157,-0.38311,-0.11461,-0.35885,-0.094538,-0.03383,-0.30229,0.096306,-0.23686,-0.1296,0.38404,-0.10574,-0.010366,0.024912,-0.12313,0.34181,-0.18034,0.17262,0.13083,0.2284,0.20293,-0.31531,-0.016332,0.1901,-0.094927,0.089548,0.02859,-0.043087,0.2644,0.049403,0.15642,-0.065631,0.052719,-0.13456,0.21559,-0.25511,0.025194,-0.037663,0.16826,0.2979,-0.62447,0.14206,0.044936,0.17073,-0.061041,0.21412,0.073843))
  def approach = Vectors.dense(Array(0.094425,-0.33472,-0.45364,-0.51703,-0.3777,0.33401,-0.03638,-0.29414,0.34471,-0.27026,-0.098547,-0.0043662,-0.18154,0.13131,0.047596,-0.20197,0.057586,-0.48015,0.0050605,-0.50469,-0.19456,0.014666,-0.661,0.098368,-0.32529,-0.61546,0.074855,-0.062365,-0.049932,-0.45423,0.1974,0.35214,0.084211,0.047381,-0.056334,0.035549,-0.043505,0.34994,-0.1367,0.13769,-0.08519,0.39306,-0.26194,0.17579,0.30498,-0.036233,0.091934,0.071712,-0.11007,0.37313,0.32198,-0.26659,0.39633,0.19248,0.13301,-0.485,-0.28951,-0.10826,0.33598,-0.27764,-0.45837,-0.18174,0.14987,0.47826,-0.29568,-0.15554,-0.21781,0.19062,0.31052,-0.19315,0.37782,0.10388,0.26947,-0.036279,0.019446,0.059411,0.36739,-0.13113,0.03938,-0.26396,-0.069403,0.27253,-0.27266,0.57966,-0.068428,0.088046,0.46867,0.061459,-0.40802,-0.27402,-4.6628E-4,0.037955,0.11479,-0.64288,0.29363,-0.23561,0.25754,-0.54014,0.26431,0.13493))
  def thus = Vectors.dense(Array(0.21126,-0.15496,-0.27812,-0.29761,-0.071117,-0.011722,0.097424,-0.23753,-0.10643,0.12932,0.092477,0.028781,0.026641,-0.32249,0.0016201,-0.11998,-0.28143,-0.19828,-0.028796,-0.069033,0.090862,0.12495,-0.084092,0.088669,-0.031525,-0.13696,0.13157,-0.30868,0.17877,-0.013721,-0.20021,-0.049021,-0.0077309,0.081061,0.11387,0.17053,-0.19417,0.20054,0.041594,-0.013699,-0.28502,0.24214,-0.44216,-0.027262,0.31461,0.12598,-0.1965,0.041179,-0.14204,0.16298,0.043577,-0.16763,-0.20433,0.41582,-0.2103,-0.031354,-0.19636,-0.034295,-0.093606,-0.18845,-0.16345,-0.3392,0.0095627,0.30783,0.05118,-0.24849,-0.27273,-0.13674,0.44227,-0.23612,0.14539,0.15009,0.30751,-0.043125,-0.030042,0.0051172,0.20985,-0.18277,-0.14311,0.012818,-0.11595,0.097364,0.021862,0.22343,-0.087965,0.075653,-0.030814,0.1432,-0.1012,0.07451,0.048109,0.011892,0.22591,-0.40197,0.12355,0.10692,0.26441,-0.24066,0.12611,0.17901))
  def celecoxib = Vectors.dense(Array(0.62598,-0.3514,0.037767,-0.163,-0.051546,0.31951,0.38552,-0.40861,-0.49449,0.10057,0.26127,0.8033,-0.31017,-0.078463,0.22611,-0.14082,-0.55144,0.36542,-1.0873,-0.069207,0.026506,0.24517,-0.375,-0.081509,-0.57048,-0.79742,-0.15488,-0.57999,0.038501,-0.12931,-0.33897,-0.57026,-0.17884,0.13764,-0.035019,0.11942,0.45681,-0.13142,-0.0098899,0.59256,-0.29013,0.55279,0.32784,-0.060922,-0.40979,0.11948,0.0083295,0.35368,-0.36894,0.18138,0.050547,-0.33915,-0.084141,-0.10919,-0.038601,-0.065991,-0.56021,-0.12533,0.086432,-0.5391,0.16261,0.16223,-0.66924,0.88195,-0.078339,0.32677,0.81323,-0.088785,0.50512,-0.6589,0.58273,0.27605,0.32864,0.21152,0.42118,-0.1849,0.24805,-0.34512,0.18942,0.47268,0.048003,0.22118,-0.024218,0.11894,-0.71715,0.094272,0.43152,0.4685,-0.1409,0.070448,-0.31872,0.3547,0.30162,-0.46753,-0.56176,1.0635,0.080072,-0.16044,0.19955,-0.23156))
  def tumors = Vectors.dense(Array(-0.073554,-0.28925,-0.35793,-0.60415,-0.55798,0.077449,-0.32228,0.021085,-0.16479,-0.0076156,-0.42315,0.33744,0.32754,0.15993,0.07287,-0.046506,0.10552,0.53075,0.1342,-0.41311,0.30479,-0.37544,-0.092964,0.24831,0.015679,-0.41798,0.14605,0.2462,-0.16526,0.81485,0.048022,-0.43504,0.21168,-0.12429,-0.82776,0.24147,-0.04109,0.59642,0.31446,-0.3565,0.22015,0.56202,-0.31168,0.3563,-0.5435,0.054147,-0.39654,0.43127,0.049444,-0.37068,-0.058648,-0.72917,0.39711,-0.12525,0.005225,-0.14091,-0.27169,-0.11007,0.10956,-0.66555,-0.18768,0.099005,-0.22342,0.56307,0.32788,0.41677,0.14157,0.52877,0.64322,0.153,0.31713,0.24056,0.40801,-0.16177,0.78061,0.16641,0.50533,-0.15277,0.112,0.11528,-0.15894,0.3863,0.42515,0.1036,-0.43966,0.62404,-0.05184,0.61164,-0.20985,0.24754,-0.24914,0.46577,0.40112,-0.3229,0.097778,0.017765,0.74437,-0.26158,0.019212,0.30324))
  def under = Vectors.dense(Array(0.66004,-0.26113,-0.28944,-0.090768,-0.12403,0.25448,0.23872,-0.032781,0.16657,-0.61529,-0.2687,-0.26902,-4.7811E-5,-0.56773,-0.15342,-0.14938,0.29961,0.14365,-0.12413,-0.20603,0.014411,-0.26585,-0.0063229,-0.030665,-0.054871,-0.16832,-0.19236,-0.26037,0.14455,0.11932,-0.16996,-0.12431,0.16182,0.21181,0.093515,0.058022,0.10778,-0.43546,0.11824,0.29464,0.22459,-0.19666,-0.346,-0.34511,0.093468,0.35551,-0.27311,0.16223,0.22942,0.087289,-0.052581,0.057508,0.20372,0.26241,-0.30461,0.022298,-0.069412,0.05502,0.025324,-0.26944,0.1809,0.10677,0.29423,-0.22598,-0.34112,-0.20871,-0.19372,0.026692,0.22384,-0.42305,0.58622,0.2528,0.37257,-0.26808,0.18147,-0.64175,0.39528,-0.41013,-0.04386,0.31832,-0.16606,0.25608,-0.034446,0.0093589,-0.02635,0.23117,0.15706,-0.11749,-0.30106,0.19692,-0.085635,0.023976,0.22439,-0.34187,-0.044042,0.022782,0.074999,-0.35983,0.44399,-0.094326))
  def target = Vectors.dense(Array(0.51307,-0.36322,-0.35738,-0.66991,-0.087909,0.095344,-0.2691,0.14927,0.012891,0.030884,-0.096069,-0.14631,0.17385,0.04894,-0.095518,-0.36888,-0.52321,-0.087692,0.10532,-0.063022,0.029953,0.27139,-0.24162,0.0015196,0.18609,-0.1685,0.40307,-0.53951,0.45934,-0.077854,-0.33391,-0.35196,-0.025104,-0.74814,0.3981,0.13945,0.053497,0.20397,-0.16628,-0.017087,-0.25538,0.13429,-0.64975,0.32247,0.28904,0.2094,-0.1619,-0.13216,-0.13597,-0.14862,-0.23408,-0.37237,0.20859,0.37802,-0.10015,0.054753,-0.087305,-0.07014,0.099103,-0.45907,0.17746,0.01913,0.39303,0.36046,0.19142,-0.030756,-0.016583,0.16201,0.47568,-0.19018,0.26173,0.043733,0.31591,0.27306,-0.21452,0.14301,0.2293,-0.22308,-0.55027,0.12022,-0.11849,0.48781,-0.033561,0.41156,-0.17798,0.11985,0.55362,0.34019,-0.048216,0.12249,-0.46531,0.015834,0.2923,-0.34144,0.21801,0.38337,0.51036,-0.064721,0.069855,-0.053663))
  def followed = Vectors.dense(Array(0.3739,0.29279,-0.32329,0.060505,-0.37549,0.20418,0.087299,-0.31173,0.098131,-0.16864,-0.31069,-0.37126,0.033417,0.18923,-0.22106,0.27969,-0.11416,0.10331,0.016457,-0.4137,0.13011,-0.11422,-0.52356,-0.27196,-0.14641,-0.52929,-0.22429,-0.13088,0.16605,0.011875,0.14285,0.13331,0.22477,0.32428,0.16183,-0.2473,0.28549,0.098395,-0.11045,0.4281,0.42982,0.37442,-0.25526,0.13958,-0.15983,0.49642,-0.035278,0.34716,0.087062,0.19997,0.33485,0.26823,0.13675,-0.042138,-0.08839,0.073344,0.058332,-0.56652,0.39627,-0.13126,0.35189,0.099065,0.29562,-0.034902,0.22812,0.19682,0.16009,-0.092547,0.089351,-0.33365,0.36796,-0.10938,0.27259,0.2768,0.1643,0.050229,0.084921,-0.096367,-0.4057,-0.079023,0.045793,-0.14855,0.11413,0.25759,-0.012178,0.36296,-0.12668,0.32817,-0.61466,-0.19219,-0.39548,-0.18119,0.30863,-0.34781,-0.014602,0.15241,-0.10056,0.10614,0.1953,-0.30227))
  def an = Vectors.dense(Array(0.24858,0.16736,-0.42567,-0.31138,-0.2933,0.189,0.034214,-0.28454,0.078105,0.012441,-0.023555,-0.0689,-0.08862,-0.20176,0.13575,0.18426,-0.070177,-0.1429,-0.037018,-0.18211,-0.096909,0.19235,-0.1719,0.025909,-0.076785,-0.4211,0.21471,-0.031766,0.13446,0.072192,-0.044258,-0.13445,-0.022987,0.070265,0.20329,0.086557,-0.020081,-0.066136,0.3193,-0.090052,-0.15865,0.66413,-0.21277,-0.0023418,0.16597,0.2821,-0.12242,0.185,-0.071501,0.46245,0.11315,-0.22645,0.064081,0.36675,-0.21848,-0.11419,-0.053986,-0.31147,0.10797,-0.12014,-0.22509,-0.067777,0.10184,0.18753,0.032002,-0.1264,-0.26825,-0.24722,0.11346,-0.23909,-0.065855,0.26151,0.16375,-0.046874,0.10149,-0.44219,0.19911,-0.11909,-0.14868,-0.13177,0.051411,0.11529,0.053327,0.41478,-0.15053,-0.10924,0.19729,0.050609,-0.25422,-0.09061,-0.23665,-0.033637,0.086477,-0.12532,-0.008228,-0.049371,0.1965,-0.17568,0.073,-0.18691))
  def cell = Vectors.dense(Array(0.062008,0.32618,-0.64761,-0.15264,-0.25422,-0.030623,0.10245,-0.22011,-0.12209,-0.054423,-0.42562,0.42553,0.21512,-0.19723,0.16052,-0.25612,-0.087722,0.097191,-0.016187,0.052255,0.38552,0.47058,-0.047827,0.56384,-0.20863,-0.46047,0.2247,-0.28382,0.20368,-0.016863,-0.16118,-0.19129,0.14545,-0.413,0.14923,0.08573,0.027378,0.31873,0.47073,0.83368,0.020592,0.32303,-0.35301,0.3063,-0.093212,0.10178,-0.64544,0.42399,0.22035,-0.099249,-0.068524,-0.27049,-0.041655,0.042244,-0.66154,-0.42972,-0.046444,-0.46434,-0.042278,-0.67831,0.1474,-0.26971,0.37661,0.44777,0.57722,0.079954,-0.2803,-0.10059,0.55925,0.26065,0.51839,-0.32478,0.51553,-0.0063695,0.31998,-0.1728,-0.19784,0.11126,0.15005,0.48689,0.23575,-0.12357,0.038849,0.28849,-0.039905,0.089802,0.069825,0.52845,0.018142,0.38443,-0.1388,-0.12734,0.082307,0.18247,0.091766,0.049137,0.41383,0.20718,0.18784,0.54615))
  def autologous = Vectors.dense(Array(-0.51747,0.24009,-0.43987,-0.6095,-0.28757,-0.24623,0.1603,-0.053868,0.11356,-0.90255,-0.68014,0.58796,-0.069319,-0.26968,0.25846,-0.084076,0.24703,-0.31211,-0.072864,-0.60621,0.60825,0.26355,-0.60986,0.86947,-0.23435,-0.9656,-0.31284,-0.064036,0.2087,-0.061085,-0.25497,0.11245,0.20106,-0.28318,-0.057493,0.84805,0.32737,-0.096174,0.091456,-0.027116,0.20793,0.65398,-0.48303,0.091517,-0.63844,-0.090176,-0.060006,0.54031,0.23398,-0.025296,0.28209,0.30742,-0.013555,-0.0068362,-0.41292,-0.66415,-0.091685,-0.41535,-0.65065,-0.11413,0.027611,-0.24773,0.15578,0.24901,0.49865,-0.80354,-0.039538,0.0063672,0.57457,-0.18481,0.28826,-0.25585,0.36476,0.13744,0.41058,-0.24093,-0.082136,0.64576,-0.28978,0.52708,0.14669,0.43407,-0.76288,0.17713,-0.18155,0.20444,-0.38837,0.59088,0.14648,-0.14091,-0.13184,0.4264,0.79364,-0.47468,0.1053,0.053444,0.61395,0.58566,-0.22561,-0.20979))
  def be = Vectors.dense(Array(0.077216,-0.0036092,-0.25608,-0.093442,-0.10235,0.073273,-0.16402,-0.32555,0.056992,0.4404,-0.2126,-0.044858,0.093297,-0.31644,0.022839,-0.16414,-0.17032,0.028408,0.096768,-0.051733,0.18168,0.14582,-0.27846,0.23927,-0.045602,-0.25575,0.12735,-0.21929,-0.012146,0.29692,-0.11763,-0.023368,0.17213,0.058744,0.23825,0.32425,-0.10301,-0.04461,-0.12248,0.22281,0.16483,0.20367,-0.46326,-0.1053,0.30923,0.17798,0.032554,0.045488,3.4496E-5,0.30384,-0.048083,-0.24005,-0.21049,0.62778,-0.30817,-0.10883,-0.55764,0.16622,0.09869,-0.46031,0.011072,-0.21021,-0.21323,0.32804,-0.027289,-0.20677,-0.17994,0.085096,0.24077,-0.39564,0.12024,0.18575,0.20742,0.20596,-0.45536,-0.17074,0.22995,-0.041543,0.10255,-0.11855,-0.12875,0.45321,-0.047118,0.077773,-0.087582,0.18271,0.0083885,0.1572,-0.31279,-0.060202,0.067843,0.27249,0.27794,-0.69005,0.18601,0.028765,0.20733,0.037575,0.31895,0.052076))
  def transplantation = Vectors.dense(Array(-0.043014,-0.25288,-0.17177,-0.068717,-0.56384,0.30003,-0.099625,-0.56668,0.14883,-0.088355,-0.62758,0.35186,0.56392,0.10838,-0.0048209,-0.090301,0.49101,0.02132,-0.23292,-0.37504,0.71675,0.69189,-0.63043,0.70543,-0.3216,-0.88255,0.070942,0.33221,0.24613,-0.32085,-0.27836,-0.13712,-0.28374,-0.26375,0.055804,0.77206,-0.23704,0.25774,-0.12432,-0.46755,0.52729,0.31053,-0.49412,0.54792,-0.17608,-0.19116,-0.16397,0.70492,0.11778,-0.18461,0.2586,0.59512,-0.19708,0.54272,-0.42088,-0.5973,0.17195,-0.29914,-0.28935,-0.30885,0.0051222,-0.32416,0.15137,-0.022414,0.36641,-0.18473,0.32642,-0.28823,0.39747,-0.25801,0.55769,-0.35135,0.10351,-0.50854,0.19436,-0.46199,0.24316,0.39832,-0.68683,0.37608,-0.11538,0.53684,-0.41831,0.16441,-0.50421,0.11065,-0.19402,0.33,0.091966,-0.1649,-0.13727,0.55833,0.73697,-0.01538,-0.39013,0.067442,0.60334,0.2336,-0.38109,0.20738))
  def part = Vectors.dense(Array(0.1462,0.042889,-0.21345,-0.29468,-0.36444,-0.21147,-0.03924,-0.59182,0.0030502,0.015845,-0.087635,-0.063646,0.079444,-0.21792,0.042491,0.19885,-0.28385,-0.48287,-0.10998,-0.71715,-0.022186,0.22187,-0.095521,-0.24804,-0.1045,-0.48169,0.078222,-0.33662,0.032752,0.10149,-0.19299,-0.08886,0.052597,0.29025,0.2044,-0.10169,-0.019229,0.271,0.0050018,-0.032558,-0.089651,0.20261,-0.29606,0.22673,0.13363,0.038016,-0.24239,0.1778,0.14446,0.16889,-0.32051,-0.11056,0.17866,0.34185,0.017707,0.14229,-0.32463,-0.11875,0.24665,-0.16769,-0.078072,0.19265,-0.059559,0.13371,0.29713,-0.18211,-0.39696,-0.034114,0.093876,-0.36749,0.015869,-0.16627,0.13445,0.058983,0.18766,-0.12548,0.38544,0.13203,0.069559,-0.12046,-0.20599,0.30982,0.2916,0.37786,-0.41006,-0.0026912,0.040016,-0.037455,-0.4935,-0.030365,-0.023223,-0.35468,0.07613,0.045215,0.10715,0.1502,0.41783,0.18946,0.27211,-0.11744))
  def cycles = Vectors.dense(Array(0.46256,-0.11968,-0.066231,-0.26378,0.013937,0.057994,-0.2284,-0.37459,0.065908,-0.15091,0.042767,-0.082778,-0.30638,-0.57731,-0.47036,0.65577,0.1046,-0.262,-0.070764,-0.3738,0.18209,0.15919,0.15954,-0.22903,-0.35875,-0.68284,-0.54322,0.081016,0.13981,-0.01013,0.12752,-0.26524,0.51717,0.086973,-0.41463,-0.31991,0.056322,-0.44561,0.23273,0.7443,0.49128,0.238,-0.5261,-0.7921,-0.31566,0.45409,0.16552,0.12253,0.25644,-0.17595,0.1246,0.034353,-0.31799,-0.35458,-0.41562,-0.39523,0.26563,-0.57285,0.39585,-0.31546,0.2294,0.030711,-0.36274,-0.023304,0.53886,-0.22788,0.037556,-0.86605,0.50617,-0.34455,0.031048,-0.050262,0.51117,-0.28169,0.4507,0.31395,-0.17195,-0.22008,-0.20094,0.46498,-0.25144,-0.20293,0.28556,0.12104,-0.018754,0.28001,-0.27089,0.69212,-0.1335,-0.23047,0.092737,0.29338,0.063381,-0.39911,-0.59471,0.18356,0.13531,-0.01109,0.54988,-0.041808))
  def several = Vectors.dense(Array(0.22996,0.11486,0.0792,-0.47299,-0.06006,0.27785,-0.17653,-0.022407,-0.045996,-0.19233,-0.16297,-0.023205,0.12562,-0.28102,-0.085827,-0.13284,-0.26257,0.076545,0.21364,-0.12958,0.1193,0.39212,0.29201,0.43324,-0.10713,-0.25819,-0.22666,-0.28341,-0.094729,0.22815,-0.013955,0.062322,-0.17269,-0.0052703,0.27523,-0.21486,-0.19508,-0.050712,-0.05771,0.29474,-0.013015,-0.15756,-0.48047,0.082525,-0.29196,0.013672,-0.14649,-0.061184,-0.39903,-0.19191,-0.050465,-0.22237,0.017563,0.34363,-0.23508,-0.51011,-0.455,0.0026974,0.54306,-0.34334,0.079156,-0.34834,0.085617,-0.041039,0.11729,0.033945,-0.11738,-0.22894,0.19247,-0.21922,0.0088918,-0.053552,0.2891,0.13233,-0.011386,-0.064707,0.16676,0.019699,-0.13829,-0.17315,-0.26953,0.37935,-0.23306,-0.15514,-0.49954,0.17695,0.0088423,0.072913,-0.39991,0.42838,0.015832,-0.21794,0.037994,-0.28381,-0.096038,0.15341,0.34925,-0.074646,-0.23528,0.10244))
  def scase = Vectors.dense(Array(0.16587,-0.044686,-0.20663,0.34688,-0.24752,0.62449,0.27544,-0.24052,0.12273,-0.20847,-0.19936,0.18853,0.13154,0.25585,0.043122,0.27603,0.12347,-0.27766,0.043955,-0.24024,0.18119,0.15333,-0.13212,0.24186,-0.51888,-0.15659,0.062384,0.27139,-0.20448,-0.0034707,0.21059,-0.12691,0.18341,0.19724,0.38689,0.11175,-0.05494,0.24618,0.12814,-0.16606,-4.8041E-4,0.53093,-0.41172,0.15618,-0.15488,-0.086401,-0.056245,0.45438,-0.029112,0.51767,-0.06226,-0.70918,0.34258,0.04006,-0.15777,-0.3269,0.25477,-0.63875,-0.022302,-0.20033,-0.24985,0.16185,-0.1454,-0.069928,0.025086,-0.09768,-0.087743,0.012489,0.429,-0.36681,0.099626,-0.020249,0.20102,-0.18197,0.23273,-0.11042,0.33601,-0.22671,0.054659,-0.36121,0.46811,0.3644,-0.042285,0.063256,-0.31145,-0.022624,0.31944,0.17229,-0.017421,-0.11121,-0.13454,-0.28479,0.033112,-0.32379,-0.20573,-0.3808,0.49236,-0.41566,0.22537,-0.73176))
  def s30 = null.asInstanceOf[MLVector]
  def required = Vectors.dense(Array(0.42518,0.14734,-0.24779,-0.35106,-0.43046,0.092851,-0.1725,-0.054574,-0.22408,-0.16384,0.17986,-0.46344,0.059202,-0.20985,0.071001,0.21684,-0.65789,-0.31643,-0.14126,0.062626,0.17859,0.16454,-0.58056,-0.04903,-0.11873,-0.098719,-0.5076,-0.22073,0.45221,-0.19708,-0.15068,0.16296,-0.0035092,0.029075,0.18067,0.20256,-0.45957,0.050485,-0.24516,0.12481,-0.47941,-0.18344,-0.19343,0.090969,-0.19219,0.15264,-0.49866,0.122,0.21281,-0.11727,-0.15898,-0.050226,0.046844,-0.071893,0.18643,0.088901,-0.037843,-0.16431,-0.36251,-0.21197,-0.3124,-0.10949,0.53259,-0.13275,0.19118,-0.35957,0.013178,-0.37232,0.50962,-0.10577,0.40859,0.38486,0.48407,-0.019213,-0.021607,-0.0082159,0.27274,-0.34581,-0.18055,0.11529,-0.077014,-0.13436,-0.024323,0.38444,-0.14484,0.12033,-0.34617,0.26313,-0.36162,0.20056,-0.1077,-0.057772,0.26668,-0.42633,0.023274,0.0086128,0.53158,-0.0033604,0.17623,0.12128))
  def regimen = Vectors.dense(Array(0.09579,-0.70381,-0.42238,0.13294,-0.22052,0.59211,0.032545,-0.30933,0.35339,-0.11578,-0.023683,0.77805,-0.059004,-0.080316,0.060962,0.76688,-0.041581,-0.30952,-0.12441,-0.60645,-0.17956,0.64381,-1.0118,0.58221,0.025129,-0.63602,-0.17447,0.0055258,0.47288,0.30029,0.092904,-0.37551,0.11981,-0.042425,-0.28303,0.13027,-0.15298,-0.010272,-0.29681,0.37918,-0.064547,0.51107,-0.22834,-0.23327,-0.16358,0.38207,-0.13294,0.29791,0.31076,0.089479,0.087745,-0.21451,0.0059585,-0.18714,-0.3233,-0.063002,0.24803,-0.35767,-0.0065418,-0.18015,0.36593,-0.18562,-0.36216,0.36797,0.32029,-0.38768,0.4899,-0.25049,0.3029,-0.67175,0.16514,0.14212,0.60146,-0.12448,0.23092,0.19144,0.097032,0.41486,-0.14947,0.3168,-0.33453,0.33105,0.30717,0.37186,-0.15779,0.27263,0.43945,0.090507,-0.12713,-0.6318,-0.020934,0.93871,0.043628,-0.16863,-0.24323,0.30559,-0.063662,0.45435,0.26495,-0.30888))
  def lines = Vectors.dense(Array(0.0042148,-0.29957,-0.21448,-0.54519,0.26492,-0.06281,0.27958,0.088131,0.11298,0.16699,-0.77125,0.49602,0.31665,-0.21823,-0.0080829,-0.24868,-0.2019,-0.013116,-0.12482,0.1909,0.30538,-0.01872,0.36233,0.35305,-0.092279,-0.071762,-0.28916,-0.51671,0.037271,0.32068,-0.32014,-0.16017,0.28735,-0.10734,-0.52369,-0.45263,-0.0798,-0.11972,0.15583,0.73971,0.05403,0.23454,-0.019006,0.50502,0.15528,0.24888,-0.23674,0.71452,0.084232,-0.15241,-0.0057959,-0.39567,0.49869,-0.12503,-0.11346,-0.78308,-0.019046,-0.086793,-0.059171,-0.8611,-0.059049,-0.21365,0.11208,0.2527,0.38315,0.265,-0.0089307,-0.37449,0.94755,0.1221,0.24164,-0.32933,0.30703,0.065717,0.67331,-0.093491,0.089516,0.20975,-0.039509,0.29001,0.31603,0.44756,0.15138,0.39132,0.0059223,0.45395,0.46232,0.14962,-0.17147,0.23248,-0.24625,0.27896,0.28845,-0.040584,0.16425,0.13242,0.29382,-0.24278,0.2649,0.332))
  def patients = Vectors.dense(Array(0.13784,-0.37074,-0.33095,0.43933,0.0092139,-0.05382,-0.047207,-0.040141,-0.30172,0.0034178,-0.42866,0.35903,6.9463E-4,0.40511,-0.23599,0.36847,0.077931,-0.14306,0.3088,-0.33386,0.44834,0.51105,-0.63978,0.18649,-0.33602,-0.50294,-0.08566,0.081308,-0.067185,0.14364,-0.034604,0.25737,0.2437,-0.21509,0.078378,-0.0051244,0.056969,0.0055478,0.19745,-0.33791,0.50083,0.11515,-0.40024,0.28121,-0.34816,0.28096,-0.34505,0.37602,0.20678,0.11666,-0.3606,-0.58696,-0.15527,-0.37626,-0.5786,0.1073,-0.084778,-0.30921,-0.31502,-0.33245,-0.058271,-0.36611,-0.54569,0.12756,-0.027544,-0.052497,0.28332,-0.14557,0.59401,0.036062,0.44205,0.22425,0.1213,-0.23246,0.12887,0.035704,0.35381,0.061151,-0.32461,0.15454,0.10644,0.49103,0.10801,0.14711,-0.39411,-0.018024,0.041585,0.002525,-0.43367,-0.2927,0.023499,0.2034,0.23594,-0.24166,0.0022995,-0.0041313,0.22907,-0.075443,0.056663,-0.15211))
  def we = Vectors.dense(Array(0.034272,-0.15708,-0.47732,-0.58333,-0.17932,0.26669,0.32273,-0.24964,0.085919,0.050932,-0.15761,0.28794,0.10057,0.085656,-0.05861,-0.084944,0.10674,-0.11297,0.0098133,0.2964,-0.061054,0.20275,0.3534,0.036957,-0.55873,-0.14948,-0.0199,-0.073758,0.045557,0.066545,-0.099337,0.3436,0.1959,0.17116,0.31267,0.030206,-0.058995,0.20357,0.22464,0.57527,-0.3481,0.58089,-0.14604,0.23362,-0.33884,-0.24719,-0.3974,0.0071065,-0.15098,0.25656,-0.42883,-0.15517,0.29838,0.40314,-0.26242,-0.40367,-0.3853,-0.40605,0.16686,-0.31859,-0.36867,-0.48529,-0.23531,0.13313,-0.22606,-0.059013,-0.17917,-0.32188,0.36747,-0.30519,0.17906,-0.021081,0.36497,-0.2716,-0.18929,-0.10423,0.3183,-0.24204,-0.43909,-0.13906,-0.05999,0.26296,-0.30524,-0.12601,-0.21065,-0.059071,0.031772,0.061205,-0.089605,-0.035246,0.089471,-0.0074639,0.014943,-0.67457,-0.19779,-0.17774,0.30537,-0.29006,0.12812,-0.36153))
  def months = Vectors.dense(Array(0.16652,-0.56647,-0.14543,0.39676,-0.33219,0.16991,-0.4231,-0.55433,-0.102,-0.14754,-0.14903,-0.15549,-0.028075,0.33097,-0.37812,0.07062,-0.36987,0.048879,0.097697,0.069242,0.40341,0.20421,-0.52265,7.1532E-4,-0.087846,-0.66252,-0.86652,-0.099937,0.089503,0.24506,0.097805,0.12796,-0.0025355,0.1696,-0.37311,-0.076535,-0.084009,0.2082,0.014262,-0.17267,0.63605,0.28323,-0.20912,-0.079677,-0.51974,0.34543,-0.12267,0.56082,0.31729,-0.26747,-0.086592,-0.036936,-0.1409,-0.12655,-0.26531,-0.078455,-0.25345,-0.84199,0.18775,-0.12035,0.3046,-0.11188,-0.21045,-0.48775,0.25096,0.087523,0.5951,-0.43852,0.24513,-0.45275,0.16748,0.26096,-0.15878,-0.022018,-0.12625,0.058756,0.20789,0.077909,-0.56339,-0.0077769,0.098837,0.37096,0.17076,0.41722,0.037362,0.13154,0.30448,0.42575,-0.063813,0.30413,-0.34177,0.19352,0.63791,-0.21214,-0.22537,-0.23224,-0.24468,0.33572,0.45877,-0.52722))
  def may = Vectors.dense(Array(0.12044,-0.15228,-0.070256,-0.39493,-0.060781,0.025896,0.17791,-0.17152,-0.068028,0.32821,-3.1348E-4,-0.054816,0.017454,-0.22652,-0.13785,-0.16713,-0.26731,-0.062637,-0.080461,-0.12046,0.12252,0.31084,-0.34147,0.37611,0.12144,-0.46925,0.064572,-0.4004,0.10585,0.044452,-0.1987,0.12465,0.34523,0.3154,0.14271,0.27048,-0.38472,0.17358,0.12223,-0.15901,0.025272,0.21054,-0.63825,0.008758,0.15251,0.083936,-0.21228,-0.14406,-0.056006,0.327,-0.13494,-0.35543,-0.36562,0.57954,-0.23833,-0.044933,-0.27433,-0.11882,-0.22738,-0.43363,0.092557,-0.32324,-0.017548,0.43128,-0.10128,0.029436,-0.0098151,-0.1154,0.26543,-0.25092,0.19248,0.1093,0.26439,0.13144,-0.16074,0.20265,0.23268,-0.12841,0.2359,-0.077117,-0.071533,0.33524,0.21553,0.067044,-0.051026,-0.14559,-0.34331,0.20616,-0.34554,0.16404,0.14432,-0.0020942,0.39497,-0.25579,0.018224,0.074726,0.3349,0.093226,0.1337,0.18756))
  def achieve = Vectors.dense(Array(0.43189,-0.29869,-0.20887,0.167,-0.39764,0.080404,9.4261E-4,-0.069207,0.41851,-0.12315,-0.086207,0.44423,0.25395,-0.1356,-0.10065,-0.16378,-0.46732,-0.57387,0.045964,-0.26074,0.096633,-0.183,-0.79458,-0.1214,-0.12448,-0.50573,-0.15346,-0.40102,0.24708,-0.39645,0.43417,0.17705,-0.29981,-0.23949,-0.26016,0.21253,0.11063,0.011833,-0.080914,0.16879,-0.1546,-0.099732,-0.58285,-0.2495,-0.054509,0.26346,0.1561,0.10843,0.0089611,0.2558,-0.12379,0.075797,0.14964,0.12537,-0.13748,-0.22491,-0.077041,-0.023965,0.1188,-0.32625,-0.15542,-0.12132,0.14261,-0.0934,-0.18671,-0.12854,-0.18616,-0.16586,0.81597,-0.16233,0.26145,0.59439,0.51426,0.058432,-0.28066,0.3209,-0.0017243,-0.43673,0.0047639,0.021995,-0.34367,0.093115,-0.32108,0.3215,0.18438,0.057553,-0.050837,0.31698,0.21421,-0.048164,-0.13351,0.40035,0.48219,-0.50103,0.37958,-0.17878,0.43792,0.089879,0.36664,0.29147))
  def other = Vectors.dense(Array(0.53922,0.19852,0.19174,-0.031687,0.17918,0.041472,0.054669,0.17208,-0.043603,-0.09687,0.048376,-0.13664,0.14384,-0.3207,-0.019212,-0.14546,-0.14092,0.065816,0.13049,-0.095554,0.0064804,0.33871,-0.05736,0.49859,0.039986,-0.20573,-0.087234,-0.21395,0.01961,0.14521,-0.069708,-0.047108,0.10198,-0.15597,0.28654,-0.013648,-0.46704,-0.061473,0.22067,0.15571,0.21855,-0.26932,-0.24563,0.058181,-0.16285,-0.096519,0.06625,0.13352,-0.147,0.10549,-0.051767,-0.30838,-0.11454,0.076851,-0.050282,-0.24868,-0.27705,-0.15764,0.19933,-0.47929,0.22073,-0.24279,0.19175,0.16889,0.01028,0.15042,0.10017,0.15926,0.34452,-0.20797,0.079691,0.12252,0.10897,0.098968,0.021302,0.12954,0.21561,0.054387,-0.06499,-0.2207,-0.37224,0.4881,-0.13133,-0.061254,-0.45605,0.2461,0.082152,0.078883,-0.36493,0.30428,0.17279,-0.11576,0.13399,-0.10323,-0.084827,0.12968,0.50703,0.094033,-0.31967,-0.083018))
  def of = Vectors.dense(Array(0.42782,0.06608,-0.085878,-0.18676,-0.076334,0.0067198,-0.062371,-0.13571,-0.10592,-0.13532,-0.10595,0.074591,0.11125,-0.142,-0.069884,0.070346,-0.17282,0.054123,0.019514,-0.21,0.013349,0.11532,-0.014586,0.074113,-0.14129,-0.40074,0.028481,-0.19333,0.098608,0.039167,-0.060625,0.013385,-0.14454,0.11772,0.21029,0.036639,-0.088904,0.017416,0.14722,0.045336,-0.11012,0.17155,-0.23704,0.13889,-0.10777,0.10717,-0.13402,0.074948,-0.16628,0.17989,-0.063629,-0.01931,0.10185,0.01448,-0.24604,-0.017971,0.016165,-0.3602,0.083801,-0.175,-0.11255,-0.11795,0.18086,0.14308,-0.013767,0.054567,-0.21695,-0.1817,0.34206,-0.37275,0.29064,0.0059712,0.15553,0.11176,0.13678,-0.0064603,0.15762,-0.006347,-0.18499,-0.046873,-0.05264,-0.0054287,-0.053312,0.17059,-0.23524,-0.042865,-0.11678,0.12717,-0.20115,0.21931,-0.094129,-0.31531,-0.04101,0.014926,0.059808,0.083034,0.24942,-0.28472,0.034,-0.19705))
  def and = Vectors.dense(Array(0.39264,0.11431,-0.10528,-0.17035,-0.077675,0.040686,0.02481,-0.040448,-0.19287,0.047363,-0.1746,-0.047713,0.10241,-0.049751,-0.23754,-0.07111,-0.078584,-0.010558,0.027521,-0.14623,0.0079095,0.035275,-0.015554,0.13023,-0.023875,-0.58146,-0.019397,-0.18794,0.055286,-0.0088847,-0.078603,0.036074,-0.025088,0.0037986,0.10701,-0.02621,-0.11038,-0.099147,0.3014,0.20051,0.031715,0.16953,-0.14772,0.11744,-0.15331,0.097875,-0.11781,0.15884,-0.032012,0.17984,-0.018907,0.052966,0.048423,-0.0481,-0.17154,-0.056909,-0.048627,-0.2199,0.096704,-0.27738,0.067442,-0.19345,0.22538,0.043838,-0.062955,0.095476,0.028044,-0.049924,0.34061,-0.32756,0.32261,0.098617,-0.06036,0.1767,-0.040515,0.010728,0.29484,-0.0080779,-0.15084,0.036102,-0.19561,0.16603,0.016727,0.086392,-0.23159,-0.032369,-0.14404,0.12364,-0.27267,0.22377,-0.12069,-0.14579,0.015066,0.020508,0.127,0.081675,0.16337,-0.18011,0.11352,-0.053178))
  def primary = Vectors.dense(Array(0.81285,0.13085,0.0028023,-0.24077,0.2242,-0.27725,0.092163,-0.56321,0.23375,-0.023758,-0.39309,0.3237,0.050169,0.0075964,0.068675,0.14873,0.056165,0.17287,0.10567,0.070513,0.2974,0.1867,-0.03856,0.081122,-0.046275,-0.40703,-0.18605,0.0065472,0.029045,-0.087924,-0.16602,0.20166,-0.30778,-0.25929,0.15278,0.56888,-0.16494,0.40674,0.24796,-0.055473,0.27858,0.40141,-0.2833,0.13117,-0.47966,-0.050871,0.10893,0.39479,0.2828,0.34805,-0.065122,-0.48035,0.34488,-0.16692,-0.10491,-0.089972,-0.068025,-0.18984,-0.27888,-0.33308,-0.12986,-0.21278,0.14655,0.21781,0.47748,0.11416,-0.085719,-0.25731,0.074824,-0.24291,0.36007,0.010611,0.098683,0.24506,0.083974,-0.36445,0.28144,0.40659,-0.24637,0.037114,0.14472,0.2038,-0.071811,0.31131,0.0018991,-0.093172,-0.021552,0.33076,-0.59073,0.062158,-6.4841E-4,-0.32591,0.22129,-0.22266,0.029401,0.12726,0.81041,-0.20102,0.22017,0.004171))
  def potential = Vectors.dense(Array(0.32908,-0.19587,-0.099064,-0.50053,0.14188,0.083417,-0.2188,-0.18134,-0.014345,-0.04756,0.084505,-0.10801,-0.13581,-0.39296,0.14979,-0.43814,-0.33909,0.14384,-0.28784,-0.14327,-0.094023,0.47439,0.14155,0.24437,-0.27284,-0.47085,0.13745,-0.28501,0.40681,0.046167,-0.017341,-0.13535,-0.10872,0.0067682,-0.15489,0.14235,-0.17173,0.15037,-0.15928,-0.14818,-0.0022241,0.50599,-0.47753,-0.1141,-0.043469,0.10654,-0.31602,-0.045909,-0.058362,-0.0073741,0.054781,-0.36917,-0.19175,0.62404,-0.35538,-0.19908,-0.093436,-0.15495,0.031417,-0.46771,0.10862,-0.51385,0.48295,0.76758,-0.085649,-0.19062,-0.13046,-0.26015,0.36231,-0.15702,0.21419,-0.011352,-0.13352,0.19379,-0.24465,-0.012656,0.31327,-0.15403,-0.18698,0.15665,0.15608,0.053609,-0.31894,0.079593,-0.13973,-0.14973,-0.032703,0.0089411,-0.086142,0.18175,0.056315,-0.1687,0.2679,-0.19903,0.27052,0.013436,0.4634,-0.44567,-0.084628,-0.15007))
  def high = Vectors.dense(Array(0.72565,0.15166,-0.35893,-0.3325,-0.28901,0.069542,-0.22583,0.077195,-0.073685,-0.1824,-0.21325,0.48044,0.16903,-0.61196,-0.35471,-0.13845,-0.58882,0.32623,0.19151,-0.18166,0.15106,-0.34047,-0.077949,0.023366,0.27649,-0.14546,0.054257,-0.3964,-0.11351,-0.37008,0.18397,-0.02697,-0.20187,-0.010913,-6.5912E-5,0.099016,0.06334,-0.25106,0.016527,-0.053309,-0.039696,0.37909,-0.15214,-0.22533,-0.44265,0.43876,-0.064687,0.2748,-0.3678,0.25415,-0.086777,-0.14316,0.13409,-0.18918,-0.34257,-0.27498,0.074866,-0.1431,-0.18391,-0.32265,0.043588,-0.57993,0.09997,0.16341,-0.0073982,-0.37453,-0.2239,0.011814,0.27794,-0.32105,0.22451,0.233,0.015296,0.077921,-0.085181,-0.03657,0.36585,-0.041949,-0.29304,-0.029552,-0.028476,0.12982,0.40782,0.15563,-0.032028,0.053752,-0.14925,0.1887,0.043433,-0.25526,0.056733,0.30416,-0.13507,-0.15071,-0.053506,-0.14288,-0.048253,-0.18447,-0.24495,-0.078348))
  def therapeutic = Vectors.dense(Array(0.10893,-0.65594,-0.099427,-0.25034,-0.098982,0.36275,-0.18489,-0.19356,0.12647,0.039872,0.15226,0.29075,-0.037159,0.0575,0.25415,-0.35236,-0.17606,0.15729,-0.22356,-0.28299,-0.04491,0.589,-0.66577,0.41601,0.023628,-0.8649,0.22884,-0.31863,0.29407,0.17064,-0.027741,-0.2189,-0.32078,-0.27789,-0.053139,-0.044532,-0.39003,0.11229,-0.24862,-0.4313,-0.031991,0.19652,-0.96831,0.051654,-9.296E-4,0.37316,-0.46658,-0.26292,-0.12451,-0.03296,-0.078651,-0.40204,-0.029679,0.38681,-0.20069,-0.1409,-0.073118,-0.17974,-0.16143,-0.19852,0.1264,-0.50102,0.0064781,0.49661,-0.1164,-0.27778,0.047893,-0.19912,0.53805,-0.11396,0.56836,-0.13286,0.1386,0.34933,-0.041716,0.035523,0.06362,-0.1495,-0.0059439,0.14463,0.081826,0.25791,-0.34701,0.1033,-0.434,0.057205,0.3405,0.18861,-0.33726,0.15079,-0.19356,0.10219,0.29215,-0.45758,0.49408,0.36136,0.47619,-0.20377,-0.27172,0.11006))
  def free = Vectors.dense(Array(0.50356,0.18878,-0.27498,0.062826,0.037199,-0.058266,0.077371,-0.036037,-0.33981,-0.44315,-0.16313,-0.21749,-0.30959,-0.1062,-0.30699,-0.067109,-0.6429,-0.15241,-0.023675,0.014437,-0.015639,0.061462,-0.25807,0.92155,0.097136,-0.30137,0.24312,0.13008,0.29967,-0.50642,-0.26208,0.36306,-0.2989,0.12272,-0.42061,-0.059894,0.44671,-0.076155,0.1947,0.30176,0.30651,0.39297,-0.0087049,0.046795,-0.30124,-0.16367,0.18722,0.38183,0.16048,0.4011,0.3227,-0.33056,0.045445,0.24199,-0.25569,-0.32688,-0.60002,-0.52436,0.089894,-0.3855,0.32835,-0.10299,-0.063941,-0.30987,0.36631,-0.16721,-0.050692,-0.14994,0.3331,-0.0396,0.20155,0.59384,0.039354,0.014145,0.13766,-0.36516,-0.21667,-0.13353,-0.57328,0.22159,-0.49786,-0.10851,-0.12471,0.45548,0.017121,0.15836,0.058856,0.30706,0.15096,0.33316,0.12569,-0.27549,0.27659,-0.13426,-0.020241,-0.1666,0.48415,-0.24985,-0.011926,-0.21592))
  def cases = Vectors.dense(Array(-0.045931,0.042574,-0.15459,0.37113,-0.14387,0.10274,0.068629,0.093151,-0.0099996,0.059914,-0.36765,-0.21662,0.32789,0.30149,-0.04467,0.18701,0.04922,-0.0095067,0.31819,-0.46468,0.28776,0.12315,-0.30152,0.098033,-0.28726,-0.17357,-0.28058,0.28157,-0.25141,0.47004,0.15006,0.049078,0.36899,0.076266,0.11028,-0.056963,-0.089975,0.24673,0.042806,-0.21706,0.22416,-0.020141,-0.27811,0.16962,-0.35201,0.034388,-0.0912,0.57834,-0.12486,0.36215,-0.16131,-0.74848,0.0053363,-0.21767,-0.70078,-0.16731,0.0075302,-0.29531,0.030132,-0.24531,-0.10338,0.029383,-0.29027,0.089763,0.12424,0.051655,0.0075051,-0.043359,0.52099,-0.12546,0.26458,-0.078213,0.13609,-0.2216,0.19843,0.13809,0.52535,-0.047265,0.10883,-0.013317,0.44447,0.40395,0.034046,0.097749,-0.12832,0.26398,0.35269,0.25018,-0.16952,-0.09757,-0.16967,0.0041929,0.19002,-0.47072,-0.43845,-0.13677,0.31076,-0.31066,0.15895,-0.41788))
  def drugs = Vectors.dense(Array(0.37681,-0.28559,0.50477,-0.11548,-0.21708,0.29511,0.059046,0.013432,0.006408,0.14075,0.33133,0.3131,-0.23648,-0.0028111,0.26509,0.22082,-0.83994,-0.26995,-0.66191,-0.52849,-0.13025,0.4678,-0.24058,0.60321,0.026589,-0.45095,0.36354,-0.47615,0.34784,0.1374,-0.034168,-0.23496,0.091906,-0.17558,-0.042574,0.024324,-0.036242,-0.086793,-0.032557,0.34597,0.060466,0.045248,-0.13932,0.116,-0.29042,0.37745,-0.18304,-0.33164,-0.090275,0.043728,0.32852,-0.43459,0.092864,-0.056994,-0.82866,0.11625,0.0166,0.28042,0.43018,-0.27145,-0.038892,-0.14378,-0.26148,0.52698,0.17239,0.48886,0.054666,-0.028521,0.48467,-0.34289,0.62249,-0.017432,0.18698,-0.033859,-0.017137,0.26789,0.31895,-0.22789,-0.25087,0.10264,-0.078435,0.54684,-0.099851,-0.01178,-0.68963,0.058858,0.51164,-0.38286,-0.23237,-0.0091578,-0.017845,0.34537,0.60967,-0.21836,-0.063992,0.66219,0.49065,0.10014,-0.055375,-0.21625))
  def follow = Vectors.dense(Array(0.19924,-0.4383,-0.23315,0.31267,-0.29705,0.044282,-0.074316,-0.77541,-0.20992,-0.019542,-0.037737,-0.13403,0.089823,0.49292,-0.34352,-0.044137,-0.39132,0.16539,0.26547,0.19912,0.70168,0.23979,-0.71607,0.086701,-0.4937,-0.64581,-0.80806,0.14417,-0.15617,0.31613,0.1164,0.15457,-0.24847,-0.23541,-0.12263,0.10446,0.14377,0.31802,-0.2045,-0.35242,0.43742,0.16713,-0.31158,-0.092001,-0.48481,0.22777,-0.20286,0.54567,-0.11953,-0.19027,-0.15986,-0.30366,-0.039785,-0.11286,-0.40869,0.067141,-0.61727,-0.75755,-0.056635,-0.12703,-0.21163,-0.10503,-0.0469,-0.20319,0.32995,0.05711,0.23035,-0.64817,0.27087,-0.55534,0.079197,0.28786,0.01744,-0.14589,-0.15823,0.16359,0.015779,-0.47979,-0.22884,-0.099152,-0.069542,0.45423,0.25858,0.39605,-0.17517,0.013989,0.4109,-0.0020679,-0.23423,0.28283,-0.059157,-0.10743,0.69338,-0.014272,-0.041386,-0.40315,0.0077692,0.13201,0.49423,-0.25993))
  def affects = Vectors.dense(Array(0.64955,-0.050705,-0.3474,0.030584,-0.1924,0.064766,0.10537,0.28256,-0.36035,-0.041164,-0.12654,0.23597,-0.01725,-0.45755,-0.35224,0.10088,-0.17165,-0.23088,-0.33126,-0.23934,0.18991,0.36995,-0.021028,-0.30951,-0.031908,0.22998,-0.11185,-0.34122,-0.42032,-0.33992,-0.18322,-0.1482,0.056548,0.47497,0.030277,0.59071,-0.20245,0.39231,0.15638,-0.0096249,-0.059726,0.41559,-0.24975,-0.0066598,0.17921,0.096036,-0.014792,-0.16825,0.52033,0.20816,-0.058614,7.1992E-6,-0.17873,0.35007,-0.31318,0.0524,0.11731,-0.50887,0.037539,-0.5066,0.10311,-0.3189,0.34252,-0.37238,-0.31316,0.14659,-0.47108,0.051806,0.32987,-0.41767,0.48036,-0.0083036,0.34381,-0.055331,0.014719,0.2096,-0.03966,0.082399,-0.058777,0.036375,-0.23371,0.28987,0.1356,0.39726,0.11494,0.0032762,-0.2687,0.36319,-0.34034,-0.25461,0.084375,-0.32299,-0.21022,0.32862,-0.071767,0.54348,0.76385,0.029198,0.12651,-0.31381))
  def lymphoma = Vectors.dense(Array(-0.30251,0.32052,-0.26965,-0.068567,-1.3629,0.39393,-0.1608,-0.14965,0.24982,-0.22809,-0.27803,0.7312,0.43859,-0.088453,-0.21986,0.12274,-0.13987,0.37063,0.20939,-0.4107,0.65174,0.49606,-0.28014,0.93442,-0.26653,-0.86276,-0.16595,0.092426,-0.35382,0.37533,0.077695,-0.61934,-0.077397,-0.37298,-0.094131,-0.16673,-0.38513,0.28695,0.36491,-0.15744,-0.32745,1.2089,-0.25702,0.47402,-0.24312,-0.15775,-0.20199,0.52049,0.29076,-0.21644,-0.078048,-1.0577,0.83593,0.081026,-0.12321,0.040311,-0.17179,-0.17776,-0.62103,-0.8409,-0.11508,0.32757,-0.052816,0.17926,0.21846,0.3956,0.17401,0.30657,0.72825,0.15092,0.28011,-0.44858,-0.22022,0.20058,1.0426,-0.15929,0.59934,0.14527,0.24867,0.46859,-0.19427,-0.031993,0.38867,0.055913,0.05098,0.5338,0.030831,0.11321,-0.24413,-0.36411,-0.64519,0.21451,0.52963,-0.27631,-0.17997,-0.017539,0.92211,-0.020859,0.35221,-0.031423))
  def inhibitors = Vectors.dense(Array(0.76446,-0.33899,-0.046956,-0.63777,-0.12379,0.28475,0.026551,0.20919,-0.39524,0.50354,0.051564,0.22235,0.046905,0.047497,0.37148,0.027742,-0.89446,0.18837,-0.47909,0.28413,-0.043053,0.85373,-0.12039,0.26388,0.10297,-0.94388,-0.2597,-0.40423,0.1654,-0.50676,-0.44338,-0.49247,0.20738,-0.49589,0.33647,-0.038006,0.06624,-0.021912,-0.18877,0.2944,-0.79022,0.66049,-0.047248,0.085003,0.39982,0.51855,-0.16377,-0.049002,0.046829,0.011268,-0.077222,-0.31036,-0.037391,0.19679,-0.71113,-0.66463,0.18891,0.23052,0.21035,-0.25041,0.34822,-0.11049,-0.131,0.51234,-0.060109,0.13202,0.37897,0.099293,0.84815,-0.088188,0.55492,0.017457,-0.17263,-0.41459,-0.14345,0.34773,0.26771,0.10895,-0.26341,-0.085274,-0.020741,0.19226,0.076437,-0.62767,-0.60251,0.57682,0.49443,-0.066501,-0.59056,0.18468,-0.060656,-0.20867,0.37477,-0.48824,-0.25965,0.38426,0.33124,0.4594,0.025913,0.087791))
  def the = Vectors.dense(Array(0.3856,0.072524,-0.12072,-0.25707,-0.10412,-0.098987,-0.043835,-0.26741,0.0074893,-0.10281,-0.05307,0.060446,0.17368,-0.046514,0.05985,0.047961,-0.060379,-0.050062,-0.051423,-0.22722,0.0084058,0.10835,0.055796,0.036854,-0.23742,-0.30894,0.059631,-0.22739,0.14699,0.05657,-0.023307,-0.002778,-0.0019413,0.036227,0.12199,0.017888,-0.095025,0.13404,0.20244,0.081235,-0.23594,0.15214,-0.25224,0.10747,0.021832,-0.10551,-0.058232,0.067433,-0.16814,0.14398,-0.10376,0.047211,0.10548,0.12588,-0.199,-0.01067,-0.21525,-0.33374,0.091084,-0.23227,-0.097901,-0.087707,-0.021981,0.11948,0.060647,-0.040484,-0.19239,-0.14129,0.19691,-0.28671,0.22119,-0.0039733,0.14048,-0.0083567,2.1366E-4,-0.12152,0.27274,0.02442,-0.1877,-0.091669,-0.22674,0.063562,0.013202,0.24084,-0.3,0.10367,0.014963,0.14527,-0.11279,0.10405,-0.099953,-0.22966,0.021195,0.042703,0.083895,0.052562,0.24013,-0.33851,0.11037,-0.28719))
  def only = Vectors.dense(Array(0.31258,0.20792,-0.11867,-0.0063,-0.16762,-0.058368,-0.10011,-0.19678,-0.027066,0.0074185,-0.19617,-0.053216,0.15997,-0.1514,-0.048601,0.051861,-0.26812,0.12709,0.17751,-0.019236,0.078314,0.066393,-0.2336,0.1632,-0.18294,0.028381,-0.16923,-0.15455,0.02218,0.18236,-0.19263,-0.17351,0.0016927,0.15564,0.16545,0.12573,-0.14856,-0.13936,0.18303,0.031563,0.022859,0.24062,-0.076833,-0.080486,0.055843,0.03312,-0.044526,0.24336,-0.045786,0.1551,-0.20135,-0.099127,-0.030423,-0.027672,-0.26682,-0.12163,-0.16207,-0.1381,0.25592,-0.35212,-0.038282,-0.14839,-0.10928,0.032444,0.14008,-0.23887,0.057727,-0.046603,0.29824,-0.021868,-0.034465,0.063523,0.31479,0.091702,-0.042044,-0.17752,0.26637,0.008154,-0.12896,-0.13296,-0.13546,0.21621,-0.016891,0.15288,-0.12535,0.3322,0.25457,0.20501,-0.2375,0.091235,0.20814,0.015763,0.16224,-0.25233,-0.13448,0.086316,0.12278,0.047923,-0.17593,-0.21627))
  def pretreated = Vectors.dense(Array(0.58178,0.046829,-0.45669,0.42125,0.02247,0.20509,0.0040612,0.04396,-0.030571,-0.27925,-0.65427,0.57383,-0.2774,-0.24533,0.10306,-0.34376,-0.41497,0.28581,-0.39112,0.44302,0.21862,0.29864,-0.11776,-0.48472,-0.22105,-0.43099,0.017422,-0.59106,0.091077,-0.32718,-0.31999,-0.22492,0.3313,0.42435,-0.31882,-0.060132,0.12988,-0.30107,-0.077099,0.79969,-0.049116,0.49308,-0.74415,-0.15962,0.025399,0.026409,-0.080687,0.29157,0.81949,0.19737,0.2103,0.016341,-0.25509,-0.44482,-0.38456,-0.19917,0.49467,-0.36791,0.030838,-0.19898,0.29816,-0.082882,-0.37927,0.20731,0.11832,-0.15032,0.82855,0.39778,0.43701,-0.32095,0.56094,0.19999,0.096031,0.29028,0.79362,-0.39634,0.36276,0.23171,-0.33732,0.065923,-0.11865,-0.10201,-0.07889,0.13818,-0.080227,0.91623,0.14035,0.18712,-0.41291,0.20025,0.33391,0.23717,0.23087,-0.41459,-0.23838,0.1324,0.1696,0.40053,-0.44775,-0.23062))
def study = Vectors.dense(Array(0.26982,-0.089294,-0.36523,-0.16046,0.18791,0.27993,0.026253,-0.19962,-0.051594,-0.32872,-0.18963,0.5581,-0.073534,-0.021624,-0.25878,-0.031513,0.0040257,-0.35599,-0.1814,-0.10518,0.081295,0.2289,0.16952,-0.20805,-0.61416,-0.46765,-0.27225,-0.13433,0.23701,-0.14087,-0.080613,0.16836,-0.22989,-0.07098,-0.016439,0.076545,0.14134,0.34317,-0.15803,0.007537,-0.13688,0.44306,-0.074751,-0.16799,-0.1248,-0.23253,-0.42546,0.046667,-0.061104,0.35354,-0.41436,-0.11997,0.24806,0.17905,-0.27029,0.12516,-0.24564,-0.625,-0.19915,-0.18653,-0.38559,-0.45453,-0.21265,0.40812,0.014698,-0.0025265,-0.10658,-0.34765,0.15767,-0.57485,0.13144,-0.26654,0.21729,-0.26874,0.13429,-0.18195,0.35384,-0.26274,-0.33514,-0.44036,-0.16531,0.1013,0.022849,0.10999,-0.44957,0.013217,0.047352,-0.097073,-0.29739,0.08362,-0.19423,-0.11173,-0.22988,-0.33939,-0.10784,-0.23857,0.21466,-0.16529,0.23843,-0.50468))
  def breast_cancer = Vectors.dense(Array(-0.021119999999999986,0.1427705,-0.28723,-0.553345,-0.25877,0.2585,-0.382695,-0.0101765,-0.47839,0.154824,-0.5590999999999999,0.298175,-0.070629,-0.300745,0.0803365,0.28945,-0.15122000000000002,0.31355,0.28632175,-0.310855,0.063169,0.22186499999999998,-0.31945,0.374915,0.0494,-0.7194400000000001,0.16559000000000001,0.138747,-0.20860499999999998,0.10036,0.04655499999999999,-0.35459,-0.085775,-0.022419999999999995,-0.3514,-0.23750500000000002,0.6497200000000001,0.1266765,-0.21602500000000002,-0.23002499999999998,0.066645,0.759925,-0.32649,0.294165,-0.38167,-0.890285,-0.38939999999999997,0.31871,0.1265315,-0.12340999999999999,-0.36097,-0.813295,0.17285,0.1615245,0.143162,0.05144685,-0.5271049999999999,-0.32747000000000004,0.33828,-0.8613,-0.07773150000000001,-0.49454,0.0183045,0.44141,0.19951000000000002,0.34026,0.01317085,-0.1081453,0.804265,0.027643499999999998,0.706925,-0.155165,0.16988,-0.09548105000000001,0.9683200000000001,0.225495,0.050824999999999995,-0.0406435,-0.129116,-0.048714999999999994,-0.19378499999999999,0.5761499999999999,0.21779,0.34955499999999995,-0.028495000000000006,0.29483000000000004,-0.0505045,0.49695999999999996,-0.378895,0.19867,-0.403405,0.364975,0.140965,0.04581929,0.49116000000000004,0.49411499999999997,0.18434499999999998,-0.203935,0.503035,0.07885500000000001))
  def asthma = Vectors.dense(Array(0.29856,-0.23581,0.57112,0.02129,-0.44369,0.12212,-0.13767,-0.56864,-0.23561,0.29979,0.10313,0.26636,0.18416,-0.68864,0.11125,0.082677,0.14312,0.02879,0.17933,-0.24589,-0.13324,0.39601,-0.29048,0.63676,-0.061735,-0.75009,-0.051235,0.046943,-0.09328,-0.21306,0.018099,0.21727,0.067783,0.38643,1.0773,-0.011923,-0.20042,0.5275,-0.17148,-0.043742,-0.66252,0.18112,-0.032863,-0.32933,0.023904,0.07061,-0.097278,0.33405,0.14854,-0.11383,0.18531,-0.37203,-0.1955,-0.29807,-0.42123,0.3955,-0.14312,-0.42835,0.29107,-1.0694,-0.39967,-1.2289,-0.5121,-0.39959,-0.25966,0.38918,0.46686,-0.26004,0.28247,-0.21508,0.68397,-0.092905,-0.031785,0.3138,0.5451,-0.81914,0.31598,-0.50257,-0.30978,0.11148,-0.36097,0.92411,0.84822,-0.082481,0.016384,-0.6213,0.4167,-0.29481,-0.33843,0.014025,-1.1585,0.23259,0.15076,-0.44646,0.621,0.0026693,0.27244,0.43706,-0.48463,-0.042057))
  def cohort = Vectors.dense(Array(0.26449,-0.44709,-0.33282,0.25403,0.13071,0.052067,-0.31517,0.0058636,-0.24604,-0.35045,-0.328,0.24367,-0.27708,0.12839,-0.6172,0.38925,-0.052188,-0.40234,0.1607,-0.28515,0.38593,0.26884,-0.40426,-0.37348,-0.6372,-0.81775,-0.42901,0.11692,-0.21741,0.017169,0.26073,-0.033717,0.16936,-0.35294,0.074445,0.27009,0.08254,0.47341,-0.28009,0.16322,0.37629,0.49478,-0.15538,0.062992,-0.21596,-0.19524,-0.26196,0.52998,-0.019211,0.36317,-0.54896,-0.66718,0.049715,0.1739,-0.39739,0.12828,-0.08784,-0.66686,-0.45321,-0.71169,-0.19619,-0.29036,-0.013312,0.11854,0.048606,0.30706,-0.042763,-0.16132,0.10399,-0.39076,0.26209,-0.096882,0.21476,-0.36464,0.44795,-0.28401,0.3318,-0.37585,-0.46124,-0.35295,0.084323,0.47415,-0.025522,0.14798,-0.45445,-0.29866,0.53291,-0.10922,-0.23227,-0.35031,-0.22033,0.25009,0.23555,-0.071859,-0.31509,-0.26188,-0.25927,0.19206,0.080619,-0.4824))
  def measles = Vectors.dense(Array(0.15519,0.047237,-0.024684,-0.45962,-0.55786,0.16246,-0.080997,-0.39572,-0.089022,0.01102,0.2956,-0.1116,0.46985,-0.2809,0.43038,0.26592,-0.56092,0.28435,0.0059326,-0.8371,0.55471,-0.0016345,0.20401,0.7168,-0.13389,-0.70336,-0.58909,0.006636,0.42977,0.54226,0.61802,0.59222,-0.052678,-0.19086,0.86703,0.074835,-0.25657,0.60897,-0.4043,-0.41927,-0.19419,0.46763,0.31104,-0.17107,-0.27487,-0.76881,-0.27711,0.63785,-0.088278,0.24977,-0.67984,-0.3262,0.4958,-0.10283,-0.9738,-0.26413,0.28707,-0.60475,-0.075603,-0.37326,0.071174,-0.53635,-0.10687,-0.61281,0.060656,-0.014306,-0.78383,0.85489,0.37229,-0.52754,0.22573,-0.42031,0.012564,0.32542,-0.00624,-0.49928,-0.31101,-0.042213,-0.38744,0.66563,-0.64604,0.029665,0.071427,0.18475,0.17336,-0.24541,0.56348,-0.25641,0.12183,-0.058996,-0.69579,0.72383,0.96367,-0.89582,-0.070539,0.083979,0.038649,9.0303E-4,0.17865,-0.099203))
  def why = Vectors.dense(Array(0.12349,-0.38658,-0.066673,-0.15341,-0.24069,0.037478,0.30565,-0.46893,0.079954,0.20804,-0.089421,0.10836,0.29364,-0.28255,0.16834,0.036582,-0.20187,-0.27385,-0.075534,-0.36325,0.1896,0.013911,-0.22085,0.28689,-0.22161,0.16558,-0.061452,-0.47862,0.043567,-0.37756,-0.34312,-0.12425,0.027698,0.24436,0.12199,-0.069278,-0.31828,0.2299,0.39131,-0.047394,0.024699,0.30189,-0.34966,0.10318,-0.09436,-0.57449,-0.26766,-0.39675,0.40743,0.34405,-0.33644,-0.26758,-0.28928,0.17536,0.16156,-0.2395,-0.47085,0.0094307,0.31136,-0.45319,-0.21045,-0.51929,-0.15062,-0.1302,0.31499,-0.18363,-0.25442,-0.47262,0.2626,-0.30254,0.52925,-0.082687,-0.074224,0.14005,-0.26029,0.14949,-0.050932,-0.21395,0.46449,-0.51837,-0.28147,0.37989,-0.032216,-0.052677,-0.013345,0.24111,0.020873,-0.32687,-0.21295,-0.03703,0.2482,0.17966,0.43356,-0.47544,-0.15652,-0.24873,0.54313,0.13168,0.16212,-0.25695))
  def vih = Vectors.dense(Array(0.44642,-0.016604,-0.033428,-0.526,-0.021826,-0.42804,0.58914,0.10226,0.50897,0.68611,0.17193,-0.47064,-0.022128,0.21711,-0.56487,0.48678,0.22958,-0.13214,0.092238,0.041588,0.22182,-0.11611,-0.27457,0.63507,0.084109,-0.87594,-0.76108,0.48647,-0.08624,0.23235,0.69444,0.12627,0.096489,-0.047237,0.7282,0.2806,0.51036,0.16156,0.56933,-0.068768,-0.73717,0.23616,-0.12982,-0.20804,-0.58897,-0.70395,-0.27921,0.57768,0.54151,0.010317,-0.70653,0.1191,0.12742,0.33094,-0.65796,0.072152,-0.16269,-0.40877,0.26535,0.59966,-0.46904,-0.49184,0.93265,-8.8041E-4,-0.28912,-0.036087,0.33956,0.1049,0.54521,-0.4368,0.29099,0.30425,-0.0094882,0.026335,0.21757,-0.44893,0.68546,0.15815,0.018724,-0.10356,-0.30781,-0.2429,0.16283,0.54291,-0.60108,-0.11251,0.4583,0.82522,-0.35764,-0.24627,0.41671,0.54316,0.1316,-0.24293,-0.19499,0.38143,0.37192,0.30827,0.22268,-0.39565))
  def cystic_fibrosis = Vectors.dense(Array(0.11144699999999999,-0.0541025,0.35750000000000004,-0.306355,-0.5748,0.397115,-0.159945,-0.2914,-0.37621000000000004,0.0944645,-0.453055,-0.0451395,-0.23218,-0.029068,0.321855,0.10172199999999999,0.49307,0.42741999999999997,-0.13076300000000002,-0.18910500000000002,-0.09882500000000001,-0.263725,-0.521765,0.1304325,-0.46549,-0.651685,0.0814865,0.465105,-0.24484599999999998,0.33246,0.39807499999999996,-0.164155,-0.59891,0.1949905,0.23337000000000002,0.36083,-0.37816,0.95167,0.592735,-0.329975,-0.008499999999999994,0.27259,-0.423925,0.277575,0.464005,0.10291550000000001,-0.27062,0.520405,-0.1481665,0.330658,-0.5042800000000001,-0.1886745,-0.137865,0.182345,-0.796305,-0.0512465,0.0773035,-0.44811500000000004,0.174595,-0.625705,0.0638715,-0.751865,-0.0234645,-0.012223499999999998,-0.19489099999999998,0.0733425,0.258345,-0.042690000000000006,0.434075,0.18537499999999998,0.67176,0.246015,0.064503,0.1606305,0.22779,-0.065025,0.431125,0.257185,-0.38952000000000003,0.050315,0.274175,0.51798,0.519215,0.45813499999999996,-0.463725,0.486625,-0.64944,-0.0786065,-0.476465,0.34112,-0.36872000000000005,-0.073465,0.12712299999999999,-0.13984,0.0752635,-0.09437000000000001,0.65685,0.10682950000000001,-0.3134895,0.1298831))
  def performance = Vectors.dense(Array(0.38636,0.19823,-0.60795,-0.24348,0.053317,0.37656,-0.40836,-0.6861,0.21092,-0.60619,0.34707,0.48405,-0.11643,-0.55598,-0.53128,-0.13057,-0.3042,-0.16949,0.083412,-0.20455,-0.33997,-0.42087,0.38468,0.17769,-0.07296,-0.020008,-0.0998,0.090655,-0.20783,-0.49117,0.23402,0.61449,-0.09037,0.018234,-0.25436,-0.029855,-0.56963,-0.24264,-0.053348,0.099719,-0.11006,0.24367,-0.4908,-0.16722,0.20945,0.030585,0.36581,0.30348,0.17776,0.23822,-0.29258,0.15092,-0.11123,0.30808,-0.31297,-0.15395,0.20609,-0.19325,0.30019,-0.33505,0.16308,-0.23463,0.1127,0.23834,-0.12253,0.36574,0.33411,-0.36947,0.37864,-0.11382,0.57554,0.32504,-0.026761,-0.024224,-0.1444,-0.031502,0.45107,-0.3074,-0.058647,0.18184,-0.54504,0.32715,-0.11188,0.39112,-0.263,-0.0617,0.29058,0.38995,-0.30385,-0.36569,0.14303,0.41727,0.028227,0.13864,0.073704,-0.29886,0.12677,0.014103,0.2665,-0.20833))
  def again = Vectors.dense(Array(0.24449,-0.077986,-0.063738,-0.15961,-0.48718,-0.077944,-0.1293,-0.55154,0.036092,0.080125,-0.16048,-0.081458,0.20115,0.18814,0.13574,-0.11296,-0.04816,-0.049788,-0.011884,-0.02609,0.28972,-0.057153,-0.18488,-0.055778,-0.19476,-0.10424,-0.13776,-0.31339,0.30494,0.18304,-0.15353,-0.15822,0.13853,0.28221,0.14495,-0.26324,-0.0089675,-0.23043,0.25355,0.19907,0.17335,0.26126,-0.23254,-0.072044,-0.19976,-0.024218,0.070599,0.034079,0.059357,-0.21442,-0.036249,0.14033,-0.24958,0.17898,-0.22767,-0.067179,-0.20416,-0.43481,0.26224,-0.16531,0.2737,-0.13657,-0.36316,-0.28407,0.31826,-0.16182,0.16471,-0.29624,0.24325,-0.14342,0.25374,-0.035832,0.067118,-0.034821,-0.18042,-0.20332,0.05502,-0.17143,-0.34429,-0.14559,-0.095041,0.44872,0.15781,0.14901,-0.12139,0.31856,0.12335,0.19007,-0.17851,-0.022541,-0.038167,0.1604,0.5552,-0.41139,-0.11244,-0.1258,-0.35552,0.020561,0.32091,-0.52275))
  def bronchitis = Vectors.dense(Array(0.26373,-0.45094,0.38883,0.29456,-0.3722,-0.25259,-0.089092,-0.14084,-0.17652,0.13458,-0.27897,0.16073,0.13615,-0.8731,-0.08253,0.72129,0.094267,0.50774,-0.14678,-0.40906,0.055079,0.2927,-0.27182,0.45904,-0.12875,-0.45817,0.090808,0.36164,-0.011188,0.070859,0.16774,0.26902,-0.1049,0.54917,1.1153,-0.29259,-0.40814,0.37633,-0.15252,-0.061267,-0.43847,-0.082473,-8.3382E-4,-0.43507,-0.26976,0.021035,0.18042,0.39494,0.47875,0.23795,-0.4229,-0.057757,-0.58107,-0.14719,-0.62143,-0.17025,0.022945,-0.79764,0.32053,-0.54337,-0.10994,-0.76849,-0.39789,-0.04958,-0.0034017,0.35295,0.63368,0.29214,0.24589,-0.35952,0.8326,-0.15046,-0.06668,0.22558,0.5736,-0.37619,0.12809,0.40425,0.21201,-0.005879,-0.091585,0.59061,0.76335,0.48287,0.30177,-0.31293,0.31786,-0.83329,-0.63687,0.32132,-1.1831,0.42546,0.083312,-0.62102,0.1135,-0.44936,0.54399,0.22636,-0.72453,-0.3057))
  def doctor = Vectors.dense(Array(0.31594,-0.64359,-0.035259,0.42105,-0.34007,0.084682,-0.18937,-0.84756,0.16017,0.41345,0.49614,0.092512,0.3901,-0.0075838,0.58288,-0.10891,0.13896,-0.46332,0.14318,-0.37687,-0.07589,0.043084,-0.60846,0.92018,-0.06061,0.010045,-0.022775,-0.45104,-0.15116,-0.22889,0.30555,-0.09872,0.27572,-0.023266,0.5422,0.12354,-0.40312,-0.44702,0.40116,-0.56463,0.1518,0.42995,0.12226,0.1184,-0.18852,-0.48078,0.017577,0.2052,0.47182,0.25818,-0.27741,-0.13508,-0.23536,-0.71059,-0.49908,0.22776,-0.36818,-0.94987,0.55222,-0.59414,-0.25172,-0.44744,-0.3434,-0.28329,0.50451,0.028413,-0.093351,-0.51723,0.20825,-0.11422,0.1439,-0.28892,0.0030886,-0.18665,-0.12887,-0.19788,-0.011143,-0.71391,0.32407,-0.18449,0.15654,1.0205,0.40592,0.28298,-0.45893,-0.021823,0.45425,-0.47041,-0.36984,-0.54994,-0.12751,0.28236,0.67244,0.033436,0.62187,0.11508,0.2951,-0.2641,0.69044,-0.3512))
  def hospital = Vectors.dense(Array(0.27364,-0.74873,-0.30829,0.42646,0.039559,-0.1798,0.025825,-0.25375,0.43101,0.28599,0.048236,0.17106,-0.055331,0.075053,0.38437,0.46528,-0.0097338,-0.40204,0.25297,-0.60448,0.54075,0.47927,-0.64261,0.558,-0.011545,-0.62266,-0.19174,-0.082081,0.063253,-0.35731,0.35662,0.31466,0.19378,-0.17382,0.024242,0.38956,-0.6835,-0.55447,-0.15668,-0.15604,0.50682,0.25859,-0.75616,0.28981,-0.6057,-0.53667,-0.27723,0.54574,-0.39107,0.039812,-0.7227,-0.33784,-0.22015,-0.31505,-0.47874,0.28222,-0.19937,-0.77075,0.17827,-0.4874,0.12575,-0.27468,-0.27105,-0.28771,0.54953,0.57432,0.10684,-0.087553,-0.078506,-0.21012,0.60003,-0.31973,-0.20352,-0.47825,-0.016604,-0.56806,0.44897,-0.5055,0.066663,-0.45032,0.28375,0.48145,0.39137,0.37061,-0.24575,-0.39799,0.1724,-0.23442,-0.46992,-0.33722,-0.075339,0.22407,0.64345,0.43748,0.1306,-0.22503,0.035252,-0.2415,0.5499,-0.38152))
  def first = Vectors.dense(Array(0.47679,0.046809,-0.14006,-0.086974,-0.093056,0.18341,-0.12748,-0.31756,0.15152,-0.1356,0.043021,0.11735,0.2468,0.2176,0.11897,0.067669,-0.25856,-0.17901,0.096488,3.6761E-4,0.053875,0.34161,0.11122,0.022188,-0.53211,-0.48933,-0.14823,-0.026684,0.24171,-0.027511,0.12115,-0.082634,-0.032127,0.18206,0.20399,-0.13209,-0.10686,0.09347,0.12404,0.00332,-0.06809,0.26669,-0.17223,0.14774,-0.30685,0.16907,0.10413,-0.070544,-0.10573,0.21188,0.018416,4.6211E-4,0.06495,0.34281,-0.018329,-0.24509,-0.11233,-0.54453,0.29196,-0.18453,-0.41173,-0.23374,-0.18478,-0.15554,0.42673,0.066179,-0.22497,-0.41972,0.036133,-0.24459,0.11786,-0.15832,0.35141,-0.068646,-0.018362,-0.09538,0.07997,0.15948,-0.43676,-0.29463,-0.11231,0.12297,0.18933,0.4142,-0.14899,0.47243,0.14174,0.35042,-0.063567,-0.19476,-0.1321,-0.16323,0.13243,-0.30082,-0.16193,0.038361,-0.029702,-0.16066,0.11907,-0.64554))
  def patient = Vectors.dense(Array(0.049265,-0.28701,-0.026634,0.34782,-0.28235,0.2943,-0.27324,-0.45485,0.033025,0.099188,-0.12239,0.43967,-0.035644,0.2548,0.20335,0.17958,0.31837,-0.21433,0.34276,-0.11569,0.38862,0.55894,-0.62437,0.5602,-0.34616,-0.18623,0.11905,-0.025264,-0.16843,0.053402,0.19564,0.15809,0.13573,-0.073895,0.21691,0.26785,-0.33962,-0.17057,0.26262,-0.26103,0.30927,0.49658,-0.46804,0.54847,-0.2388,0.048864,-0.24744,0.53836,0.045918,0.16539,-0.19629,-0.52659,-0.1872,-0.45006,-0.14111,-0.05577,-0.036797,-0.63508,0.036939,-0.22554,-0.029175,-0.032715,-0.24265,-0.1255,0.071807,-0.082958,-0.066521,-0.18838,0.5853,-0.12857,0.22397,0.24834,0.49623,-0.16439,-0.17737,-0.073845,0.18672,-0.040274,-0.28374,0.13643,0.087906,0.58075,-0.13808,0.094245,-0.3327,-0.093616,0.18586,0.013836,-0.19922,-0.30287,-0.29957,0.11832,0.19277,0.039959,0.47765,-0.19,0.22575,-0.36317,0.49941,-0.32638))
  def influenza = Vectors.dense(Array(0.44468,-0.18744,-0.22789,-0.63097,-0.26233,-0.25366,-0.096221,-0.38568,0.055312,0.55137,0.33509,-0.3364,-0.011022,-0.51381,-0.11014,0.37519,-0.14095,0.3872,-0.022916,-0.59887,0.16305,0.21245,0.5104,0.52818,-0.20775,-0.74927,-0.5298,0.10387,0.4594,-0.011016,0.46007,-0.010456,0.13476,0.016785,1.0872,-0.037573,-0.46392,0.17416,-0.45385,-0.12835,-0.59877,0.8254,0.28219,-0.45415,-0.25761,-0.45382,-0.18309,0.53383,-0.11773,0.29059,-0.523,-0.027585,-0.046149,-0.091544,-0.54177,-0.41731,0.27659,-0.16516,0.39236,-0.52289,0.56127,-1.399,0.043558,-0.040238,0.37664,0.31754,-0.33391,0.78573,0.2446,-0.40872,0.54823,-0.24361,0.25078,0.25485,0.44609,-0.56603,-0.49056,-0.10591,-0.37379,0.49928,-0.88995,-0.070833,0.15003,0.32382,-0.09014,-0.27768,0.19252,-0.61394,-0.067797,0.17868,-0.66598,0.48597,0.82527,-0.89541,-0.066009,0.11279,0.36706,-0.086159,0.12721,-0.23107))
  def burns = Vectors.dense(Array(0.3574,-0.036032,-0.55353,0.47198,-0.098969,0.35386,-0.30886,-0.42187,0.25723,-0.027392,-0.88951,-0.0036454,0.47463,-0.84219,0.93829,0.047974,0.19471,0.047533,-0.064977,-1.5137,0.14048,0.35264,-0.41358,0.25163,-0.096361,-0.99667,0.038454,-0.055077,0.1775,-0.050709,0.039077,0.22032,0.56729,0.42964,-0.4591,0.46503,0.17628,-0.15918,0.03579,-0.37122,-0.61705,0.12955,-0.4802,0.11162,-0.28027,-0.18643,0.24751,0.31874,0.27521,-0.034823,-0.44771,-0.16491,-0.3968,-0.36579,-0.1913,0.084543,-0.053727,-0.023741,-0.15399,-0.046946,-0.18697,-0.6461,0.2223,-0.36039,0.32251,0.51697,0.58118,0.23911,-0.15292,0.018548,0.58062,-0.38429,0.33865,0.10738,-0.042622,-0.35011,0.40503,-0.4568,-0.56059,-0.25231,0.024385,0.53066,0.11815,0.14352,-0.12943,-0.15068,-0.17876,-0.21783,-0.30979,0.55487,-0.31145,-0.14054,0.050384,-0.10098,-0.65327,-0.14467,0.61943,-0.10841,-0.23708,-0.44061))
  def emphysema = Vectors.dense(Array(-0.69063,-0.2725,0.78282,-0.16105,-0.82894,0.15014,-0.42308,-0.23178,-0.38418,-0.19122,-0.29987,0.10016,0.22974,-0.73123,0.21537,0.24327,0.74569,0.68348,-0.15377,-0.6169,-7.7028E-4,-0.1439,-0.31592,0.36903,-0.37404,-0.89808,-0.14463,0.042556,-0.58414,0.056281,0.15423,0.58187,-0.14447,0.2474,0.46823,0.15455,-0.022812,0.47792,0.3484,0.028707,-0.94536,0.04942,-0.22006,0.12816,0.25977,0.11508,-0.15192,0.42412,0.061633,0.64465,-0.055028,-0.39738,-0.54141,-0.20709,0.18458,-0.17293,-0.16534,-0.54051,0.18402,-0.25924,-0.13091,-0.7765,-0.29801,-0.25871,-0.21952,0.29163,0.76095,0.0056881,0.654,0.18186,0.85702,0.11551,0.10463,-0.11824,0.5244,-0.50323,0.50279,-0.051051,-0.22594,0.021594,0.10536,0.76196,0.62703,0.78614,0.25055,0.076926,-4.5397E-4,0.075359,-0.41505,-0.0090742,-0.47945,0.066843,0.15568,-0.5396,0.22252,0.033821,0.47039,0.14933,-0.26038,-0.28007))
  def malaria = Vectors.dense(Array(0.38347,0.34509,0.056155,-0.5249,-0.28781,0.30105,0.38856,0.0072944,0.40137,0.6179,-0.2093,-0.42002,0.013365,-0.98824,0.43845,0.1069,-0.35777,0.11259,0.21295,-1.1206,0.5682,0.30247,-0.033035,0.57673,-0.20416,-0.43613,-0.41717,-0.13473,0.24028,0.18975,0.25435,0.27436,-0.0056122,-0.413,0.64423,-0.0088183,-0.40156,0.17458,0.17715,-0.0050566,0.054169,0.28272,-0.33601,-0.72489,-0.014529,-0.39706,-0.25618,-0.11959,-0.47192,0.25316,-0.21472,-0.66489,0.51938,0.35288,-0.26264,0.21902,0.48025,-0.75518,0.21,0.17215,-0.48649,-0.67554,-0.072041,-0.65064,0.34435,0.31189,0.15123,0.0057589,0.67512,-0.55383,0.57157,-0.40189,-0.20779,0.3736,-0.079711,-0.3372,0.05866,0.4308,-0.55386,0.51987,-0.49482,0.25407,0.61644,-0.25629,-0.35349,-0.11419,0.96891,0.17606,0.46557,0.096145,-0.12466,0.67099,0.49203,-0.60796,0.2947,0.36227,0.027322,-0.17779,0.50685,0.1932))

  def beginning = Vectors.dense(Array(0.35714, -0.17247, 0.0018595, -0.26581, -0.39288, -0.076098, -0.43397, -0.56156, 0.14495, -0.051611, 0.18405, -0.17082, 0.20997, 0.3227, -0.13256, -0.058906, 0.052417, -0.24336, -0.22276, -0.36933, 0.2807, 0.17767, -0.030336, 0.090727, -0.24154, -0.56744, -0.20442, -0.40117, 0.31779, 0.14795, 0.07502, -0.26366, 0.021072, 0.17401, -0.030726, -0.29319, -0.26904, 0.054351, 0.071084, 0.3267, 0.25042, 0.14264, -0.30435, 0.052933, -0.16497, -7.4216E-4, -0.1033, 0.016326, 0.30578, -0.21723, -0.055794, 0.19066, -0.1598, 0.26288, 0.0050203, 0.0096768, -0.035065, -0.49942, 0.2934, -0.13397, -0.011748, -0.25763, -0.2178, -0.45265, 0.3741, -0.19486, -0.10367, -0.40262, -0.096251, -0.30551, 0.38393, -0.17499, 0.011243, 0.080995, -0.26395, -0.079212, -0.047687, -0.19444, -0.054887, -0.016675, -0.18886, 0.34029, 0.40016, 0.29491, -0.14791, 0.26646, 0.022371, 0.30149, -0.51822, 0.10265, -0.24645, -0.18275, 0.30495, -0.24032, -0.251, -0.021758, -0.3763, 0.1468, -0.01553, -0.40002))

  def vaccination = Vectors.dense(Array(-0.020347,-0.14236,-0.26581,-0.20226,-0.10111,-0.026,-0.23285,-0.62379,0.18428,0.35409,0.073728,-0.036206,0.29917,-0.24756,0.19094,0.093423,-0.15645,0.099319,-0.36914,-0.25311,-0.23545,-0.14068,0.076412,0.88923,-0.34354,-0.69839,-0.5453,0.016057,0.28518,0.51657,0.57476,0.26427,-0.15278,0.073957,0.39143,0.29836,-0.40905,0.47096,-0.60626,-0.43525,-0.062034,0.81091,-0.18936,-0.025453,-0.21672,-0.52095,-0.21285,0.53922,0.26671,0.021542,-0.31503,-0.57135,0.17447,-0.26171,-0.57523,-0.25591,0.28029,-0.63219,0.18955,-0.34106,0.6256,-0.70811,0.22113,-0.25769,0.33011,-0.60623,-0.27949,0.35424,0.17433,-1.0652,0.36705,-0.38918,0.29899,0.54184,0.42104,-0.54174,-0.55175,-0.14323,-0.26062,0.082611,-1.1277,0.45881,0.086704,0.071274,-0.13734,-0.29788,0.62829,0.069051,0.55067,-0.033008,-0.1958,0.5458,0.89731,-0.59154,0.14621,0.33104,0.13003,0.30418,0.054227,-0.023726))
  def polyomyelitis = Vectors.dense(Array(-0.084939,0.12258,-0.66263,0.14911,-0.48329,0.36216,0.3943,-0.65319,0.08578,-0.19439,0.13904,0.016551,0.053138,-0.13335,-0.2984,0.12579,0.035579,0.56057,0.029967,-0.56299,0.3208,0.25214,0.024391,0.60429,-0.40387,-0.60303,-0.29465,0.31101,-0.34388,0.037793,0.56407,0.10401,0.13476,0.24911,0.10559,-0.031908,-0.53785,0.38085,0.10045,-0.43899,-0.030835,0.66827,-0.12926,0.20581,-0.16548,-0.19648,-0.46428,-0.02471,0.38878,-0.24817,-0.16897,-0.60909,-0.070994,0.24958,-0.62406,-0.20329,0.15323,-0.53395,-0.11998,-0.33127,0.16503,0.069371,0.17146,-0.33734,-0.098778,0.033559,-0.19471,0.69397,0.35318,-0.45116,0.17457,-0.35865,0.025713,0.35048,-0.16589,0.083624,0.035355,0.42105,-0.13684,-0.38412,0.21289,0.58225,0.57248,0.44712,-0.47895,-0.053148,-0.20239,-0.16802,0.17756,0.19188,-0.86256,0.59457,0.66021,-0.6964,-0.64902,0.29686,0.67847,-0.36384,-0.67455,-0.25288))
  def discussion = Vectors.dense(Array(0.11935,-0.22982,-0.1331,-0.29864,-0.19112,0.33944,-0.14766,-0.9799,0.24261,-0.03046,-0.0086486,0.14997,0.47786,-0.018626,0.15927,-0.4575,0.076732,-0.55244,-0.017456,-0.64119,-0.057619,0.53938,-0.15186,0.16758,-0.28249,-0.32295,-0.27095,0.040136,-0.11201,-0.027885,0.43701,-0.37687,0.087496,0.11965,0.1621,-0.0055635,-0.10186,0.2449,0.01352,-0.22666,-0.068006,0.26118,-0.45406,0.36193,-0.017021,-0.42297,0.07037,-0.0073493,-0.17286,0.25948,-0.020218,-0.37934,-0.056898,-0.28591,0.088437,-0.15533,-0.36789,-0.59569,0.46416,-0.091224,-0.080723,-0.18886,0.39739,-0.029934,0.20056,-0.5295,-0.16081,-0.42022,0.25965,-0.43192,0.33538,-0.042748,0.035494,0.15101,-0.0022185,0.14691,-0.24584,-0.40769,0.1478,-0.24177,0.044334,0.20716,0.066737,-0.0074292,-0.67227,0.23454,0.30625,-0.17539,-0.65448,-0.015222,0.30924,-0.19356,0.18571,-0.27878,0.28227,-0.21412,0.20571,-0.11914,-0.1003,-0.27636))
  def obesity = Vectors.dense(Array(0.26342,-0.4356,-0.042643,-0.56131,-0.46759,0.13892,0.073873,0.095973,-0.10775,0.1746,0.0051532,0.39632,-0.01689,-0.7424,-0.31945,0.21181,0.46321,0.038324,-0.12026,-0.78282,0.15364,0.2534,-0.77166,0.5341,0.49303,-0.39763,0.13476,-0.34057,-0.11894,0.18963,0.57288,0.0049075,-0.32934,-0.11208,-0.2025,-0.12547,0.027927,0.6603,0.0074911,-0.35698,-0.27329,0.60602,-0.01284,0.35677,-0.16676,-0.13712,-0.25528,0.36702,-0.049476,-0.032995,-0.20193,-0.088272,-0.19642,0.28766,-0.23827,0.026863,-0.24739,0.2379,0.077437,-0.6109,-0.16565,-0.80388,-0.0034733,-0.20695,-0.62339,0.89269,0.043257,-0.48795,-0.035993,-0.54284,0.61315,-0.019993,-0.30805,-0.0029309,0.2409,-0.625,0.55278,-0.51269,-0.033176,-0.47762,-0.35891,1.0074,0.4542,0.27628,-0.47122,0.062887,0.27266,0.30755,0.032728,-0.053942,0.32121,-0.24459,0.19798,-0.27328,0.32392,0.30432,0.09312,0.14791,-0.4652,0.1399))
  def giantism = Vectors.dense(Array(0.11272,-0.58335,-0.2528,-0.76385,-0.42293,-0.11621,0.091635,-0.47488,-0.22091,-0.41926,0.2987,0.067669,0.11236,-0.46029,-0.16822,-0.11167,0.46867,-0.035912,-0.056333,-0.1926,0.90032,-0.23776,-0.63558,-0.018535,0.18223,-0.0081487,-0.0085652,0.11179,-0.45125,0.39567,0.27749,-0.095979,0.35758,0.39144,0.076723,0.08031,0.065071,0.54967,0.69955,0.10306,0.18087,0.10453,-0.49416,-0.28972,-0.27563,-0.11467,-0.16999,0.13422,-0.030425,-0.01928,-0.13644,-0.26605,0.17229,-0.17011,0.37787,-0.91959,-0.072313,-0.53312,0.12427,-0.17597,-0.62851,-0.3098,-0.073778,-0.27972,0.23615,0.19704,-0.74912,0.32373,0.89983,0.19074,-0.16904,-0.29998,0.25608,-0.21334,-0.11142,-0.16964,-0.20942,-0.036967,0.2469,-0.69088,0.24203,1.139,0.2196,-0.055781,-0.63966,-0.39496,0.5034,0.32556,0.26511,-0.18763,0.033254,-0.60907,0.68772,-0.28701,-0.53883,-0.080768,0.54335,0.19342,0.037563,0.077345))
  def laryngitis = Vectors.dense(Array(0.6364,-0.44466,0.25186,0.62818,-0.23621,-0.11758,-0.099932,-0.69802,-0.2149,-0.045819,-0.11644,-0.10177,0.59514,-0.57488,-0.081858,0.1883,0.61071,0.38784,-0.662,0.056915,-0.031514,0.22654,-0.49501,0.92884,-0.037103,-0.5489,-0.189,0.38638,-0.33093,0.096725,0.27664,-0.035852,0.33758,0.21566,0.97904,-0.39545,-0.03455,0.59295,-0.16608,-0.65775,-0.43528,0.056553,0.055022,-0.36303,-0.34646,-0.084398,0.19999,0.41911,0.5429,-0.10047,-0.41656,-0.93621,0.031159,-0.18633,-0.65102,-0.069827,0.12795,-0.62483,-0.0077473,-0.55088,0.19304,-0.47444,-0.68658,0.26147,-0.29393,-0.21436,0.73613,0.49669,0.36883,-0.07265,0.75605,0.32377,0.25147,0.31525,-0.095519,-0.56473,0.64418,-0.11221,0.43607,-0.020763,0.105,0.28251,0.29039,0.63243,-0.14134,-0.28798,-0.1346,-0.66273,-0.66983,0.12238,-1.5704,0.033058,-0.20617,-0.86671,-0.32969,0.062857,0.54459,-0.32291,-0.32987,-0.45234))
  def conclusions = Vectors.dense(Array(-0.25002,-0.24603,0.012859,-0.060392,0.14424,0.16661,0.41763,-0.7836,7.0469E-4,-0.027816,-0.18602,0.13681,0.55657,0.0025845,-0.12474,-0.25791,-0.16832,-0.19007,0.13561,-0.37311,0.071946,0.27586,-0.31288,0.23612,-0.41544,0.026281,-0.16081,-0.14394,-0.048273,0.01551,-0.034095,0.0465,0.39427,0.0362,-0.2733,0.14557,-0.28383,0.35924,-0.51109,-0.11584,-0.52446,0.29463,-0.18753,-0.26472,0.10423,-0.35128,0.066104,-0.27977,-0.35688,0.18516,-0.22751,-0.26053,-0.29637,0.11028,-0.077277,-0.30875,-0.10921,-0.077713,-0.34386,-0.50506,-0.23905,-0.10759,-0.0042009,0.035742,0.15609,-0.38354,0.16894,-0.24961,0.55238,-0.38769,0.28279,-0.092461,0.29771,0.087824,0.24021,0.25786,-0.095811,-0.50454,0.14822,-0.13976,0.005887,0.51945,-0.20535,0.0061205,-0.54542,0.3202,0.39079,0.068507,-0.50196,0.19561,0.18186,-0.019681,0.29532,-0.23882,0.0098589,-0.48284,-0.16026,-0.24899,0.07661,-0.14453))
  def yellow_fever = Vectors.dense(Array(0.0262,0.12229065,-0.21614500000000003,0.096855,-0.38329,0.02257999999999999,0.447125,-0.25017,-0.08215325,0.14201049999999998,-0.129705,-0.0571635,-0.33648500000000003,-0.6856599999999999,-0.135285,0.44906,0.034385500000000006,0.18519,-0.210885,-0.301676,0.3808955,0.37447,0.08123605,0.5595600000000001,0.09452999999999999,-0.092983,-0.26447200000000004,-0.428905,0.43064,0.29686,0.2240576,-0.06949350000000001,-0.035451,0.15675499999999998,0.156475,-0.033610000000000015,-0.29633,-0.33692,0.8039700000000001,-0.2604585,-0.019211500000000006,0.06677050000000001,-0.33530000000000004,-0.031,0.23651249999999996,-0.21215,0.062331000000000004,0.401155,-0.031919999999999976,-0.075459,-0.756265,-0.31323,0.615345,0.2847992,-0.22669855,0.0030384999999999995,0.1665555,-0.38655,0.412765,-0.33147200000000004,0.238639,-0.5690850000000001,0.223995,-0.3890445,-0.0367325,0.24129499999999998,0.282536,0.109761,0.30302199999999996,-0.62966,0.468985,-0.11099735,0.0011599999999999944,0.457225,-0.013122499999999995,0.02917,-0.0017299999999999954,0.66069,-0.1170335,0.009430000000000008,0.15982600000000002,0.44217,0.28386,0.27471999999999996,-0.04174000000000001,0.21405249999999998,0.20380399999999999,-0.12897324999999998,5.399999999999988E-4,-0.0039949999999999986,-0.727205,-0.086315,0.63319,-0.68692,-0.308892,-0.32387,0.065321,-0.7689900000000001,-0.1142755,-0.713465))
  def either = Vectors.dense(Array(0.42655,0.21859,-0.06223,-0.23189,-0.02791,-0.064096,0.10282,-0.17604,-0.053068,-0.28594,-0.23106,-0.0047357,-0.13969,-0.15198,-0.17531,0.02815,-0.066138,0.23626,-0.086742,0.022588,-0.10734,0.1293,-0.4554,-0.036216,0.04427,-0.15427,-0.056412,-0.098127,0.43546,0.18032,-0.39752,-0.11885,0.23056,0.06826,0.29929,0.11836,-0.072472,-0.28917,0.38674,0.37106,0.21456,0.2475,-0.15274,0.010347,0.081748,0.015329,-0.15368,0.31888,0.19498,0.15897,0.0059204,0.0047606,-0.054352,-0.23501,-0.09739,-0.22118,-0.023259,-0.29705,-0.11284,-0.38962,0.31088,0.049017,-0.14644,0.054806,-0.09502,0.028068,0.12226,0.060096,0.26399,-0.2942,0.094715,0.21012,0.34829,0.21605,0.16424,0.043876,0.18188,-0.026592,-0.14148,-0.11151,-0.17356,0.39652,-0.054569,0.11893,0.040852,0.35674,0.051043,0.23233,-0.29734,0.015627,0.052905,0.18025,0.22599,-0.4832,0.0079133,0.12158,0.16714,0.17881,-0.032681,-0.31744))
  def belief = Vectors.dense(Array(0.19593,-0.36612,0.011598,-0.17202,-0.033277,-0.057112,0.24744,-0.55359,0.33676,-0.33671,0.2664,-0.017208,0.28707,-0.77565,0.16054,-0.23856,-0.15884,-0.30131,0.22747,-0.48588,-0.14874,-0.13811,-0.55694,0.31592,-0.4306,0.2416,-0.3752,-0.12277,0.16886,0.22801,0.16193,0.0087857,0.035419,0.13056,-0.027519,0.18885,-0.18293,0.061026,0.42197,-0.3973,-0.066076,0.50745,-0.034977,-0.0013279,0.045941,-0.80312,0.49432,-0.31085,0.2553,0.2922,-0.064807,-0.3333,-0.3587,0.3071,-0.18147,-0.27725,-0.13038,-0.6122,0.53753,-0.72288,0.12457,-0.45271,-0.042396,0.013436,0.42128,0.068806,-0.15884,-0.014902,0.44003,-0.21152,0.34066,-0.058311,-0.1072,-0.31571,0.041636,0.22252,-0.27544,0.038436,0.060008,-0.38709,0.10228,1.1947,-0.56689,0.45503,-0.34297,-0.13795,0.35792,-0.30692,-0.35374,-0.33212,0.2879,0.44058,0.045079,-0.054197,0.42051,0.079208,-0.24615,-0.10872,0.24586,-0.15129))
  def diarrhea = Vectors.dense(Array(0.51024,0.10515,-0.19527,0.45923,-0.18302,0.13178,0.072949,-0.097735,0.16219,0.5825,-0.078278,0.46245,-0.16874,-0.87744,-0.21055,0.66088,-0.42784,0.26545,-0.58716,-0.62175,0.628,1.0589,-0.38047,0.63603,0.14399,-0.64378,-0.10794,0.5878,0.39978,0.25915,0.13711,0.086453,0.32134,0.36094,0.10683,-0.2344,-0.64471,0.049593,0.069786,-0.61932,-0.30298,0.2154,0.23876,-0.1658,0.0064606,-0.50114,-0.30241,0.81147,0.066903,-0.3723,-0.56703,-0.60422,-0.017314,0.33307,-0.79887,1.076E-4,0.49509,-0.43701,0.69928,-0.54022,0.44303,-0.56785,-0.0053618,-0.35733,0.22808,0.52447,0.63128,0.051836,-0.054905,-0.50572,0.53191,0.13029,0.21071,0.82723,0.20291,-0.43636,0.22915,0.41829,-0.12092,-0.041742,-0.15884,0.49975,0.42481,-0.13641,-0.44433,0.35741,-0.33418,0.052812,0.026613,0.14362,-0.75178,0.50291,-0.22849,-0.58021,-0.4449,-0.14657,-0.18156,-0.57024,0.20389,-0.20963))
  def worst = Vectors.dense(Array(0.34962,-0.38115,-0.10848,0.46703,-0.037403,0.36836,-0.176,-0.22753,0.40621,0.047018,-0.026043,0.36224,0.14259,0.013089,-0.029101,-0.16386,-0.052922,0.16854,0.52784,-0.42245,0.4392,0.016594,-0.44902,-0.065516,-0.3674,-0.19572,-0.44028,-0.46996,-0.24485,-0.10863,-0.034135,-0.26902,0.095231,-0.14371,-0.096805,0.10515,-0.218,-0.18042,0.31292,-0.52184,-0.039439,0.10494,-0.39429,-0.24269,-0.3249,-0.072902,0.67262,0.34208,-0.1177,0.039674,-0.34007,-0.35771,-0.32055,0.077102,-0.28274,-0.43087,-0.18149,-0.58647,0.4444,-0.71432,0.1261,-0.028584,0.013391,-0.0073067,0.31844,0.045483,0.20711,-0.02647,0.25033,0.03394,0.23044,0.2326,-0.083599,0.063029,0.10913,-0.10537,0.28349,-0.2278,-0.1851,0.15946,-0.16301,0.58481,0.18022,0.009614,0.095214,0.14667,0.52276,0.12559,0.28636,-0.34484,0.081005,-0.10425,-0.38392,-0.21133,-0.066612,0.10977,0.18757,-0.62478,0.22151,-0.49683))
  def fever = Vectors.dense(Array(-0.17453,-0.0090887,-0.16273,0.46763,-0.44115,0.17028,0.51515,-0.34014,-0.16088,0.36299,0.29199,-0.027799,-0.28864,-0.6307,0.13586,0.70068,-0.067729,0.25143,-0.1492,-0.57454,0.71,0.63768,0.16064,0.63743,0.35733,-0.13287,-0.58774,0.06286,0.26221,0.28899,0.43962,0.075553,0.081828,0.12161,0.16552,-0.30852,-0.45433,-0.21998,0.60254,-0.46597,-0.11038,0.23175,-0.24362,-0.28524,-0.093145,-0.23661,-0.018498,0.20309,-0.347,-0.21526,-0.50453,-0.76952,0.53043,0.0032384,-0.45942,0.050323,0.35982,-0.50917,0.3175,-0.56344,0.37945,-0.46685,0.10988,-0.84374,0.094005,0.18736,0.56272,0.20445,0.092154,-0.83349,0.77416,0.0038253,0.22221,0.30287,0.079765,-0.2535,-0.11341,0.86879,-0.16419,-0.21872,-0.059528,0.7472,0.39623,0.34341,-0.25218,-0.054115,-0.016552,-0.0025165,-0.13616,-0.33957,-0.8669,0.10925,0.50129,-0.97339,-0.062894,-0.22838,0.020632,-0.82353,-0.21183,-0.63488))
  def autism = Vectors.dense(Array(0.62945,-0.095142,-0.27361,-0.80094,-0.044007,0.58818,-0.21156,-0.50861,-0.55946,0.011602,0.43639,0.19898,0.60926,-0.78814,-0.58672,-0.78891,-0.22398,-0.02882,0.23732,-0.92661,-0.19544,0.202,-0.76886,-0.085922,0.54759,-0.3055,-0.46349,0.51267,-0.42457,0.59596,0.072047,0.38691,0.11374,0.22206,0.27878,0.063735,-0.6237,0.64527,0.44408,-0.39175,-0.10844,0.37681,-0.31584,0.50317,0.13121,-0.59101,-0.6964,-0.18302,0.15204,-0.50563,-0.045747,-0.32521,-0.022095,0.10719,-0.30372,-0.23252,-0.3134,-0.45362,-0.14764,-0.48721,-0.68689,-0.61596,-0.25241,-0.25855,-0.18525,0.87151,-0.29089,0.35199,0.86852,0.21988,-0.05315,-0.12321,-0.25486,0.32671,-0.2928,-0.35635,0.29594,-0.65321,-0.034043,0.31454,-0.2601,0.54056,0.21425,-0.21916,-0.54636,-0.33834,0.41823,-0.094657,-0.65597,-0.14494,-0.71916,0.4967,0.089165,-0.2625,0.23951,0.16879,-0.3202,0.28818,-0.29871,-0.50756))
  def hepatitis = Vectors.dense(Array(1.1856,0.19862,0.22186,0.20199,-0.90965,0.38129,-1.1396E-4,-0.076728,0.23102,0.17253,-0.085849,-0.13006,0.11597,-0.40974,-0.73334,0.6525,0.28608,0.26356,-0.3772,-0.049291,0.69811,0.08849,-0.14724,0.54332,-0.14814,-0.95306,-0.052966,-0.13955,0.43465,-0.014543,0.68453,-0.27274,-0.2875,0.0026776,0.80406,-0.17789,-0.19593,0.61433,-0.29278,-0.49357,-0.43821,0.37936,0.061879,0.35948,-0.027333,-0.61641,-0.46842,0.37007,-0.57116,0.48379,-0.60515,-0.51583,0.33083,-0.036917,-1.0071,-0.035352,0.13558,-0.080792,-0.037379,-0.28461,0.12258,-0.17479,-0.17112,-0.25072,0.22993,0.14482,-0.15395,0.17009,0.51224,-0.67265,0.66566,-0.53158,-0.39179,0.26961,0.27165,-0.23579,-0.51256,0.37713,-0.69794,0.84941,-0.40218,0.51497,-0.45703,0.39056,0.33929,0.030511,-0.090089,-0.26179,-0.24877,0.21573,-0.01466,1.0633,0.76137,-0.83796,-0.095321,0.10888,0.45819,-0.26957,-0.052537,0.088479))
  def flu = Vectors.dense(Array(0.45195,9.4822E-4,0.032946,-0.32899,-0.058971,0.23799,0.073891,-0.25252,0.26357,0.83105,0.37661,0.080715,-0.193,-0.18728,-0.29771,0.34001,-0.029089,-0.038758,0.13504,-0.34936,-0.0032145,0.3781,0.13871,0.60662,-0.23483,-0.14548,0.0024885,-0.22875,0.54299,-0.14772,0.23277,-0.020408,-0.10034,0.63537,0.25049,-0.27014,-0.18332,-0.4304,0.31146,-0.11416,-0.76768,0.19434,-0.082996,-0.16367,-0.25437,-0.40511,-0.19265,0.40987,0.30022,0.044676,0.008416,0.070727,0.24243,0.02536,-0.47964,-0.18176,0.22021,-0.37369,0.1573,-0.60401,0.93886,-1.0143,0.048924,0.14791,0.61774,0.37846,0.36826,0.55964,0.37963,-0.28725,0.34984,-0.12949,0.13708,0.33549,0.1599,-0.18345,-0.37397,0.056752,-0.13223,0.44402,-0.47395,0.13173,0.13076,0.21182,0.0023127,-0.063033,0.30182,-0.23663,-0.36975,-0.16504,-0.66139,0.43846,0.69425,-0.42787,-0.41994,0.27492,0.084858,0.013002,-0.056324,-0.84869))
  def chicken_pox = Vectors.dense(Array(0.082005,0.38554,-0.396275,-0.40959500000000004,-0.1550135,-0.29427499999999995,0.0598045,0.208585,-0.033299999999999996,0.1471705,-0.388625,-0.13552999999999998,0.16575600000000001,-0.609435,0.08057,0.14123,-0.12321499999999999,-0.08554,0.0540706,-0.1675615,-0.144061,-0.0747995,0.47022,0.657595,0.031505000000000005,-0.35859,-0.046870999999999996,-0.26928,0.570355,0.0024399999999999977,-0.14648,-0.17655600000000002,-0.304345,0.43913500000000005,0.15366000000000002,-0.10676574999999999,-0.411925,0.053767999999999996,-0.22507,0.30052999999999996,-0.24061,0.20300100000000001,-0.3148225,0.096585,-0.01669000000000001,-0.05207,0.290865,0.4937145,0.283315,0.05763556,-0.8064800000000001,-0.026110000000000022,-0.07176500000000001,0.361885,-0.0610585,-0.47845000000000004,0.0955805,-0.49485,0.12443,-0.15268500000000002,0.11727999999999998,-0.6703,-0.04305921,-0.16465,0.029785000000000006,0.29391,-0.201846,0.58822,0.27302000000000004,-0.50683,0.06089615,-0.1031965,-0.18748065000000003,0.05512500000000001,0.13801750000000002,-0.2144365,-0.21029,0.30427,-0.1223875,0.22799,-0.04631475,0.349665,0.204362,-0.10172,0.06510000000000002,0.212635,0.5224799999999999,0.318976,-0.10877800000000001,0.41408,-0.67242,0.302695,0.45342499999999997,-0.19245299999999999,-0.017769999999999998,0.1642335,0.62456,-0.290891,-0.006260000000000002,-0.5779700000000001))
  def end = Vectors.dense(Array(0.57711,-0.16651,-0.055516,-0.20665,-0.39936,-0.59442,0.12543,-0.41209,0.27844,-0.28718,0.031317,-0.26379,0.1799,0.72951,-0.38357,-0.026812,-0.072384,-0.071126,-0.31298,-0.36629,0.44223,0.067586,0.0406,0.1483,-0.3496,-0.8648,0.42006,-0.213,0.26876,0.016251,0.11399,-0.12833,-0.34279,-0.082944,0.080939,0.34654,0.049186,0.25676,0.065768,0.29476,0.0683,0.11803,-0.26376,-0.064053,0.48682,0.029622,0.13007,0.4585,0.16719,-0.16362,-0.2767,0.1521,-0.29259,0.00842,0.12382,-0.090086,-0.015284,-0.63798,0.19789,-0.11373,-0.0084501,0.095602,-0.06239,-0.18036,0.8136,0.11719,-0.42426,-0.50457,-0.10029,-0.1858,0.57529,0.25247,-0.18222,0.064385,-0.1965,-0.044725,0.21907,-0.098749,-0.64702,0.29929,-0.48026,0.48515,0.28372,0.14622,0.077438,0.20343,0.12553,0.15953,-0.61105,0.043783,-0.099327,-0.093217,-0.14717,-0.37702,0.024639,0.062801,0.24983,-0.048706,0.040535,-0.30651))
  def experimentation = Vectors.dense(Array(0.22902,-0.077156,0.1143,-0.55526,-0.20465,0.41885,-0.48934,-0.56449,-0.0075629,-0.372,-0.1042,-0.27982,0.2747,-0.56607,0.0096297,-0.48046,-0.060384,-0.36067,-0.55835,-0.31947,0.1281,-0.066027,0.023061,0.042108,-0.20473,-0.31965,-0.067028,-0.31045,0.2929,0.013904,0.12398,-0.17759,-0.33892,-0.13491,-0.15,-0.25336,-0.2813,-0.35088,-0.20405,0.12716,-0.28197,0.324,-0.16621,0.084441,0.0035298,-0.22304,-0.066936,0.1394,0.1363,-0.0034315,0.56053,-0.14709,-0.2952,0.28861,-0.063953,-0.41831,0.090136,-0.31549,0.17906,-0.17993,-0.51712,-0.24211,-0.21965,-0.065292,0.18223,-0.27393,0.17928,-0.07568,0.11183,-0.43117,0.56789,-0.087592,0.35496,-0.2938,0.16442,-0.15056,0.0082055,-0.48039,0.10361,-0.32192,-0.17465,0.53088,-0.32397,-0.064094,-0.60791,-0.074331,0.45175,-0.4057,-0.42729,0.2265,-0.11093,0.13416,0.35997,-0.15987,0.14976,-0.32583,-0.099132,0.0060078,0.029308,0.13951))
  def leukaemia = Vectors.dense(Array(0.015983,0.27247,-0.18534,-0.056822,-0.38536,0.23189,0.074174,-0.015052,0.45115,0.037929,-0.37131,0.65832,0.37582,-0.39238,0.11587,0.3026,-0.52574,0.1514,0.49089,-0.56335,0.63487,0.82386,0.077852,0.62872,-0.045795,-0.62757,-0.12633,-0.10334,-0.4949,0.22213,-0.084208,-0.68913,-0.56928,-0.057893,0.10854,-0.12859,0.074374,0.36145,0.034193,-0.083617,-0.21015,0.63985,-0.12197,0.18604,-0.52318,-0.29644,-0.30331,0.31372,0.023762,-0.39528,-0.0050667,-0.28686,0.43059,0.1745,-0.48436,-0.59673,-0.060306,-0.4654,-0.79944,-1.1184,-0.45623,0.44791,0.1522,-0.0741,0.32017,0.43308,0.42443,0.173,0.98707,-0.14282,0.50512,-0.60716,-0.001226,0.033955,0.67095,-0.025098,0.0087887,0.35104,-0.10328,0.52711,-0.18551,0.10663,0.32961,0.041963,0.098939,-0.07549,-0.035074,-0.21746,-0.30934,-0.33413,-1.064,0.32344,0.43127,-0.63083,0.092634,0.17825,0.44482,0.35649,-0.019785,-0.12364))
  def migraine = Vectors.dense(Array(0.60053,0.081278,-0.12978,0.18414,0.17607,-0.13529,0.47426,-0.81443,-0.27598,0.025711,0.51681,-0.028888,0.22569,-0.95164,-0.11441,0.062209,-0.031443,0.41372,-0.036969,-0.93952,0.47348,0.61207,-0.33986,0.093963,0.1398,-0.6173,-0.42443,0.010667,0.20595,0.042565,0.34719,0.4012,0.41214,-0.17016,-0.018595,0.2034,0.0059277,0.19695,0.34459,-0.30603,-0.30856,0.59707,0.076302,0.54644,-0.49024,0.38015,-0.28851,-0.75384,0.076032,-0.45609,0.45708,-0.39315,0.12028,-0.32343,-0.17603,0.45549,-0.34078,-0.63121,0.077579,-0.52116,-0.42432,-0.70614,-1.0902,0.20998,-0.28896,0.11463,0.26934,-0.26004,0.6063,-0.034602,-0.070687,0.30302,0.12037,0.26677,0.12425,-0.45572,0.15126,-0.048325,0.35485,0.11267,-0.32591,0.88117,0.70974,-0.5746,-0.78001,-0.39147,0.44383,0.34754,-0.31358,-0.16679,-0.72376,-0.10605,0.53285,-0.72072,0.43899,0.45542,0.13755,-0.15177,-0.37366,-0.50971))
  def after = Vectors.dense(Array(0.193,0.016121,-0.19485,0.065504,-0.3669,0.069742,-0.30181,-0.39677,-0.054565,-0.11772,-0.44038,-0.090195,0.019543,0.14796,-0.21412,0.24414,-0.024067,0.048093,-0.086784,-0.053795,0.21956,0.1695,-0.33804,0.091228,-0.25216,-0.53522,-0.35373,-0.28606,0.31215,0.012377,-0.14832,0.064156,0.054208,0.2831,-0.028421,0.029775,0.20602,0.012994,-0.003668,0.30274,0.42442,0.37406,-0.2261,0.050209,-0.49768,0.45047,-0.0023365,0.18241,0.14438,-0.057676,0.1852,0.35649,-0.50983,-0.015935,-0.14242,-0.022339,0.15148,-0.62741,0.1028,-0.040755,0.24632,-0.025665,0.19253,-0.31408,-0.018513,-0.009511,0.31904,-0.14535,0.11299,-0.098616,0.37616,-0.012002,0.19044,0.10436,-0.13127,-0.0054947,0.36209,0.063956,-0.16461,0.21267,0.091279,0.2519,-0.11921,0.44324,0.15561,0.18942,0.03373,0.58784,-0.26943,0.31414,-0.092417,0.14844,0.46867,-0.24591,-0.14576,-0.048207,-0.13583,-0.18183,0.26881,-0.44566))
  def death = Vectors.dense(Array(0.037344,0.15877,-0.2772,0.12395,-0.22681,0.076239,0.034977,-0.62401,-0.086926,0.18492,-0.25282,-0.64698,0.057309,-0.12583,0.40833,-0.022626,-0.038486,0.67189,0.0074852,-0.19694,0.51724,0.90574,0.010221,0.36221,-0.096743,-0.40468,0.14224,-0.46159,0.12161,-0.41222,-0.30319,0.018384,-0.10536,0.18933,0.09395,0.43044,0.29892,0.28489,0.19151,0.014117,0.3272,0.32384,-0.37889,0.35005,-0.15861,-0.2936,-0.071914,0.013793,0.020808,0.31532,-0.30485,-0.46298,-0.68248,-0.10427,-0.37298,-0.62825,0.15384,-0.39294,0.041751,-0.77288,0.020109,-0.20369,0.68143,-0.30366,0.5242,0.66515,-0.080984,-0.56336,0.30809,-0.27342,0.30823,-0.13448,-0.15902,-0.27728,0.6206,-0.36662,0.42764,-0.45811,0.14575,0.28903,-0.50154,0.074577,-0.018396,0.60032,-0.38143,0.29334,0.4342,-0.1206,0.22548,0.093194,-0.49245,-0.11465,0.062156,-0.32031,-0.1564,0.62246,-0.0043853,0.14792,0.24879,-0.14837))
  def lyme = Vectors.dense(Array(0.14648,0.2333,-0.65439,-0.47971,-0.77482,0.038956,0.25601,-0.50927,-0.23369,-0.22516,0.50712,-0.42976,-0.070234,-0.35455,-0.14035,-0.21188,0.14323,0.2821,0.57173,-0.46243,0.25798,0.55898,-0.25217,1.1315,-0.24711,-0.18794,-0.74587,-0.055185,-0.32142,0.36556,-0.48829,0.8364,-0.3511,-0.13625,0.041062,-0.41265,-0.6019,0.17291,-0.10442,-0.91697,-0.016236,0.41026,-0.17092,-0.5497,-0.013121,-0.49966,0.16399,-0.37731,-0.22328,0.03541,0.03612,-0.87781,0.29307,0.17413,-0.75041,0.46724,-0.16012,-0.32685,-0.12523,-0.56232,-0.048168,0.075655,-0.10555,-0.55172,-0.11255,-0.0082049,-0.62716,0.69058,0.1849,-0.79961,0.30639,-0.46487,0.36789,0.32211,0.049091,-0.24024,-0.59838,0.75022,-0.47711,0.038826,-0.37,0.40712,0.60465,0.14637,-0.65006,0.03884,0.28746,-0.54491,-0.095241,-0.075591,-0.85562,0.27714,1.0434,-0.56409,-0.17307,0.12334,0.6947,-0.28321,-0.17804,-0.56508))
  def polio = Vectors.dense(Array(0.45556,-0.16177,-0.092894,-0.10217,-0.27302,0.039558,0.12876,-0.69901,0.1268,0.017773,0.1299,-0.15677,0.41573,-0.31505,-0.08575,0.46894,-0.3875,0.095446,0.24099,-0.76234,0.72362,-0.38905,-0.1835,0.45906,-0.39469,-0.96441,-0.32819,-0.062715,0.64219,0.34528,0.80847,0.82534,-0.098287,-0.12514,0.30586,-0.15262,-0.33106,0.58809,-0.60583,-0.64716,0.15661,0.45733,0.28,-0.20037,-0.62946,-1.0226,-0.31738,0.67181,0.58284,-0.26943,-0.89068,0.06633,-0.18257,0.013338,-0.45836,-0.37749,0.73572,-0.31944,0.46962,-0.095826,0.67925,-0.23663,-0.11924,-0.50827,0.49946,-0.32562,-0.83631,0.67187,0.54098,0.05618,0.50221,-0.23536,0.16301,0.47445,-0.24692,0.0045674,-0.4736,-0.14862,-0.13332,0.44595,-0.61168,0.75073,-0.090295,0.32012,-0.51094,-0.45691,0.67664,0.088321,0.23717,0.095682,-0.30206,0.48335,0.55123,-0.93023,0.0079076,0.20436,0.23708,-0.4221,-0.020941,-0.28483))

  def sentence = Seq[MLVector](complete, response, associated, swith, lenalidomide, and, celecoxib, in, a, scase, of, primary, refractory, hodgkin, lymphoma, hodgkin, lymphoma, hl, represents, s11, of, all, lymphoma, cases, sthis, disease, occurs, in, young, adults, but, also, affects, people, over, s55, years, of, age, despite, the, fact, that, s80, of, all, newly, diagnosed, patients, under, s60, will, achieve, a, sustained, complete, response, cr, s5, s10, of, hl, patients, are, refractory, to, initial, treatment, and, s10, s30, of, patients, will, eventually, relapse, after, an, initial, cr, the, treatment, recommendation, sfor, primary, refractory, or, relapsed, hl, patients, is, salvage, therapy, followed, by, high, dose, chemotherapy, and, autologous, stem, cell, transplantation, following, sthis, approach, a, significant, part, will, still, relapse, at, any, moment, thus, further, research, and, snew, drugs, or, combinations, are, required, overexpression, of, cox, s2, has, been, associated, swith, poor, prognosis, in, relapse, refractory, hl, patients, so, it, could, be, a, potential, therapeutic, target, in, hl, sfor, sthis, purpose, several, drugs, may, have, a, role, specific, cox, s2, inhibitors, such, as, celecoxib, or, other, anti, inflammatory, drugs, such, as, lenalidomide, may, further, inhibit, lipopolysaccharide, mediated, induction, of, cox, s2, moreover, lenalidomide, and, cox, s2, inhibitors, celecoxib, have, been, tested, in, solid, tumors, swith, encouraging, results, we, present, a, scase, of, a, young, female, diagnosed, swith, a, heavily, pretreated, hl, nodular, sclerosis, subtype, who, after, failing, six, treatment, lines, only, achieved, clinical, and, radiological, cr, after, six, cycles, of, lenalidomide, celecoxib, that, resulted, in, an, event, free, survival, of, s22, months, we, explain, the, rationale, of, susing, sthis, chemotherapy, regimen, and, our, patient, follow, up)
}

